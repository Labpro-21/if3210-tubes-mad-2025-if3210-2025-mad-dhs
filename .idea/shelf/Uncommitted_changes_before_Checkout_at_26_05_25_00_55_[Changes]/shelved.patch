Index: app/src/main/java/com/tubes/purry/ui/detail/SongDetailFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.detail\r\n\r\nimport android.os.Bundle\r\nimport com.bumptech.glide.Glide\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.tubes.purry.R\r\nimport com.tubes.purry.data.local.AppDatabase\r\nimport com.tubes.purry.databinding.FragmentSongDetailBinding\r\nimport com.tubes.purry.ui.player.NowPlayingViewModel\r\nimport com.tubes.purry.ui.player.NowPlayingViewModelFactory\r\nimport com.tubes.purry.ui.player.PlayerController\r\nimport com.tubes.purry.ui.profile.ProfileViewModel\r\nimport com.tubes.purry.utils.formatDuration\r\n\r\nclass SongDetailFragment : Fragment() {\r\n    private lateinit var binding: FragmentSongDetailBinding\r\n    private lateinit var nowPlayingViewModel: NowPlayingViewModel\r\n    private val handler = Handler(Looper.getMainLooper())\r\n    private var isDragging = false\r\n\r\n    private val profileViewModel: ProfileViewModel by activityViewModels()\r\n\r\n    private val updateSeekRunnable = object : Runnable {\r\n        override fun run() {\r\n            if (!isDragging && PlayerController.isPlaying()) {\r\n                val currentPosition = PlayerController.getCurrentPosition()\r\n                binding.seekBar.progress = currentPosition\r\n                binding.tvCurrentTime.text = formatDuration(currentPosition)\r\n            }\r\n            handler.postDelayed(this, 500)\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentSongDetailBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        val context = requireContext().applicationContext\r\n        val db = AppDatabase.getDatabase(context)\r\n        val factory = NowPlayingViewModelFactory(db.LikedSongDao(), db.songDao(), profileViewModel)\r\n        nowPlayingViewModel = ViewModelProvider(requireActivity(), factory)[NowPlayingViewModel::class.java]\r\n\r\n        nowPlayingViewModel.currSong.observe(viewLifecycleOwner) { song ->\r\n            song?.let {\r\n                binding.tvTitle.text = it.title\r\n                binding.tvTitle.isSelected = true\r\n                binding.tvArtist.text = it.artist\r\n                Glide.with(this)\r\n                    .load(song.coverPath ?: song.coverResId ?: R.drawable.album_default)\r\n                    .into(binding.ivCover)\r\n                binding.tvDuration.text = formatDuration(it.duration)\r\n                binding.seekBar.max = it.duration\r\n            }\r\n        }\r\n\r\n        nowPlayingViewModel.isPlaying.observe(viewLifecycleOwner) { isPlaying ->\r\n            binding.btnPlayPause.setImageResource(\r\n                if (isPlaying) R.drawable.ic_pause_btn\r\n                else R.drawable.ic_play_btn\r\n            )\r\n        }\r\n\r\n        nowPlayingViewModel.isShuffling.observe(viewLifecycleOwner) { isShuffling ->\r\n            val color = if (isShuffling) R.color.green else android.R.color.white\r\n            binding.btnShuffle.setColorFilter(resources.getColor(color, null))\r\n        }\r\n\r\n        nowPlayingViewModel.repeatMode.observe(viewLifecycleOwner) { mode ->\r\n            val resId = when (mode) {\r\n                NowPlayingViewModel.RepeatMode.NONE -> R.drawable.ic_repeat\r\n                NowPlayingViewModel.RepeatMode.ALL -> R.drawable.ic_repeat\r\n                NowPlayingViewModel.RepeatMode.ONE -> R.drawable.ic_repeat_one\r\n                null -> R.drawable.ic_repeat\r\n            }\r\n            val color = when (mode) {\r\n                NowPlayingViewModel.RepeatMode.NONE, null -> android.R.color.white\r\n                NowPlayingViewModel.RepeatMode.ALL, NowPlayingViewModel.RepeatMode.ONE -> R.color.green\r\n            }\r\n\r\n            binding.btnRepeat.setImageResource(resId)\r\n            binding.btnRepeat.setColorFilter(resources.getColor(color, null))\r\n        }\r\n\r\n        binding.btnPlayPause.setOnClickListener {\r\n            nowPlayingViewModel.togglePlayPause()\r\n        }\r\n\r\n        binding.btnBack.setOnClickListener {\r\n            requireActivity().onBackPressedDispatcher.onBackPressed()\r\n        }\r\n\r\n        binding.seekBar.setOnSeekBarChangeListener(object : android.widget.SeekBar.OnSeekBarChangeListener {\r\n            override fun onProgressChanged(seekBar: android.widget.SeekBar?, progress: Int, fromUser: Boolean) {\r\n                if (fromUser) {\r\n                    binding.tvCurrentTime.text = formatDuration(progress)\r\n                }\r\n            }\r\n\r\n            override fun onStartTrackingTouch(seekBar: android.widget.SeekBar?) {\r\n                isDragging = true\r\n            }\r\n\r\n            override fun onStopTrackingTouch(seekBar: android.widget.SeekBar?) {\r\n                isDragging = false\r\n                seekBar?.progress?.let {\r\n                    PlayerController.seekTo(it)\r\n                }\r\n            }\r\n        })\r\n\r\n        // Observe the liked state\r\n        nowPlayingViewModel.isLiked.observe(viewLifecycleOwner) { isLiked ->\r\n            if (isLiked) {\r\n                binding.btnFavorite.setImageResource(R.drawable.ic_heart_filled)\r\n            } else {\r\n                binding.btnFavorite.setImageResource(R.drawable.ic_heart_outline)\r\n            }\r\n        }\r\n\r\n        binding.btnFavorite.setOnClickListener {\r\n            val currentSong = nowPlayingViewModel.currSong.value\r\n            currentSong?.let { song ->\r\n                nowPlayingViewModel.toggleLike(song)\r\n            }\r\n        }\r\n\r\n        binding.btnShuffle.setOnClickListener {\r\n            nowPlayingViewModel.toggleShuffle()\r\n            Toast.makeText(requireContext(), \"Shuffle ${if (nowPlayingViewModel.isShuffling.value == true) \"ON\" else \"OFF\"}\", Toast.LENGTH_SHORT).show()\r\n        }\r\n\r\n        binding.btnRepeat.setOnClickListener {\r\n            nowPlayingViewModel.toggleRepeat()\r\n            Toast.makeText(requireContext(), \"Repeat mode: ${nowPlayingViewModel.repeatMode.value}\", Toast.LENGTH_SHORT).show()\r\n        }\r\n\r\n        binding.btnNext.setOnClickListener {\r\n            nowPlayingViewModel.nextSong(requireContext())\r\n        }\r\n\r\n        binding.btnPrev.setOnClickListener {\r\n            nowPlayingViewModel.previousSong(requireContext())\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        handler.post(updateSeekRunnable)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        handler.removeCallbacks(updateSeekRunnable)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/detail/SongDetailFragment.kt b/app/src/main/java/com/tubes/purry/ui/detail/SongDetailFragment.kt
--- a/app/src/main/java/com/tubes/purry/ui/detail/SongDetailFragment.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/detail/SongDetailFragment.kt	(date 1748195617113)
@@ -2,31 +2,45 @@
 
 import android.os.Bundle
 import com.bumptech.glide.Glide
-import android.os.Handler
-import android.os.Looper
+import android.content.Intent
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import android.widget.PopupMenu
 import android.widget.Toast
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.activityViewModels
-import androidx.lifecycle.ViewModelProvider
+import androidx.navigation.fragment.findNavController
 import com.tubes.purry.R
-import com.tubes.purry.data.local.AppDatabase
 import com.tubes.purry.databinding.FragmentSongDetailBinding
 import com.tubes.purry.ui.player.NowPlayingViewModel
 import com.tubes.purry.ui.player.NowPlayingViewModelFactory
 import com.tubes.purry.ui.player.PlayerController
+import com.tubes.purry.ui.player.AudioRoutingViewModel
+import com.tubes.purry.ui.player.AudioDeviceBottomSheet
 import com.tubes.purry.ui.profile.ProfileViewModel
-import com.tubes.purry.utils.formatDuration
+import com.tubes.purry.utils.previewAndShareQrCode
+import android.util.Log
+import com.tubes.purry.PurrytifyApplication
+import androidx.lifecycle.viewModelScope
+import com.tubes.purry.data.model.AudioDeviceType
 
 class SongDetailFragment : Fragment() {
     private lateinit var binding: FragmentSongDetailBinding
-    private lateinit var nowPlayingViewModel: NowPlayingViewModel
-    private val handler = Handler(Looper.getMainLooper())
     private var isDragging = false
 
     private val profileViewModel: ProfileViewModel by activityViewModels()
+    private lateinit var nowPlayingViewModel: NowPlayingViewModel
+    private val audioRoutingViewModel: AudioRoutingViewModel by activityViewModels()
+
+    private val nowPlayingViewModel: NowPlayingViewModel by activityViewModels {
+        NowPlayingViewModelFactory(
+            requireActivity().application,
+            AppDatabase.getDatabase(requireContext()).LikedSongDao(),
+            AppDatabase.getDatabase(requireContext()).songDao(),
+            profileViewModel
+        )
+    }
 
     private val updateSeekRunnable = object : Runnable {
         override fun run() {
@@ -48,64 +62,246 @@
     }
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        val context = requireContext().applicationContext
-        val db = AppDatabase.getDatabase(context)
-        val factory = NowPlayingViewModelFactory(db.LikedSongDao(), db.songDao(), profileViewModel)
-        nowPlayingViewModel = ViewModelProvider(requireActivity(), factory)[NowPlayingViewModel::class.java]
+        super.onViewCreated(view, savedInstanceState)
+        nowPlayingViewModel = (requireActivity().application as PurrytifyApplication).nowPlayingViewModel
+        handleArguments()
+        setupObservers()
+        setupClickListeners()
+    }
+
+    private fun handleArguments() {
+        arguments?.let { bundle ->
+            val songId = bundle.getString("songId")
+            val songIdInt = bundle.getInt("songIdInt", -1)
+            val isLocal = bundle.getBoolean("isLocal", false)
+            val serverId = bundle.getInt("serverId", -1)
+
+            if (!songId.isNullOrEmpty()) {
+                if (isLocal) {
+                    loadLocalSong(songId)
+                } else {
+                    val serverIdToUse = if (serverId > 0) serverId else extractServerIdFromSongId(songId)
+                    if (serverIdToUse != null && serverIdToUse > 0) {
+                        loadServerSong(serverIdToUse)
+                    } else {
+                        showErrorAndReturn("ID lagu server tidak valid: $songId")
+                    }
+                }
+            } else if (songIdInt > 0) {
+                loadServerSong(songIdInt)
+            } else {
+                handleLegacyFormat(bundle)
+            }
+        } ?: run {
+            showErrorAndReturn("Tidak ada data lagu")
+        }
+    }
+
+    private fun handleLegacyFormat(bundle: Bundle) {
+        val legacyId = bundle.getString("id")
+        if (!legacyId.isNullOrEmpty()) {
+            if (legacyId.startsWith("srv-")) {
+                val serverId = extractServerIdFromSongId(legacyId)
+                if (serverId != null) {
+                    loadServerSong(serverId)
+                } else {
+                    showErrorAndReturn("Format ID server tidak valid: $legacyId")
+                }
+            } else {
+                val serverIdInt = legacyId.toIntOrNull()
+                if (serverIdInt != null && serverIdInt > 0) {
+                    loadServerSong(serverIdInt)
+                } else {
+                    loadLocalSong(legacyId)
+                }
+            }
+        } else {
+            showErrorAndReturn("ID lagu tidak ditemukan")
+        }
+    }
 
+    private fun loadLocalSong(songId: String) {
+        val current = nowPlayingViewModel.currSong.value
+        if (current?.id != songId) {
+            nowPlayingViewModel.fetchSongByUUID(songId, requireContext())
+        }
+    }
+
+    private fun loadServerSong(serverId: Int) {
+        val current = nowPlayingViewModel.currSong.value
+        val expectedId = "srv-$serverId"
+        if (current?.id != expectedId) {
+            nowPlayingViewModel.fetchSongById(serverId, requireContext())
+        }
+    }
+
+    private fun extractServerIdFromSongId(songId: String): Int? {
+        return if (songId.startsWith("srv-")) {
+            songId.removePrefix("srv-").toIntOrNull()
+        } else {
+            null
+        }
+    }
+
+    private fun showErrorAndReturn(message: String) {
+        Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()
+        findNavController().popBackStack()
+    }
+
+    private fun setupObservers() {
         nowPlayingViewModel.currSong.observe(viewLifecycleOwner) { song ->
             song?.let {
                 binding.tvTitle.text = it.title
                 binding.tvTitle.isSelected = true
                 binding.tvArtist.text = it.artist
                 Glide.with(this)
-                    .load(song.coverPath ?: song.coverResId ?: R.drawable.album_default)
+                    .load(it.coverPath ?: it.coverResId ?: R.drawable.album_default)
                     .into(binding.ivCover)
-                binding.tvDuration.text = formatDuration(it.duration)
-                binding.seekBar.max = it.duration
+                // Set icon like berdasarkan properti lagu
+                binding.btnFavorite.setImageResource(
+                    if (it.isLiked) R.drawable.ic_heart_filled else R.drawable.ic_heart_outline
+                )
+            }
+        }
+
+        nowPlayingViewModel.songDuration.observe(viewLifecycleOwner) { duration ->
+            if (duration > 0) {
+                binding.seekBar.max = duration
+                binding.tvDuration.text = nowPlayingViewModel.formatDurationMs(duration)
             }
         }
 
+        nowPlayingViewModel.currentPosition.observe(viewLifecycleOwner) { position ->
+            if (!isDragging) {
+                binding.seekBar.progress = position
+                binding.tvCurrentTime.text = nowPlayingViewModel.formatDurationMs(position)
+            }
+        }
+
+        nowPlayingViewModel.isPlaying.observe(viewLifecycleOwner) {
         nowPlayingViewModel.isPlaying.observe(viewLifecycleOwner) { isPlaying ->
             binding.btnPlayPause.setImageResource(
+                if (it) R.drawable.ic_pause_btn else R.drawable.ic_play_btn
                 if (isPlaying) R.drawable.ic_pause_btn
                 else R.drawable.ic_play_btn
             )
         }
 
+        nowPlayingViewModel.isShuffling.observe(viewLifecycleOwner) {
+            val color = if (it) R.color.green else android.R.color.white
         nowPlayingViewModel.isShuffling.observe(viewLifecycleOwner) { isShuffling ->
             val color = if (isShuffling) R.color.green else android.R.color.white
             binding.btnShuffle.setColorFilter(resources.getColor(color, null))
         }
 
         nowPlayingViewModel.repeatMode.observe(viewLifecycleOwner) { mode ->
-            val resId = when (mode) {
-                NowPlayingViewModel.RepeatMode.NONE -> R.drawable.ic_repeat
-                NowPlayingViewModel.RepeatMode.ALL -> R.drawable.ic_repeat
-                NowPlayingViewModel.RepeatMode.ONE -> R.drawable.ic_repeat_one
-                null -> R.drawable.ic_repeat
-            }
-            val color = when (mode) {
-                NowPlayingViewModel.RepeatMode.NONE, null -> android.R.color.white
-                NowPlayingViewModel.RepeatMode.ALL, NowPlayingViewModel.RepeatMode.ONE -> R.color.green
-            }
+            binding.btnRepeat.setImageResource(
+                when (mode) {
+                    NowPlayingViewModel.RepeatMode.ONE -> R.drawable.ic_repeat_one
+                    else -> R.drawable.ic_repeat
+                }
+            )
+            binding.btnRepeat.setColorFilter(resources.getColor(
+                if (mode == NowPlayingViewModel.RepeatMode.NONE) android.R.color.white else R.color.green,
+                null
+            ))
+        }
+
+        nowPlayingViewModel.isLiked.observe(viewLifecycleOwner) { isLiked ->
+            binding.btnFavorite.setImageResource(
+                if (isLiked) R.drawable.ic_heart_filled else R.drawable.ic_heart_outline
+            )
+        }
+    }
+        nowPlayingViewModel.isLiked.observe(viewLifecycleOwner) { isLiked ->
+            binding.btnFavorite.setImageResource(
+                if (isLiked) R.drawable.ic_heart_filled
+                else R.drawable.ic_heart_outline
+            )
+        }
 
-            binding.btnRepeat.setImageResource(resId)
-            binding.btnRepeat.setColorFilter(resources.getColor(color, null))
+        // NEW: Audio device observers
+        audioRoutingViewModel.activeDevice.observe(viewLifecycleOwner) { device ->
+            device?.let {
+                updateAudioDeviceIndicator(it.type, it.name)
+            }
         }
 
+        audioRoutingViewModel.connectionError.observe(viewLifecycleOwner) { error ->
+            error?.let {
+                Toast.makeText(requireContext(), it, Toast.LENGTH_LONG).show()
+                audioRoutingViewModel.clearError()
+            }
+        }
+
+        // CRITICAL: Setup MediaPlayer restart callback
+        audioRoutingViewModel.onMediaPlayerRestartNeeded = { context, device ->
+            Log.d("SongDetailFragment", "🔄 Restarting MediaPlayer for: ${device.name}")
+            nowPlayingViewModel.restartMediaPlayerForAudioRouting(context)
+        }
+    }
+
+    private fun setupClickListeners() {
+        // Existing click listeners
         binding.btnPlayPause.setOnClickListener {
             nowPlayingViewModel.togglePlayPause()
         }
 
+    private fun setupClickListeners() {
+        binding.btnPlayPause.setOnClickListener { nowPlayingViewModel.togglePlayPause() }
+        binding.btnBack.setOnClickListener { findNavController().popBackStack() }
+        binding.btnNext.setOnClickListener { nowPlayingViewModel.nextSong(requireContext()) }
+        binding.btnPrev.setOnClickListener { nowPlayingViewModel.previousSong(requireContext()) }
         binding.btnBack.setOnClickListener {
             requireActivity().onBackPressedDispatcher.onBackPressed()
         }
 
+        binding.btnNext.setOnClickListener {
+            nowPlayingViewModel.nextSong(requireContext())
+        }
+
+        binding.btnPrev.setOnClickListener {
+            nowPlayingViewModel.previousSong(requireContext())
+        }
+
+        binding.btnFavorite.setOnClickListener {
+            nowPlayingViewModel.currSong.value?.let {
+                nowPlayingViewModel.toggleLike(it)
+            }
+        }
+
+        binding.btnShuffle.setOnClickListener {
+            nowPlayingViewModel.toggleShuffle()
+            Toast.makeText(
+                requireContext(),
+                "Shuffle ${if (nowPlayingViewModel.isShuffling.value == true) "ON" else "OFF"}",
+                Toast.LENGTH_SHORT
+            ).show()
+        }
+
+        binding.btnRepeat.setOnClickListener {
+            nowPlayingViewModel.toggleRepeat()
+            Toast.makeText(
+                requireContext(),
+                "Repeat mode: ${nowPlayingViewModel.repeatMode.value}",
+                Toast.LENGTH_SHORT
+            ).show()
+        }
+
+        // NEW: Audio device selection button
+        binding.btnAudioDevice.setOnClickListener {
+            showAudioDeviceBottomSheet()
+        }
+
+        binding.btnOptions.setOnClickListener {
+            showOptionsMenu(it)
+        }
+
+        // Seek bar listener
         binding.seekBar.setOnSeekBarChangeListener(object : android.widget.SeekBar.OnSeekBarChangeListener {
             override fun onProgressChanged(seekBar: android.widget.SeekBar?, progress: Int, fromUser: Boolean) {
                 if (fromUser) {
-                    binding.tvCurrentTime.text = formatDuration(progress)
+                    binding.tvCurrentTime.text = nowPlayingViewModel.formatDurationMs(progress)
                 }
             }
 
@@ -116,26 +312,16 @@
             override fun onStopTrackingTouch(seekBar: android.widget.SeekBar?) {
                 isDragging = false
                 seekBar?.progress?.let {
-                    PlayerController.seekTo(it)
+                    nowPlayingViewModel.seekTo(it)
                 }
             }
         })
-
-        // Observe the liked state
-        nowPlayingViewModel.isLiked.observe(viewLifecycleOwner) { isLiked ->
-            if (isLiked) {
-                binding.btnFavorite.setImageResource(R.drawable.ic_heart_filled)
-            } else {
-                binding.btnFavorite.setImageResource(R.drawable.ic_heart_outline)
-            }
-        }
+    }
 
-        binding.btnFavorite.setOnClickListener {
-            val currentSong = nowPlayingViewModel.currSong.value
-            currentSong?.let { song ->
-                nowPlayingViewModel.toggleLike(song)
-            }
-        }
+    private fun showAudioDeviceBottomSheet() {
+        val bottomSheet = AudioDeviceBottomSheet.newInstance()
+        bottomSheet.show(parentFragmentManager, AudioDeviceBottomSheet.TAG)
+    }
 
         binding.btnShuffle.setOnClickListener {
             nowPlayingViewModel.toggleShuffle()
@@ -147,18 +333,96 @@
             Toast.makeText(requireContext(), "Repeat mode: ${nowPlayingViewModel.repeatMode.value}", Toast.LENGTH_SHORT).show()
         }
 
-        binding.btnNext.setOnClickListener {
-            nowPlayingViewModel.nextSong(requireContext())
-        }
+        binding.btnOptions.setOnClickListener {
+            val popup = PopupMenu(requireContext(), it)
+            popup.menuInflater.inflate(R.menu.song_options_menu, popup.menu)
+            popup.setOnMenuItemClickListener { item ->
+                when (item.itemId) {
+                    R.id.menu_share -> {
+                        nowPlayingViewModel.currSong.value?.let { song ->
+                            if (!song.isLocal) {
+                                val serverId = song.id.removePrefix("srv-").toIntOrNull()
+                                if (serverId != null) {
+                                    val intent = Intent(Intent.ACTION_SEND).apply {
+                                        type = "text/plain"
+                                        putExtra(Intent.EXTRA_TEXT, "purrytify://song/$serverId")
+                                    }
+                                    startActivity(Intent.createChooser(intent, "Share via"))
+                                } else {
+                                    Toast.makeText(requireContext(), "ID server tidak valid", Toast.LENGTH_SHORT).show()
+                                }
+                            } else {
+                                Toast.makeText(requireContext(), "Lagu lokal tidak dapat dibagikan", Toast.LENGTH_SHORT).show()
+                            }
+                        }
+                        true
+                    }
 
-        binding.btnPrev.setOnClickListener {
-            nowPlayingViewModel.previousSong(requireContext())
-        }
+                    R.id.menu_share_qr -> {
+                        nowPlayingViewModel.currSong.value?.let { song ->
+                            if (!song.isLocal) {
+                                val serverId = song.id.removePrefix("srv-").toIntOrNull()
+                                if (serverId != null) {
+                                    previewAndShareQrCode(requireContext(), serverId, song.title, song.artist)
+                                } else {
+                                    Toast.makeText(requireContext(), "ID server tidak valid", Toast.LENGTH_SHORT).show()
+                                }
+                            } else {
+                                Toast.makeText(requireContext(), "Lagu lokal tidak dapat dibagikan", Toast.LENGTH_SHORT).show()
+                            }
+                        }
+                        true
+                    }
+
+                    else -> false
+                }
+            }
+            popup.show()
+        }
+    private fun showOptionsMenu(view: View) {
+        val popup = PopupMenu(requireContext(), view)
+        popup.menuInflater.inflate(R.menu.song_options_menu, popup.menu)
+        popup.setOnMenuItemClickListener { item ->
+            when (item.itemId) {
+                R.id.menu_share -> {
+                    nowPlayingViewModel.currSong.value?.let { song ->
+                        if (!song.isLocal) {
+                            val intent = Intent(Intent.ACTION_SEND).apply {
+                                type = "text/plain"
+                                putExtra(Intent.EXTRA_TEXT, "purrytify://song/${song.id}")
+                            }
+                            startActivity(Intent.createChooser(intent, "Share via"))
+                        } else {
+                            Toast.makeText(requireContext(), "Lagu lokal tidak dapat dibagikan", Toast.LENGTH_SHORT).show()
+                        }
+                    }
+                    true
+                }
+                else -> false
+            }
+        }
+        popup.show()
+    }
+
+    private fun updateAudioDeviceIndicator(deviceType: AudioDeviceType, deviceName: String) {
+        val iconRes = when (deviceType) {
+            AudioDeviceType.INTERNAL_SPEAKER -> R.drawable.ic_phone_speaker
+            AudioDeviceType.WIRED_HEADPHONES -> R.drawable.ic_headphones_wired
+            AudioDeviceType.BLUETOOTH_HEADPHONES -> R.drawable.ic_headphones_bluetooth
+            AudioDeviceType.BLUETOOTH_SPEAKER -> R.drawable.ic_speaker_bluetooth
+            AudioDeviceType.USB_AUDIO -> R.drawable.ic_usb_audio
+            AudioDeviceType.UNKNOWN -> R.drawable.ic_audio_device_unknown
+        }
+
+        binding.btnAudioDevice.setImageResource(iconRes)
+        binding.btnAudioDevice.contentDescription = "Audio output: $deviceName"
     }
 
     override fun onResume() {
         super.onResume()
         handler.post(updateSeekRunnable)
+        // Refresh audio devices when fragment becomes visible
+        audioRoutingViewModel.refreshDevices()
     }
 
     override fun onPause() {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AndroidLayouts\">\r\n    <shared>\r\n      <config />\r\n    </shared>\r\n    <layouts>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/activity_login.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_add_song_bottom_sheet.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_library.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_mini_player.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_profile.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_song_detail.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/item_song_card.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/item_song_list.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/menu/bottom_nav_menu.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/navigation/mobile_navigation.xml\">\r\n        <config>\r\n          <theme>@style/Theme.Purrytify</theme>\r\n        </config>\r\n      </layout>\r\n    </layouts>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"fb2d9b52-b320-4578-a27c-b77d399ccfa2\" name=\"Changes\" comment=\"fix: update style\">\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/LikedSongDao.kt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/UserProfileDao.kt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/LikedSong.kt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModelFactory.kt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/SeedingUtils.kt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/TokenUtils.kt\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/res/drawable/ic_heart_filled.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/res/raw/monokrom_audio.mp3\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/res/raw/monokrom_cover.jpg\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/res/raw/tak_ingin_pisah_lagi_audio.mp3\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/app/src/main/res/raw/tak_ingin_pisah_lagi_cover.png\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/AndroidManifest.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/AndroidManifest.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/MainActivity.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/MainActivity.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/ProfileData.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/ProfileData.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/AuthRepository.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/AuthRepository.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/ProfileRepository.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/ProfileRepository.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/SongRepository.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/SongRepository.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/auth/LoginActivity.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/auth/LoginActivity.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/detail/SongDetailFragment.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/detail/SongDetailFragment.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/home/HomeFragment.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/home/HomeFragment.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/LibraryFragment.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/LibraryFragment.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongListAdapter.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongListAdapter.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongViewModel.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongViewModel.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongViewModelFactory.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongViewModelFactory.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/MiniPlayerFragment.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/MiniPlayerFragment.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/PlayerController.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/PlayerController.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileFragment.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileFragment.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModel.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModel.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModelFactory.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModelFactory.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/SessionManager.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/SessionManager.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/res/layout/fragment_mini_player.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/res/layout/fragment_mini_player.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/res/layout/fragment_song_detail.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/res/layout/fragment_song_detail.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/res/values/strings.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/res/values/strings.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[DeviceId(pluginId=LocalEmulator, isTemplate=false, identifier=path=C:\\Users\\HP\\.android\\avd\\Medium_Phone_2.avd)]\" />\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Purrityfy\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Kotlin File\" />\r\n        <option value=\"Kotlin Data Class\" />\r\n        <option value=\"layoutResourceFile\" />\r\n        <option value=\"resourceFile\" />\r\n        <option value=\"Kotlin File\" />\r\n        <option value=\"Kotlin Data Class\" />\r\n        <option value=\"layoutResourceFile\" />\r\n        <option value=\"Kotlin Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;HenryofSkalitz1202&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Labpro-21/if3210-tubes-mad-2025-if3210-2025-mad-dhs.git&quot;,\r\n    &quot;accountId&quot;: &quot;7fc37d1c-ed82-4f3d-8fd0-e1abf17a0517&quot;\r\n  }\r\n}</component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$USER_HOME$/AppData/Local/Google/AndroidStudio2024.3/device-explorer/Medium Phone API 36/_/data/data/com.tubes.purry/shared_prefs/purrytify_encrypted_prefs.xml\" root0=\"SKIP_INSPECTION\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2vNqtWwPO7ZxkVWBE38kZUIankk\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Android App.app.executor\": \"Run\",\r\n    \"PROJECT_TRUSTED_KEY\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.cidr.known.project.marker\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"RunOnceActivity.readMode.enableVisualFormatting\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"cf.first.check.clang-format\": \"false\",\r\n    \"cidr.known.project.marker\": \"true\",\r\n    \"com.google.services.firebase.aqiPopupShown\": \"true\",\r\n    \"git-widget-placeholder\": \"Merging feat/library-and-playerxml\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"D:/College/Semester 6/Mobile/Tubes1/if3210-tubes-mad-2025-if3210-2025-mad-dhs/app/src/main/java/com/tubes/purry/data/model/Song.kt\",\r\n    \"run.code.analysis.last.selected.profile\": \"pProject Default\",\r\n    \"settings.build.tools.auto.reload\": \"ALL\",\r\n    \"settings.editor.selected.configurable\": \"reference.settingsdialog.project.gradle\",\r\n    \"two.files.diff.last.used.file\": \"D:/College/Semester 6/Mobile/Tubes1/if3210-tubes-mad-2025-if3210-2025-mad-dhs/app/src/main/java/com/tubes/purry/data/model/Song.kt\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\edarr\\Downloads\\if3210-tubes-mad-2025-if3210-2025-mad-dhs\\app\\src\\main\\res\\drawable\" />\r\n    </key>\r\n    <key name=\"android.template.854076717\">\r\n      <recent name=\"com.tubes.purry\" />\r\n    </key>\r\n    <key name=\"MoveKotlinTopLevelDeclarationsDialog.RECENTS_KEY\">\r\n      <recent name=\"com.tubes.purry.ui.detail\" />\r\n      <recent name=\"com.tubes.purry.ui\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\" activateToolWindowBeforeRun=\"false\">\r\n      <module name=\"Purrityfy.app\" />\r\n      <option name=\"ANDROID_RUN_CONFIGURATION_SCHEMA_VERSION\" value=\"1\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"ALLOW_ASSUME_VERIFIED\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"RESTORE_ENABLED\" value=\"false\" />\r\n      <option name=\"RESTORE_FILE\" value=\"\" />\r\n      <option name=\"RESTORE_FRESH_INSTALL_ONLY\" value=\"false\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Hybrid>\r\n      <Java>\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Java>\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"fb2d9b52-b320-4578-a27c-b77d399ccfa2\" name=\"Changes\" comment=\"\" />\r\n      <created>1743996095375</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1743996095375</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"fix: resolve media player bug, integrate mini player with homepage, and display cover image&#10;&#10;- Fixed media player playback issues and improved handling of play/pause logic&#10;- Integrated MiniPlayerFragment to show when a song is clicked from the home page&#10;- Added image cover loading for mini player using Glide with fallback and error handling\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744039123686</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744039123686</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"fix: resolve image loading bug by removing dependency on third party link for image url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744137793402</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744137793402</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"fix: resolve image loading bug by removing dependency on third party link for image url\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744366362051</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744366362051</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"fix: direct login while token invalid\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744370621765</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744346785132</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"feat: added Song Detail and integrated to mini player&#10;chore: add verbose printing for future debugging&#10;fix: spacing for mini player from navbar\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744346798831</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744417118324</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"migrate feat/integrate-player to feat/library\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744429832969</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744429832969</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"fix: add to queue songs removed after play or next\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744459994598</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744459994598</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"fix: shuffle condition while repeat all\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744460388707</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744460388707</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"refactor: unused crud song fragments\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744461500132</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744461500132</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"refactor: unused crud song fragments and fix: update layout\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744463319315</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744463319315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"fix: styling\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744463977402</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744463977402</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"refactor: unneeded files and styling\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1744468467246</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1744468467246</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"13\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"fix: resolve media player bug, integrate mini player with homepage, and display cover image&#10;&#10;- Fixed media player playback issues and improved handling of play/pause logic&#10;- Integrated MiniPlayerFragment to show when a song is clicked from the home page&#10;- Added image cover loading for mini player using Glide with fallback and error handling\" />\r\n    <MESSAGE value=\"fix: resolve image loading bug by removing dependency on third party link for image url\" />\r\n    <MESSAGE value=\"feat: profile stats\" />\r\n    <MESSAGE value=\"feat: edit and delete songs\" />\r\n    <MESSAGE value=\"fix: direct login while token invalid\" />\r\n    <MESSAGE value=\"fix: role/control to edit and delete songs\" />\r\n    <MESSAGE value=\"migrate feat/search to feat/library-and-playerxml\" />\r\n    <MESSAGE value=\"fix: resolve media player pcmWrite bug because of duplicate declaration in activity_main.xml\" />\r\n    <MESSAGE value=\"feat: added Song Detail and integrated to mini player&#10;chore: add verbose printing for future debugging&#10;fix: spacing for mini player from navbar\" />\r\n    <MESSAGE value=\"fix: fixed bug on play pause button, fixed bug on duration seeding to ms instead of seconds\" />\r\n    <MESSAGE value=\"merge feat/profile\" />\r\n    <MESSAGE value=\"migrate feat/integrate-player to feat/library\" />\r\n    <MESSAGE value=\"feat: next, prev, add to queue\" />\r\n    <MESSAGE value=\"fix: add to queue songs removed after play or next\" />\r\n    <MESSAGE value=\"fix: shuffle condition while repeat all\" />\r\n    <MESSAGE value=\"refactor: unused crud song fragments\" />\r\n    <MESSAGE value=\"refactor: unused crud song fragments and fix: update layout\" />\r\n    <MESSAGE value=\"fix: styling\" />\r\n    <MESSAGE value=\"refactor: unneeded files and styling\" />\r\n    <MESSAGE value=\"fix: update style\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fix: update style\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"kotlin-function\">\r\n          <url>file://$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt</url>\r\n          <line>8</line>\r\n          <properties class=\"com.tubes.purry.ui.player.NowPlayingViewModel\">\r\n            <option name=\"EMULATED\" value=\"true\" />\r\n            <option name=\"WATCH_EXIT\" value=\"false\" />\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"kotlin-line\">\r\n          <url>file://$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt</url>\r\n          <line>78</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"play_dynamic_filters_status\">\r\n    <option name=\"appIdToCheckInfo\">\r\n      <map>\r\n        <entry key=\"com.tubes.purry\">\r\n          <value>\r\n            <CheckInfo lastCheckTimestamp=\"1744472887622\" />\r\n          </value>\r\n        </entry>\r\n        <entry key=\"com.tubes.purry.test\">\r\n          <value>\r\n            <CheckInfo lastCheckTimestamp=\"1744472887702\" />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/.idea/workspace.xml	(date 1748195648325)
@@ -5,6 +5,101 @@
       <config />
     </shared>
     <layouts>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_edit_profile.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_login.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_main.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_maps.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_month_detail.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_recommendation_detail.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_sound_capsule.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_time_listened_detail.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_top_artists.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/activity_top_songs.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/fragment_add_song_bottom_sheet.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/fragment_home.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/fragment_profile.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/fragment_song_detail.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout-land/fragment_top_chart_detail.xml">
+        <config>
+          <state>Landscape</state>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_edit_profile.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
       <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_login.xml">
         <config>
           <theme>@style/Theme.Purrytify</theme>
@@ -15,6 +110,46 @@
           <theme>@style/Theme.Purrytify</theme>
         </config>
       </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_maps.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_month_detail.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_recommendation_detail.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_sound_capsule.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_time_listened_detail.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_top_artists.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_top_songs.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/bottom_sheet_audio_device.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
       <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/fragment_add_song_bottom_sheet.xml">
         <config>
           <theme>@style/Theme.Purrytify</theme>
@@ -41,6 +176,31 @@
         </config>
       </layout>
       <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/fragment_song_detail.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/fragment_top_chart_detail.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/fragment_trending_songs.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/item_audio_device.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/item_chart_card.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/item_recommendation.xml">
         <config>
           <theme>@style/Theme.Purrytify</theme>
         </config>
@@ -51,6 +211,21 @@
         </config>
       </layout>
       <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/item_song_list.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/item_sound_capsule_month.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/item_top_artist.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/item_top_song.xml">
         <config>
           <theme>@style/Theme.Purrytify</theme>
         </config>
@@ -60,6 +235,11 @@
           <theme>@style/Theme.Purrytify</theme>
         </config>
       </layout>
+      <layout url="file://$PROJECT_DIR$/app/src/main/res/menu/song_options_menu.xml">
+        <config>
+          <theme>@style/Theme.Purrytify</theme>
+        </config>
+      </layout>
       <layout url="file://$PROJECT_DIR$/app/src/main/res/navigation/mobile_navigation.xml">
         <config>
           <theme>@style/Theme.Purrytify</theme>
@@ -71,43 +251,173 @@
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="fb2d9b52-b320-4578-a27c-b77d399ccfa2" name="Changes" comment="fix: update style">
-      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/LikedSongDao.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/UserProfileDao.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/LikedSong.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModelFactory.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/SeedingUtils.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/TokenUtils.kt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_heart_filled.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/res/raw/monokrom_audio.mp3" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/res/raw/monokrom_cover.jpg" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/res/raw/tak_ingin_pisah_lagi_audio.mp3" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/app/src/main/res/raw/tak_ingin_pisah_lagi_cover.png" afterDir="false" />
+    <list default="true" id="fb2d9b52-b320-4578-a27c-b77d399ccfa2" name="Changes" comment="fix: recommendation-song">
+      <change afterPath="$PROJECT_DIR$/.idea/deviceManager.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20_05_25_11_30_[Changes]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_20_05_25_11_30__Changes_.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_25_08_04_[Changes]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_25_08_04_[Changes]1/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_25_08_04__Changes_.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_25_09_26_[Changes]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_25_09_26__Changes_.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_25_09_37_[Changes]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_25_09_37__Changes_.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app.db" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/google-services.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/AnalyticsDao.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/AudioDevice.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/Analytics.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/ChartItem.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/OnlineSong.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/ProfileUpdateRequest.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/RawSong.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/RecommendationItem.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/AnalyticsRepository.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/ChartRepository.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/analytics/AnalyticsAdapter.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/analytics/AnalyticsExportService.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/analytics/MonthDetailActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/analytics/SoundCapsuleActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/analytics/SoundCapsuleViewModel.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/analytics/TimeListenedDetailActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/analytics/TopArtistsActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/analytics/TopSongsActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/chart/ChartAdapter.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/chart/ChartViewModel.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/chart/ChartViewModelFactory.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/chart/OnlineSongListAdapter.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/chart/TopChartDetailFragment.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/home/RecommendationAdapter.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/AudioDeviceAdapter.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/AudioDeviceBottomSheet.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/AudioRoutingViewModel.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingManager.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/EditProfileActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/MapsActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/qr/ScanQRActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/recommendation/RecommendationDetailActivity.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/recommendation/RecommendationSongAdapter.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/AudioRoutingManager.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/DownloadUtils.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/FileUtil.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/MusicNotificationReceiver.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/MusicNotificationService.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/PermissionManager.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/SongUtils.kt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/bg_circle_gray.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/bg_circle_green.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/bottom_sheet_background.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/circle_button_background.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/cov_daily_mix_1.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/cov_discover_weekly.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/cov_liked_mix.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/cov_on_repeat.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/cov_playlist_around.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/cov_playlist_global.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_analytics.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_back.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_right.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_audio_device_unknown.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_chart.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_check_circle.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_download.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_downloaded.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_export.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_headphones_bluetooth.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_headphones_wired.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_music_note.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_phone_speaker.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_qr_scan.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_share.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_speaker_bluetooth.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_usb_audio.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/rounded_corner_12dp.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/rounded_corner_background.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/top_50_country_cover.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/top_50_global_cover.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_edit_profile.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_login.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_main.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_maps.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_month_detail.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_recommendation_detail.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_sound_capsule.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_time_listened_detail.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_top_artists.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/activity_top_songs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/fragment_add_song_bottom_sheet.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/fragment_home.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/fragment_profile.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/fragment_song_detail.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout-land/fragment_top_chart_detail.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_edit_profile.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_maps.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_month_detail.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_recommendation_detail.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_sound_capsule.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_time_listened_detail.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_top_artists.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_top_songs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/bottom_sheet_audio_device.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/fragment_top_chart_detail.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/fragment_trending_songs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/item_audio_device.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/item_chart_card.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/item_recommendation.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/item_sound_capsule_month.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/item_top_artist.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/layout/item_top_song.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/menu/song_options_menu.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/app/src/main/res/xml/file_paths.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/assetWizardSettings.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/assetWizardSettings.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/caches/deviceStreaming.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/caches/deviceStreaming.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/deploymentTargetSelector.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/gradle.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/navEditor.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/navEditor.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/app/.gitignore" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/app/build.gradle.kts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/MainActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/MainActivity.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/PurrytifyApplication.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/PurrytifyApplication.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/ProfileData.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/ProfileData.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/AuthRepository.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/AuthRepository.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/LikedSongDao.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/LikedSongDao.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/SongDao.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/SongDao.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/UserProfileDao.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/UserProfileDao.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/Song.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/model/Song.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/remote/ApiService.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/remote/ApiService.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/ProfileRepository.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/ProfileRepository.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/SongRepository.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/repository/SongRepository.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/auth/LoginActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/auth/LoginActivity.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/detail/SongDetailFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/detail/SongDetailFragment.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/home/HomeFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/home/HomeFragment.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/AddSongBottomSheetFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/AddSongBottomSheetFragment.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/EditSongBottomSheetFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/EditSongBottomSheetFragment.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/LibraryFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/LibraryFragment.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongListAdapter.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongListAdapter.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongViewModel.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongViewModelFactory.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/library/SongViewModelFactory.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/MiniPlayerFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/MiniPlayerFragment.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModelFactory.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModelFactory.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/PlayerController.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/PlayerController.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileFragment.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModel.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModelFactory.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModelFactory.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/SessionManager.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/SessionManager.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/fragment_mini_player.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/fragment_mini_player.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/AudioMetadata.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/AudioMetadata.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/AudioUtil.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/AudioUtil.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/TokenExpirationService.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tubes/purry/utils/TokenExpirationService.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/fragment_profile.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/fragment_profile.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/fragment_song_detail.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/fragment_song_detail.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/item_song_card.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/item_song_card.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/item_song_list.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/item_song_list.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/navigation/mobile_navigation.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/navigation/mobile_navigation.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/values/colors.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/values/colors.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/res/values/strings.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/values/strings.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/gradle/libs.versions.toml" beforeDir="false" afterPath="$PROJECT_DIR$/gradle/libs.versions.toml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/settings.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/settings.gradle.kts" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -145,16 +455,28 @@
       <list>
         <option value="Kotlin File" />
         <option value="Kotlin Data Class" />
+        <option value="Kotlin File" />
+        <option value="Kotlin Data Class" />
         <option value="layoutResourceFile" />
-        <option value="resourceFile" />
+        <option value="Class" />
+        <option value="layoutResourceFile" />
+        <option value="Kotlin Data Class" />
         <option value="Kotlin File" />
-        <option value="Kotlin Data Class" />
+        <option value="Class" />
+        <option value="Kotlin Object" />
         <option value="layoutResourceFile" />
+        <option value="Kotlin Class" />
+        <option value="resourceFile" />
         <option value="Kotlin Class" />
       </list>
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="feat/analytics" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
@@ -162,13 +484,13 @@
     &quot;state&quot;: &quot;OPEN&quot;,
     &quot;assignee&quot;: &quot;HenryofSkalitz1202&quot;
   }
-}</component>
+}}</component>
   <component name="GithubPullRequestsUISettings">{
-  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;selectedUrlAndAccountId&quot;: {
     &quot;url&quot;: &quot;https://github.com/Labpro-21/if3210-tubes-mad-2025-if3210-2025-mad-dhs.git&quot;,
     &quot;accountId&quot;: &quot;7fc37d1c-ed82-4f3d-8fd0-e1abf17a0517&quot;
-  }
-}</component>
+    }
+    }</component>
   <component name="HighlightingSettingsPerFile">
     <setting file="file://$USER_HOME$/AppData/Local/Google/AndroidStudio2024.3/device-explorer/Medium Phone API 36/_/data/data/com.tubes.purry/shared_prefs/purrytify_encrypted_prefs.xml" root0="SKIP_INSPECTION" />
   </component>
@@ -195,10 +517,10 @@
     "cf.first.check.clang-format": "false",
     "cidr.known.project.marker": "true",
     "com.google.services.firebase.aqiPopupShown": "true",
-    "git-widget-placeholder": "Merging feat/library-and-playerxml",
+    "git-widget-placeholder": "Merging main",
     "ignore.virus.scanning.warn.message": "true",
     "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "D:/College/Semester 6/Mobile/Tubes1/if3210-tubes-mad-2025-if3210-2025-mad-dhs/app/src/main/java/com/tubes/purry/data/model/Song.kt",
+    "last_opened_file_path": "/Users/shazyataufik/Documents/ITB/Semester6/MADTubes2/app/src/main/res/layout-land",
     "run.code.analysis.last.selected.profile": "pProject Default",
     "settings.build.tools.auto.reload": "ALL",
     "settings.editor.selected.configurable": "reference.settingsdialog.project.gradle",
@@ -206,13 +528,26 @@
   }
 }]]></component>
   <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/app/src/main/res/layout-land" />
+      <recent name="$PROJECT_DIR$/app/src/main/res/layout" />
+      <recent name="$PROJECT_DIR$/app/src/main/res" />
+      <recent name="$PROJECT_DIR$/app/src/main/res/drawable" />
+      <recent name="D:\College\Semester 6\Mobile\Tugas Besar 1\app\src\main\res\layout-land" />
+      <recent name="D:\College\Semester 6\Mobile\Tugas Besar 1\app\src\main\res\drawable" />
+      <recent name="D:\College\Semester 6\Mobile\Tugas Besar 1\app" />
+    </key>
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/app/src/main/res/layout-land" />
+      <recent name="D:\College\Semester 6\Mobile\Tugas Besar 1\app\src\main\res\drawable" />
+      <recent name="D:\College\Semester 6\Mobile\Tugas Besar 1\app\src\main\java\com\tubes\purry\ui\chart" />
       <recent name="C:\Users\edarr\Downloads\if3210-tubes-mad-2025-if3210-2025-mad-dhs\app\src\main\res\drawable" />
     </key>
     <key name="android.template.854076717">
       <recent name="com.tubes.purry" />
     </key>
     <key name="MoveKotlinTopLevelDeclarationsDialog.RECENTS_KEY">
+      <recent name="com.tubes.purry.ui.chart" />
       <recent name="com.tubes.purry.ui.detail" />
       <recent name="com.tubes.purry.ui" />
     </key>
@@ -396,7 +731,111 @@
       <option name="project" value="LOCAL" />
       <updated>1744468467246</updated>
     </task>
-    <option name="localTasksCounter" value="13" />
+    <task id="LOCAL-00013" summary="feat: online song">
+      <option name="closed" value="true" />
+      <created>1748006998549</created>
+      <option name="number" value="00013" />
+      <option name="presentableId" value="LOCAL-00013" />
+      <option name="project" value="LOCAL" />
+      <updated>1748006998549</updated>
+    </task>
+    <task id="LOCAL-00014" summary="fix: online song player">
+      <option name="closed" value="true" />
+      <created>1748045709635</created>
+      <option name="number" value="00014" />
+      <option name="presentableId" value="LOCAL-00014" />
+      <option name="project" value="LOCAL" />
+      <updated>1748045709635</updated>
+    </task>
+    <task id="LOCAL-00015" summary="fix: online song player and feat: download songs">
+      <option name="closed" value="true" />
+      <created>1748059023787</created>
+      <option name="number" value="00015" />
+      <option name="presentableId" value="LOCAL-00015" />
+      <option name="project" value="LOCAL" />
+      <updated>1748059023787</updated>
+    </task>
+    <task id="LOCAL-00016" summary="fix: share via url">
+      <option name="closed" value="true" />
+      <created>1748124750555</created>
+      <option name="number" value="00016" />
+      <option name="presentableId" value="LOCAL-00016" />
+      <option name="project" value="LOCAL" />
+      <updated>1748124750555</updated>
+    </task>
+    <task id="LOCAL-00017" summary="feat: view notification">
+      <option name="closed" value="true" />
+      <created>1748148802841</created>
+      <option name="number" value="00017" />
+      <option name="presentableId" value="LOCAL-00017" />
+      <option name="project" value="LOCAL" />
+      <updated>1748148802841</updated>
+    </task>
+    <task id="LOCAL-00018" summary="fix: notification play, prev, and next">
+      <option name="closed" value="true" />
+      <created>1748159501827</created>
+      <option name="number" value="00018" />
+      <option name="presentableId" value="LOCAL-00018" />
+      <option name="project" value="LOCAL" />
+      <updated>1748159501827</updated>
+    </task>
+    <task id="LOCAL-00019" summary="fix: notification play, prev, and next">
+      <option name="closed" value="true" />
+      <created>1748164310312</created>
+      <option name="number" value="00019" />
+      <option name="presentableId" value="LOCAL-00019" />
+      <option name="project" value="LOCAL" />
+      <updated>1748164310312</updated>
+    </task>
+    <task id="LOCAL-00020" summary="feat: responsiveness">
+      <option name="closed" value="true" />
+      <created>1748174978237</created>
+      <option name="number" value="00020" />
+      <option name="presentableId" value="LOCAL-00020" />
+      <option name="project" value="LOCAL" />
+      <updated>1748174978237</updated>
+    </task>
+    <task id="LOCAL-00021" summary="fix: qr scanner">
+      <option name="closed" value="true" />
+      <created>1748182515629</created>
+      <option name="number" value="00021" />
+      <option name="presentableId" value="LOCAL-00021" />
+      <option name="project" value="LOCAL" />
+      <updated>1748182515630</updated>
+    </task>
+    <task id="LOCAL-00022" summary="fix: qr scanner">
+      <option name="closed" value="true" />
+      <created>1748184697113</created>
+      <option name="number" value="00022" />
+      <option name="presentableId" value="LOCAL-00022" />
+      <option name="project" value="LOCAL" />
+      <updated>1748184697113</updated>
+    </task>
+    <task id="LOCAL-00023" summary="fix: recommendation-song">
+      <option name="closed" value="true" />
+      <created>1748191313689</created>
+      <option name="number" value="00023" />
+      <option name="presentableId" value="LOCAL-00023" />
+      <option name="project" value="LOCAL" />
+      <updated>1748191313689</updated>
+    </task>
+    <task id="LOCAL-00024" summary="fix: recommendation algo for liked">
+      <option name="closed" value="true" />
+      <created>1748154015693</created>
+      <option name="number" value="00024" />
+      <option name="presentableId" value="LOCAL-00024" />
+      <option name="project" value="LOCAL" />
+      <updated>1748154015693</updated>
+    </task>
+    <task id="LOCAL-00025" summary="feat: audio routing">
+      <option name="closed" value="true" />
+      <created>1748164775271</created>
+      <option name="number" value="00025" />
+      <option name="presentableId" value="LOCAL-00025" />
+      <option name="project" value="LOCAL" />
+      <updated>1748164775271</updated>
+    </task>
+    <option name="localTasksCounter" value="24" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -411,15 +850,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="fix: resolve media player bug, integrate mini player with homepage, and display cover image&#10;&#10;- Fixed media player playback issues and improved handling of play/pause logic&#10;- Integrated MiniPlayerFragment to show when a song is clicked from the home page&#10;- Added image cover loading for mini player using Glide with fallback and error handling" />
-    <MESSAGE value="fix: resolve image loading bug by removing dependency on third party link for image url" />
-    <MESSAGE value="feat: profile stats" />
-    <MESSAGE value="feat: edit and delete songs" />
-    <MESSAGE value="fix: direct login while token invalid" />
-    <MESSAGE value="fix: role/control to edit and delete songs" />
-    <MESSAGE value="migrate feat/search to feat/library-and-playerxml" />
-    <MESSAGE value="fix: resolve media player pcmWrite bug because of duplicate declaration in activity_main.xml" />
-    <MESSAGE value="feat: added Song Detail and integrated to mini player&#10;chore: add verbose printing for future debugging&#10;fix: spacing for mini player from navbar" />
     <MESSAGE value="fix: fixed bug on play pause button, fixed bug on duration seeding to ms instead of seconds" />
     <MESSAGE value="merge feat/profile" />
     <MESSAGE value="migrate feat/integrate-player to feat/library" />
@@ -431,39 +861,41 @@
     <MESSAGE value="fix: styling" />
     <MESSAGE value="refactor: unneeded files and styling" />
     <MESSAGE value="fix: update style" />
-    <option name="LAST_COMMIT_MESSAGE" value="fix: update style" />
-  </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" type="kotlin-function">
-          <url>file://$PROJECT_DIR$/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt</url>
-          <line>8</line>
-          <properties class="com.tubes.purry.ui.player.NowPlayingViewModel">
-            <option name="EMULATED" value="true" />
-            <option name="WATCH_EXIT" value="false" />
-          </properties>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="kotlin-line">
-          <url>file://$PROJECT_DIR$/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt</url>
-          <line>78</line>
-          <option name="timeStamp" value="2" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
+    <MESSAGE value="feat: online song" />
+    <MESSAGE value="fix: online song player" />
+    <MESSAGE value="fix: online song player and feat: download songs" />
+    <MESSAGE value="feat: initialize firebase for sharing songs" />
+    <MESSAGE value="fix: playing local songa" />
+    <MESSAGE value="feat: minor design fix" />
+    <MESSAGE value="fix: liked songs bug" />
+    <MESSAGE value="feat: init analytics" />
+    <MESSAGE value="fix: share via url" />
+    <MESSAGE value="feat: view notification" />
+    <MESSAGE value="fix: notification play, prev, and next" />
+    <MESSAGE value="feat: responsiveness" />
+    <MESSAGE value="fix: qr scanner" />
+    <MESSAGE value="fix: recommendation-song" />
+    <MESSAGE value="feat: edit profile maps" />
+    <MESSAGE value="feat: export to pdf" />
+    <MESSAGE value="fix: chart by country" />
+    <MESSAGE value="fix: back buttons" />
+    <MESSAGE value="feat: responsive login" />
+    <MESSAGE value="feat: modified sound capsule and profile layouts" />
+    <MESSAGE value="fix: recommendation algo for liked" />
+    <MESSAGE value="feat: audio routing" />
+    <option name="LAST_COMMIT_MESSAGE" value="feat: audio routing" />
   </component>
   <component name="play_dynamic_filters_status">
     <option name="appIdToCheckInfo">
       <map>
         <entry key="com.tubes.purry">
           <value>
-            <CheckInfo lastCheckTimestamp="1744472887622" />
+            <CheckInfo lastCheckTimestamp="1748171306588" />
           </value>
         </entry>
         <entry key="com.tubes.purry.test">
           <value>
-            <CheckInfo lastCheckTimestamp="1744472887702" />
+            <CheckInfo lastCheckTimestamp="1748171306589" />
           </value>
         </entry>
       </map>
Index: app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModelFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.player\r\n\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.tubes.purry.data.local.LikedSongDao\r\nimport com.tubes.purry.data.local.SongDao\r\nimport com.tubes.purry.ui.profile.ProfileViewModel\r\n\r\nclass NowPlayingViewModelFactory(\r\n    private val likedSongDao: LikedSongDao,\r\n    private val songDao: SongDao,\r\n    private val profileViewModel: ProfileViewModel // add this as a parameter\r\n) : ViewModelProvider.Factory {\r\n    override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n        if (modelClass.isAssignableFrom(NowPlayingViewModel::class.java)) {\r\n            @Suppress(\"UNCHECKED_CAST\")\r\n            return NowPlayingViewModel(likedSongDao, songDao, profileViewModel) as T\r\n        }\r\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModelFactory.kt b/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModelFactory.kt
--- a/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModelFactory.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModelFactory.kt	(date 1748195617127)
@@ -1,5 +1,6 @@
 package com.tubes.purry.ui.player
 
+import android.app.Application
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.ViewModelProvider
 import com.tubes.purry.data.local.LikedSongDao
@@ -7,16 +8,17 @@
 import com.tubes.purry.ui.profile.ProfileViewModel
 
 class NowPlayingViewModelFactory(
+    private val application: Application,
     private val likedSongDao: LikedSongDao,
     private val songDao: SongDao,
-    private val profileViewModel: ProfileViewModel // add this as a parameter
-) : ViewModelProvider.Factory {
+    private val profileViewModel: ProfileViewModel
+) : ViewModelProvider.AndroidViewModelFactory(application) {
+
     override fun <T : ViewModel> create(modelClass: Class<T>): T {
         if (modelClass.isAssignableFrom(NowPlayingViewModel::class.java)) {
             @Suppress("UNCHECKED_CAST")
-            return NowPlayingViewModel(likedSongDao, songDao, profileViewModel) as T
+            return NowPlayingViewModel(application, likedSongDao, songDao, profileViewModel) as T
         }
         throw IllegalArgumentException("Unknown ViewModel class")
     }
 }
-
Index: app/src/main/java/com/tubes/purry/data/local/LikedSongDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.data.local\r\n\r\nimport com.tubes.purry.data.model.LikedSong\r\nimport androidx.room.Dao\r\nimport androidx.room.Insert\r\nimport androidx.room.OnConflictStrategy\r\nimport androidx.room.Query\r\nimport com.tubes.purry.data.model.Song\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\n@Dao\r\ninterface LikedSongDao {\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun likeSong(likedSong: LikedSong)\r\n\r\n    @Query(\"DELETE FROM liked_songs WHERE userId = :userId AND songId = :songId\")\r\n    suspend fun unlikeSong(userId: Int, songId: String)\r\n\r\n    @Query(\"\"\"SELECT * FROM songs WHERE id IN (SELECT songId FROM liked_songs WHERE userId = :userId)\"\"\")\r\n    fun getLikedSongsByUser(userId: Int): kotlinx.coroutines.flow.Flow<List<Song>>\r\n\r\n    @Query(\"SELECT EXISTS(SELECT 1 FROM liked_songs WHERE userId = :userId AND songId = :songId)\")\r\n    suspend fun isLiked(userId: Int, songId: String): Boolean\r\n\r\n    @Query(\"SELECT EXISTS(SELECT 1 FROM liked_songs WHERE userId = :userId AND songId = :songId)\")\r\n    suspend fun isSongLiked(userId: Int, songId: String): Boolean\r\n\r\n    @Query(\"SELECT COUNT(*) FROM liked_songs WHERE userId = :userId\")\r\n    fun getLikedCountByUser(userId: Int): Flow<Int>\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/data/local/LikedSongDao.kt b/app/src/main/java/com/tubes/purry/data/local/LikedSongDao.kt
--- a/app/src/main/java/com/tubes/purry/data/local/LikedSongDao.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/data/local/LikedSongDao.kt	(date 1748195617087)
@@ -1,5 +1,6 @@
 package com.tubes.purry.data.local
 
+import androidx.lifecycle.LiveData
 import com.tubes.purry.data.model.LikedSong
 import androidx.room.Dao
 import androidx.room.Insert
@@ -17,10 +18,7 @@
     suspend fun unlikeSong(userId: Int, songId: String)
 
     @Query("""SELECT * FROM songs WHERE id IN (SELECT songId FROM liked_songs WHERE userId = :userId)""")
-    fun getLikedSongsByUser(userId: Int): kotlinx.coroutines.flow.Flow<List<Song>>
-
-    @Query("SELECT EXISTS(SELECT 1 FROM liked_songs WHERE userId = :userId AND songId = :songId)")
-    suspend fun isLiked(userId: Int, songId: String): Boolean
+    fun getLikedSongsByUser(userId: Int): LiveData<List<Song>>
 
     @Query("SELECT EXISTS(SELECT 1 FROM liked_songs WHERE userId = :userId AND songId = :songId)")
     suspend fun isSongLiked(userId: Int, songId: String): Boolean
Index: app/src/main/java/com/tubes/purry/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry\r\n\r\nimport android.Manifest\r\nimport android.content.IntentFilter\r\nimport android.content.pm.PackageManager\r\nimport android.net.ConnectivityManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.ui.setupWithNavController\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\nimport com.tubes.purry.databinding.ActivityMainBinding\r\nimport com.tubes.purry.ui.profile.ProfileViewModel\r\nimport com.tubes.purry.ui.profile.ProfileViewModelFactory\r\nimport com.tubes.purry.ui.player.NowPlayingViewModel\r\nimport com.tubes.purry.utils.NetworkStateReceiver\r\nimport com.tubes.purry.utils.NetworkUtil\r\nimport com.tubes.purry.utils.TokenExpirationService\r\nimport com.tubes.purry.utils.seedAssets\r\n\r\nclass MainActivity : AppCompatActivity(), NetworkStateReceiver.NetworkStateListener {\r\n\r\n    private lateinit var binding: ActivityMainBinding\r\n    private val networkStateReceiver = NetworkStateReceiver()\r\n\r\n    private val permissionLauncher = registerForActivityResult(\r\n        ActivityResultContracts.RequestMultiplePermissions()\r\n    ) { permissions ->\r\n        val granted = permissions.values.all { it }\r\n        if (granted) {\r\n            seedAssets(this)\r\n        } else {\r\n            Toast.makeText(this, \"Permissions required to access media files.\", Toast.LENGTH_LONG).show()\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        // Setup bottom navigation\r\n        val navView: BottomNavigationView = binding.navView\r\n        val navController = supportFragmentManager.findFragmentById(R.id.nav_host_fragment)\r\n            ?.findNavController() ?: throw IllegalStateException(\"NavController not found\")\r\n        navView.setupWithNavController(navController)\r\n\r\n        // Add mini player fragment\r\n        if (savedInstanceState == null) {\r\n            supportFragmentManager.beginTransaction()\r\n                .replace(R.id.miniPlayerContainer, com.tubes.purry.ui.player.MiniPlayerFragment())\r\n                .commit()\r\n        }\r\n\r\n        // Observe destination changes to hide/show mini player\r\n        navController.addOnDestinationChangedListener { _, destination, _ ->\r\n            when (destination.id) {\r\n                R.id.songDetailFragment -> {\r\n                    hideMiniPlayer()\r\n                    hideBottomNav()\r\n                }\r\n                else -> {\r\n                    showMiniPlayer()\r\n                    showBottomNav()\r\n                }\r\n            }\r\n        }\r\n\r\n        // Start token expiration service\r\n        TokenExpirationService.startService(this)\r\n\r\n        // Setup network status monitoring\r\n        networkStateReceiver.addListener(this)\r\n        registerReceiver(networkStateReceiver, IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION))\r\n\r\n        // Observe network status changes\r\n        NetworkUtil.getNetworkStatus().observe(this) { isAvailable ->\r\n            if (isAvailable) {\r\n                hideNetworkErrorBanner()\r\n            } else {\r\n                showNetworkErrorBanner()\r\n            }\r\n        }\r\n\r\n        // Initial network check\r\n        if (!NetworkUtil.isNetworkAvailable(this)) {\r\n            showNetworkErrorBanner()\r\n        }\r\n\r\n        // Fetch user profile\r\n        val profileViewModel = ViewModelProvider(this, ProfileViewModelFactory(this))[ProfileViewModel::class.java]\r\n        profileViewModel.getProfileData()\r\n\r\n        // Trigger seeding\r\n        // checkPermissionsAndSeed()\r\n    }\r\n\r\n    private fun checkPermissionsAndSeed() {\r\n        val permissionsToRequest = mutableListOf<String>().apply {\r\n            if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.S_V2) {\r\n                add(Manifest.permission.READ_EXTERNAL_STORAGE)\r\n            }\r\n        }\r\n\r\n        if (permissionsToRequest.isEmpty() ||\r\n            permissionsToRequest.all { ContextCompat.checkSelfPermission(this, it) == PackageManager.PERMISSION_GRANTED }) {\r\n            seedAssets(this)\r\n        } else {\r\n            permissionLauncher.launch(permissionsToRequest.toTypedArray())\r\n        }\r\n    }\r\n\r\n    override fun onNetworkAvailable() = runOnUiThread { hideNetworkErrorBanner() }\r\n    override fun onNetworkUnavailable() = runOnUiThread { showNetworkErrorBanner() }\r\n\r\n    private fun showNetworkErrorBanner() {\r\n        binding.networkErrorBanner.visibility = View.VISIBLE\r\n    }\r\n\r\n    private fun hideNetworkErrorBanner() {\r\n        binding.networkErrorBanner.visibility = View.GONE\r\n    }\r\n\r\n    fun showMiniPlayer() {\r\n        binding.miniPlayerContainer.apply {\r\n            if (visibility != View.VISIBLE) {\r\n                alpha = 0f\r\n                visibility = View.VISIBLE\r\n                animate().alpha(1f).setDuration(250).start()\r\n            }\r\n        }\r\n    }\r\n\r\n    fun hideMiniPlayer() {\r\n        binding.miniPlayerContainer.visibility = View.GONE\r\n    }\r\n\r\n    fun hideBottomNav() {\r\n        binding.navView.visibility = View.GONE\r\n    }\r\n\r\n    fun showBottomNav() {\r\n        binding.navView.visibility = View.VISIBLE\r\n    }\r\n\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        registerReceiver(networkStateReceiver,\r\n            IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION))\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        unregisterReceiver(networkStateReceiver)\r\n        networkStateReceiver.removeListener(this)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/MainActivity.kt b/app/src/main/java/com/tubes/purry/MainActivity.kt
--- a/app/src/main/java/com/tubes/purry/MainActivity.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/MainActivity.kt	(date 1748195617081)
@@ -1,118 +1,245 @@
 package com.tubes.purry
 
-import android.Manifest
+import android.content.Intent
 import android.content.IntentFilter
-import android.content.pm.PackageManager
+import android.graphics.Typeface
 import android.net.ConnectivityManager
-import android.os.Build
+import android.net.Uri
 import android.os.Bundle
+import android.util.Log
 import android.view.View
 import android.widget.Toast
-import androidx.activity.result.contract.ActivityResultContracts
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.content.ContextCompat
+import androidx.core.os.bundleOf
 import androidx.lifecycle.ViewModelProvider
+import androidx.navigation.findNavController
 import androidx.navigation.fragment.findNavController
 import androidx.navigation.ui.setupWithNavController
 import com.google.android.material.bottomnavigation.BottomNavigationView
+import com.google.firebase.dynamiclinks.ktx.dynamicLinks
+import com.google.firebase.ktx.Firebase
+import com.tubes.purry.data.local.AppDatabase
 import com.tubes.purry.databinding.ActivityMainBinding
+import com.tubes.purry.ui.player.MiniPlayerFragment
+import com.tubes.purry.ui.player.NowPlayingViewModel
 import com.tubes.purry.ui.profile.ProfileViewModel
 import com.tubes.purry.ui.profile.ProfileViewModelFactory
-import com.tubes.purry.ui.player.NowPlayingViewModel
 import com.tubes.purry.utils.NetworkStateReceiver
 import com.tubes.purry.utils.NetworkUtil
 import com.tubes.purry.utils.TokenExpirationService
-import com.tubes.purry.utils.seedAssets
+import com.tubes.purry.ui.player.NowPlayingManager
+import com.tubes.purry.ui.qr.ScanQRActivity
+import com.tubes.purry.utils.PermissionManager
 
 class MainActivity : AppCompatActivity(), NetworkStateReceiver.NetworkStateListener {
 
     private lateinit var binding: ActivityMainBinding
     private val networkStateReceiver = NetworkStateReceiver()
-
-    private val permissionLauncher = registerForActivityResult(
-        ActivityResultContracts.RequestMultiplePermissions()
-    ) { permissions ->
-        val granted = permissions.values.all { it }
-        if (granted) {
-            seedAssets(this)
-        } else {
-            Toast.makeText(this, "Permissions required to access media files.", Toast.LENGTH_LONG).show()
-        }
-    }
+    private val permissionManager = PermissionManager()
+    private lateinit var nowPlayingViewModel: NowPlayingViewModel
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         binding = ActivityMainBinding.inflate(layoutInflater)
         setContentView(binding.root)
 
-        // Setup bottom navigation
-        val navView: BottomNavigationView = binding.navView
-        val navController = supportFragmentManager.findFragmentById(R.id.nav_host_fragment)
-            ?.findNavController() ?: throw IllegalStateException("NavController not found")
-        navView.setupWithNavController(navController)
+        nowPlayingViewModel = (application as PurrytifyApplication).nowPlayingViewModel
+        NowPlayingManager.setViewModel(nowPlayingViewModel)
 
-        // Add mini player fragment
-        if (savedInstanceState == null) {
-            supportFragmentManager.beginTransaction()
-                .replace(R.id.miniPlayerContainer, com.tubes.purry.ui.player.MiniPlayerFragment())
-                .commit()
+        binding.miniPlayerContainer.visibility = View.GONE
+        nowPlayingViewModel.currSong.observe(this) { song ->
+            Log.d("MainActivity", "currSong.observe: ${song?.title}")
+            if (song != null) {
+                showMiniPlayer()
+            } else {
+                hideMiniPlayer()
+            }
+        }
+
+        supportFragmentManager.beginTransaction()
+            .replace(R.id.miniPlayerContainer, MiniPlayerFragment())
+            .commit()
+
+        // Request necessary permissions
+        if (!permissionManager.checkBluetoothPermissions(this)) {
+            permissionManager.requestBluetoothPermissions(this)
+        }
+
+        if (!permissionManager.checkAudioPermissions(this)) {
+            permissionManager.requestAudioPermissions(this)
         }
 
         // Observe destination changes to hide/show mini player
+        val navView = findViewById<BottomNavigationView?>(R.id.navView)
+        val navController = supportFragmentManager.findFragmentById(R.id.nav_host_fragment)
+            ?.findNavController() ?: throw IllegalStateException("NavController not found")
+        navView?.setupWithNavController(navController)
+
         navController.addOnDestinationChangedListener { _, destination, _ ->
             when (destination.id) {
                 R.id.songDetailFragment -> {
                     hideMiniPlayer()
                     hideBottomNav()
+                    binding.btnScanQr?.hide()
                 }
                 else -> {
                     showMiniPlayer()
                     showBottomNav()
+                    binding.btnScanQr?.show()
                 }
             }
+
+            when (destination.id) {
+                R.id.navigation_home -> highlightMenu("home")
+                R.id.navigation_library -> highlightMenu("library")
+                R.id.navigation_profile -> highlightMenu("profile")
+                else -> resetMenuHighlight()
+            }
         }
 
-        // Start token expiration service
         TokenExpirationService.startService(this)
-
-        // Setup network status monitoring
         networkStateReceiver.addListener(this)
         registerReceiver(networkStateReceiver, IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION))
 
-        // Observe network status changes
         NetworkUtil.getNetworkStatus().observe(this) { isAvailable ->
-            if (isAvailable) {
-                hideNetworkErrorBanner()
+            if (isAvailable) hideNetworkErrorBanner() else showNetworkErrorBanner()
+        }
+
+        if (!NetworkUtil.isNetworkAvailable(this)) showNetworkErrorBanner()
+
+        Firebase.dynamicLinks
+            .getDynamicLink(intent)
+            .addOnSuccessListener { pendingDynamicLinkData ->
+                val deepLink: Uri? = pendingDynamicLinkData?.link
+                if (deepLink != null) {
+                    binding.root.post { handleDeepLink(deepLink) }
+                }
+            }
+            .addOnFailureListener {
+                // Optional: log error
+            }
+
+        handleIntentNavigation(intent)
+        binding.root.post { handleDeepLink(intent?.data) }
+    }
+
+        binding.menuHome?.setOnClickListener {
+            val navController = findNavController(R.id.nav_host_fragment)
+            if (navController.currentDestination?.id != R.id.navigation_home) {
+                navController.navigate(R.id.navigation_home)
+            }
+        }
+        binding.menuLibrary?.setOnClickListener {
+            val navController = findNavController(R.id.nav_host_fragment)
+            if (navController.currentDestination?.id != R.id.navigation_library) {
+                navController.navigate(R.id.navigation_library)
+            }
+        }
+        binding.menuProfile?.setOnClickListener {
+            val navController = findNavController(R.id.nav_host_fragment)
+            if (navController.currentDestination?.id != R.id.navigation_profile) {
+                navController.navigate(R.id.navigation_profile)
+            }
+        }
+        binding.btnScanQr?.setOnClickListener {
+            val intent = Intent(this, ScanQRActivity::class.java)
+            startActivity(intent)
+        }
+    // FIXED: Moved this method outside of onCreate()
+    override fun onRequestPermissionsResult(
+        requestCode: Int,
+        permissions: Array<out String>,
+        grantResults: IntArray
+    ) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
+
+        permissionManager.handlePermissionResult(
+            requestCode,
+            grantResults,
+            onBluetoothGranted = {
+                Toast.makeText(this, "Bluetooth permissions granted", Toast.LENGTH_SHORT).show()
+            },
+            onBluetoothDenied = {
+                Toast.makeText(this, "Bluetooth permissions required for external audio devices", Toast.LENGTH_LONG).show()
+            },
+            onAudioGranted = {
+                Toast.makeText(this, "Audio permissions granted", Toast.LENGTH_SHORT).show()
+            },
+            onAudioDenied = {
+                Toast.makeText(this, "Audio permissions required for output control", Toast.LENGTH_LONG).show()
+            }
+        )
+    }
+
+    override fun onNewIntent(intent: Intent?) {
+        super.onNewIntent(intent)
+        setIntent(intent)
+        handleDeepLink(intent?.data)
+    }
+
+    private fun highlightMenu(menu: String) {
+        val activeColor = ContextCompat.getColor(this, R.color.green)
+        val inactiveColor = ContextCompat.getColor(this, R.color.white_gray)
+
+        binding.menuHome?.setTextColor(if (menu == "home") activeColor else inactiveColor)
+        binding.menuLibrary?.setTextColor(if (menu == "library") activeColor else inactiveColor)
+        binding.menuProfile?.setTextColor(if (menu == "profile") activeColor else inactiveColor)
+
+        binding.menuHome?.setTypeface(null, if (menu == "home") Typeface.BOLD else Typeface.NORMAL)
+        binding.menuLibrary?.setTypeface(null, if (menu == "library") Typeface.BOLD else Typeface.NORMAL)
+        binding.menuProfile?.setTypeface(null, if (menu == "profile") Typeface.BOLD else Typeface.NORMAL)
+    }
+
+    private fun resetMenuHighlight() {
+        val color = ContextCompat.getColor(this, R.color.white_gray)
+        binding.menuHome?.setTextColor(color)
+        binding.menuLibrary?.setTextColor(color)
+        binding.menuProfile?.setTextColor(color)
+
+        binding.menuHome?.setTypeface(null, Typeface.NORMAL)
+        binding.menuLibrary?.setTypeface(null, Typeface.NORMAL)
+        binding.menuProfile?.setTypeface(null, Typeface.NORMAL)
+    }
+
+    private fun handleDeepLink(data: Uri?) {
+        if (data != null && data.scheme == "purrytify" && data.host == "song") {
+            val rawId = data.lastPathSegment
+            val songId = rawId?.toIntOrNull()
+
+            if (songId != null) {
+                val navController = findNavController(R.id.nav_host_fragment)
+                val bundle = Bundle().apply {
+                    putInt("songIdInt", songId)
+                }
+                val navOptions = androidx.navigation.NavOptions.Builder()
+                    .setLaunchSingleTop(true)
+                    .setPopUpTo(navController.graph.startDestinationId, false)
+                    .build()
+
+                navController.navigate(R.id.songDetailFragment, bundle, navOptions)
             } else {
-                showNetworkErrorBanner()
+                Log.e("DeepLink", "Invalid songId in deep link: $rawId")
+                Toast.makeText(this, "Link tidak valid", Toast.LENGTH_SHORT).show()
             }
         }
-
-        // Initial network check
-        if (!NetworkUtil.isNetworkAvailable(this)) {
-            showNetworkErrorBanner()
-        }
+    }
 
-        // Fetch user profile
-        val profileViewModel = ViewModelProvider(this, ProfileViewModelFactory(this))[ProfileViewModel::class.java]
-        profileViewModel.getProfileData()
-
-        // Trigger seeding
-        // checkPermissionsAndSeed()
-    }
-
-    private fun checkPermissionsAndSeed() {
-        val permissionsToRequest = mutableListOf<String>().apply {
-            if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.S_V2) {
-                add(Manifest.permission.READ_EXTERNAL_STORAGE)
-            }
-        }
-
-        if (permissionsToRequest.isEmpty() ||
-            permissionsToRequest.all { ContextCompat.checkSelfPermission(this, it) == PackageManager.PERMISSION_GRANTED }) {
-            seedAssets(this)
-        } else {
-            permissionLauncher.launch(permissionsToRequest.toTypedArray())
+    private fun handleIntentNavigation(intent: Intent?) {
+        intent?.getStringExtra("navigateTo")?.let { destination ->
+            if (destination == "detail") {
+                val songId = intent.getIntExtra("songId", -1)
+                if (songId != -1) {
+                    val navController = supportFragmentManager.findFragmentById(R.id.nav_host_fragment)
+                        ?.findNavController()
+                    if (navController?.currentDestination?.id != R.id.songDetailFragment) {
+                        val bundle = Bundle().apply {
+                            putString("songId", songId.toString())
+                        }
+                        navController?.navigate(R.id.songDetailFragment, bundle)
+                    }
+                }
+            }
         }
     }
 
@@ -127,7 +254,7 @@
         binding.networkErrorBanner.visibility = View.GONE
     }
 
-    fun showMiniPlayer() {
+    private fun showMiniPlayer() {
         binding.miniPlayerContainer.apply {
             if (visibility != View.VISIBLE) {
                 alpha = 0f
@@ -137,23 +264,24 @@
         }
     }
 
-    fun hideMiniPlayer() {
+    private fun hideMiniPlayer() {
         binding.miniPlayerContainer.visibility = View.GONE
     }
 
-    fun hideBottomNav() {
-        binding.navView.visibility = View.GONE
+    private fun hideBottomNav() {
+        binding.navView?.visibility = View.GONE
     }
 
-    fun showBottomNav() {
-        binding.navView.visibility = View.VISIBLE
+    private fun showBottomNav() {
+        binding.navView?.visibility = View.VISIBLE
     }
-
 
     override fun onStart() {
         super.onStart()
-        registerReceiver(networkStateReceiver,
-            IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION))
+        registerReceiver(
+            networkStateReceiver,
+            IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)
+        )
     }
 
     override fun onStop() {
@@ -161,4 +289,4 @@
         unregisterReceiver(networkStateReceiver)
         networkStateReceiver.removeListener(this)
     }
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/PurrytifyApplication.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry\r\n\r\nimport android.app.Application\r\nimport android.content.IntentFilter\r\nimport android.net.ConnectivityManager\r\nimport com.tubes.purry.data.remote.ApiClient\r\nimport com.tubes.purry.utils.NetworkStateReceiver\r\nimport com.tubes.purry.utils.NetworkUtil\r\n\r\nclass PurrytifyApplication : Application() {\r\n\r\n    private val networkStateReceiver = NetworkStateReceiver()\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        ApiClient.init(this)\r\n\r\n        // Start network callback for LiveData approach\r\n        NetworkUtil.startNetworkCallback(this)\r\n\r\n        // Register broadcast receiver approach\r\n        val filter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)\r\n        registerReceiver(networkStateReceiver, filter)\r\n    }\r\n\r\n    override fun onTerminate() {\r\n        super.onTerminate()\r\n        unregisterReceiver(networkStateReceiver)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/PurrytifyApplication.kt b/app/src/main/java/com/tubes/purry/PurrytifyApplication.kt
--- a/app/src/main/java/com/tubes/purry/PurrytifyApplication.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/PurrytifyApplication.kt	(date 1748195617082)
@@ -6,25 +6,55 @@
 import com.tubes.purry.data.remote.ApiClient
 import com.tubes.purry.utils.NetworkStateReceiver
 import com.tubes.purry.utils.NetworkUtil
+import com.tubes.purry.utils.SessionManager
 
 class PurrytifyApplication : Application() {
-
-    private val networkStateReceiver = NetworkStateReceiver()
+    lateinit var nowPlayingViewModel: com.tubes.purry.ui.player.NowPlayingViewModel
+    private val networkStateReceiver = com.tubes.purry.utils.NetworkStateReceiver()
 
     override fun onCreate() {
         super.onCreate()
-        ApiClient.init(this)
+        com.tubes.purry.data.remote.ApiClient.init(this)
+
+        val db = com.tubes.purry.data.local.AppDatabase.getDatabase(this)
+        val songDao = db.songDao()
+        val likedSongDao = db.LikedSongDao()
 
-        // Start network callback for LiveData approach
-        NetworkUtil.startNetworkCallback(this)
+        val sessionManager = com.tubes.purry.utils.SessionManager(this)
 
-        // Register broadcast receiver approach
-        val filter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)
-        registerReceiver(networkStateReceiver, filter)
+        val authRepository = com.tubes.purry.data.repository.AuthRepository(
+            com.tubes.purry.data.remote.ApiClient.apiService,
+            sessionManager
+        )
+
+        val songRepository = com.tubes.purry.data.repository.SongRepository(
+            songDao,
+            likedSongDao
+        )
+
+        val profileViewModel = com.tubes.purry.ui.profile.ProfileViewModel(
+            this,
+            songRepository,
+            authRepository
+        )
+
+        nowPlayingViewModel = com.tubes.purry.ui.player.NowPlayingViewModel(
+            this,
+            likedSongDao,
+            songDao,
+            profileViewModel
+        )
+
+        // Warning CONNECTIVITY_ACTION boleh diabaikan atau diganti ke API level 24+
+        com.tubes.purry.utils.NetworkUtil.startNetworkCallback(this)
+        registerReceiver(
+            networkStateReceiver,
+            IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)
+        )
     }
 
     override fun onTerminate() {
         super.onTerminate()
         unregisterReceiver(networkStateReceiver)
     }
-}
\ No newline at end of file
+}
Index: app/src/main/java/com/tubes/purry/ui/player/MiniPlayerFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.player\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\nimport com.tubes.purry.R\r\nimport com.tubes.purry.databinding.FragmentMiniPlayerBinding\r\nimport androidx.core.net.toUri\r\nimport androidx.lifecycle.lifecycleScope\r\nimport com.tubes.purry.data.local.AppDatabase\r\nimport com.tubes.purry.data.model.LikedSong\r\nimport com.tubes.purry.ui.profile.ProfileViewModel\r\nimport com.tubes.purry.ui.profile.ProfileViewModelFactory\r\nimport kotlinx.coroutines.launch\r\n\r\nclass MiniPlayerFragment : Fragment() {\r\n    private lateinit var viewModel: NowPlayingViewModel\r\n    private lateinit var binding: FragmentMiniPlayerBinding\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentMiniPlayerBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        val appContext = requireContext().applicationContext\r\n        val likedSongDao = AppDatabase.getDatabase(appContext).LikedSongDao()\r\n        val songDao = AppDatabase.getDatabase(appContext).songDao()\r\n\r\n        val profileViewModelFactory = ProfileViewModelFactory(requireContext())\r\n        val profileViewModel = ViewModelProvider(requireActivity(), profileViewModelFactory)[ProfileViewModel::class.java]\r\n\r\n        val factory = NowPlayingViewModelFactory(likedSongDao, songDao, profileViewModel)\r\n        viewModel = ViewModelProvider(requireActivity(), factory)[NowPlayingViewModel::class.java]\r\n\r\n        viewModel.currSong.observe(viewLifecycleOwner) { song ->\r\n            if (song != null) {\r\n                binding.textTitle.text = song.title\r\n                binding.textArtist.text = song.artist\r\n\r\n                when {\r\n                    song.coverResId != null -> {\r\n                        Glide.with(binding.root)\r\n                            .load(song.coverResId)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL)\r\n                            .into(binding.imageCover)\r\n                    }\r\n                    !song.coverPath.isNullOrEmpty() -> {\r\n                        Glide.with(binding.root)\r\n                            .load(song.coverPath.toUri())\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL)\r\n                            .into(binding.imageCover)\r\n                    }\r\n                    else -> {\r\n                        Glide.with(binding.root)\r\n                            .load(R.drawable.album_default) // \uD83D\uDC48 fallback image\r\n                            .into(binding.imageCover)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        viewModel.isPlaying.observe(viewLifecycleOwner) { playing ->\r\n            binding.btnPlayPause.setImageResource(\r\n                if (playing) R.drawable.ic_pause else R.drawable.ic_play\r\n            )\r\n        }\r\n\r\n        viewModel.isLiked.observe(viewLifecycleOwner) { isLiked ->\r\n            if (isLiked) {\r\n                binding.btnFavorite.setImageResource(R.drawable.ic_heart_filled)\r\n            } else {\r\n                binding.btnFavorite.setImageResource(R.drawable.ic_heart_outline)\r\n            }\r\n        }\r\n\r\n        binding.btnFavorite.setOnClickListener {\r\n            val currentSong = viewModel.currSong.value\r\n            currentSong?.let { song ->\r\n                viewModel.toggleLike(song)\r\n            }\r\n        }\r\n\r\n        binding.btnPlayPause.setOnClickListener {\r\n            viewModel.togglePlayPause()\r\n        }\r\n\r\n        binding.root.setOnClickListener {\r\n            val navHostFragment = requireActivity()\r\n                .supportFragmentManager\r\n                .findFragmentById(R.id.nav_host_fragment) as? androidx.navigation.fragment.NavHostFragment\r\n\r\n            val navController = navHostFragment?.navController\r\n            navController?.navigate(R.id.songDetailFragment)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/player/MiniPlayerFragment.kt b/app/src/main/java/com/tubes/purry/ui/player/MiniPlayerFragment.kt
--- a/app/src/main/java/com/tubes/purry/ui/player/MiniPlayerFragment.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/player/MiniPlayerFragment.kt	(date 1748195617123)
@@ -4,19 +4,15 @@
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import androidx.core.net.toUri
 import androidx.fragment.app.Fragment
-import androidx.lifecycle.ViewModelProvider
 import com.bumptech.glide.Glide
 import com.bumptech.glide.load.engine.DiskCacheStrategy
+import com.tubes.purry.PurrytifyApplication
 import com.tubes.purry.R
 import com.tubes.purry.databinding.FragmentMiniPlayerBinding
-import androidx.core.net.toUri
-import androidx.lifecycle.lifecycleScope
-import com.tubes.purry.data.local.AppDatabase
-import com.tubes.purry.data.model.LikedSong
-import com.tubes.purry.ui.profile.ProfileViewModel
-import com.tubes.purry.ui.profile.ProfileViewModelFactory
-import kotlinx.coroutines.launch
+import android.util.Log
+import androidx.navigation.fragment.NavHostFragment
 
 class MiniPlayerFragment : Fragment() {
     private lateinit var viewModel: NowPlayingViewModel
@@ -33,40 +29,32 @@
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
 
-        val appContext = requireContext().applicationContext
-        val likedSongDao = AppDatabase.getDatabase(appContext).LikedSongDao()
-        val songDao = AppDatabase.getDatabase(appContext).songDao()
-
-        val profileViewModelFactory = ProfileViewModelFactory(requireContext())
-        val profileViewModel = ViewModelProvider(requireActivity(), profileViewModelFactory)[ProfileViewModel::class.java]
-
-        val factory = NowPlayingViewModelFactory(likedSongDao, songDao, profileViewModel)
-        viewModel = ViewModelProvider(requireActivity(), factory)[NowPlayingViewModel::class.java]
+        viewModel = (requireActivity().application as PurrytifyApplication).nowPlayingViewModel
 
         viewModel.currSong.observe(viewLifecycleOwner) { song ->
+            Log.d("MiniPlayerFragment", "currSong updated: ${song?.title}")
             if (song != null) {
+                binding.root.visibility = View.VISIBLE
                 binding.textTitle.text = song.title
                 binding.textArtist.text = song.artist
 
-                when {
-                    song.coverResId != null -> {
-                        Glide.with(binding.root)
-                            .load(song.coverResId)
-                            .diskCacheStrategy(DiskCacheStrategy.ALL)
-                            .into(binding.imageCover)
-                    }
-                    !song.coverPath.isNullOrEmpty() -> {
-                        Glide.with(binding.root)
-                            .load(song.coverPath.toUri())
-                            .diskCacheStrategy(DiskCacheStrategy.ALL)
-                            .into(binding.imageCover)
-                    }
-                    else -> {
-                        Glide.with(binding.root)
-                            .load(R.drawable.album_default) // 👈 fallback image
-                            .into(binding.imageCover)
-                    }
-                }
+                val image = when {
+                    song.coverResId != null -> song.coverResId
+                    !song.coverPath.isNullOrEmpty() -> song.coverPath.toUri()
+                    else -> R.drawable.album_default
+                }
+
+                Glide.with(binding.root)
+                    .load(image)
+                    .diskCacheStrategy(DiskCacheStrategy.ALL)
+                    .into(binding.imageCover)
+
+                // ✅ Update icon like sesuai properti di currSong juga
+                binding.btnFavorite.setImageResource(
+                    if (song.isLiked) R.drawable.ic_heart_filled else R.drawable.ic_heart_outline
+                )
+            } else {
+                binding.root.visibility = View.GONE
             }
         }
 
@@ -77,16 +65,13 @@
         }
 
         viewModel.isLiked.observe(viewLifecycleOwner) { isLiked ->
-            if (isLiked) {
-                binding.btnFavorite.setImageResource(R.drawable.ic_heart_filled)
-            } else {
-                binding.btnFavorite.setImageResource(R.drawable.ic_heart_outline)
-            }
+            binding.btnFavorite.setImageResource(
+                if (isLiked) R.drawable.ic_heart_filled else R.drawable.ic_heart_outline
+            )
         }
 
         binding.btnFavorite.setOnClickListener {
-            val currentSong = viewModel.currSong.value
-            currentSong?.let { song ->
+            viewModel.currSong.value?.let { song ->
                 viewModel.toggleLike(song)
             }
         }
@@ -95,13 +80,43 @@
             viewModel.togglePlayPause()
         }
 
+        var lastClickTime = 0L
         binding.root.setOnClickListener {
-            val navHostFragment = requireActivity()
-                .supportFragmentManager
-                .findFragmentById(R.id.nav_host_fragment) as? androidx.navigation.fragment.NavHostFragment
-
-            val navController = navHostFragment?.navController
-            navController?.navigate(R.id.songDetailFragment)
+            val now = System.currentTimeMillis()
+            if (now - lastClickTime < 800) return@setOnClickListener
+            lastClickTime = now
+
+            try {
+                val currentSong = viewModel.currSong.value
+                if (currentSong == null) {
+                    Log.w("MiniPlayerFragment", "No current song to show details for")
+                    return@setOnClickListener
+                }
+
+                val navHostFragment = requireActivity()
+                    .supportFragmentManager
+                    .findFragmentById(R.id.nav_host_fragment) as? NavHostFragment
+                val navController = navHostFragment?.navController
+
+                if (navController == null || navController.currentDestination?.id == R.id.songDetailFragment) {
+                    Log.e("MiniPlayerFragment", "NavController not ready or already in detail")
+                    return@setOnClickListener
+                }
+
+                val bundle = Bundle().apply {
+                    putString("songId", currentSong.id)
+                    putBoolean("isLocal", currentSong.isLocal)
+                    putString("id", currentSong.id)
+                    currentSong.serverId?.let { putInt("serverId", it) }
+                }
+
+                Log.d("MiniPlayerFragment", "Navigating to song detail for: ${currentSong.title}")
+                navController.navigate(R.id.songDetailFragment, bundle)
+
+            } catch (e: Exception) {
+                Log.e("MiniPlayerFragment", "Navigation error: ${e.message}", e)
+            }
         }
     }
+
 }
Index: app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.player\r\n\r\nimport android.content.Context\r\nimport androidx.lifecycle.*\r\nimport com.tubes.purry.data.local.LikedSongDao\r\nimport com.tubes.purry.data.local.SongDao\r\nimport com.tubes.purry.data.model.LikedSong\r\nimport com.tubes.purry.data.model.ProfileData\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport com.tubes.purry.data.model.Song\r\nimport com.tubes.purry.ui.profile.ProfileViewModel\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport kotlin.coroutines.resume\r\nimport kotlin.coroutines.suspendCoroutine\r\nimport com.tubes.purry.data.model.SongInQueue\r\n\r\nclass NowPlayingViewModel(\r\n    private val likedSongDao: LikedSongDao,\r\n    private val songDao: SongDao,\r\n    private val profileViewModel: ProfileViewModel\r\n) : ViewModel() {\r\n\r\n    private val _currSong = MutableLiveData<Song?>() // mutable untuk bisa diubah2\r\n    val currSong: LiveData<Song?> = _currSong // untuk read\r\n\r\n    private val _isPlaying = MutableLiveData<Boolean>()\r\n    val isPlaying: LiveData<Boolean> = _isPlaying\r\n\r\n    private val _isLiked = MutableLiveData<Boolean>()\r\n    val isLiked: LiveData<Boolean> = _isLiked\r\n\r\n    private val _errorMessage = MutableLiveData<String>()\r\n    private var originalAllSongs: List<Song> = emptyList()\r\n    private val _mainQueue = MutableLiveData<List<SongInQueue>>(emptyList())\r\n    private val _manualQueue = MutableLiveData<MutableList<SongInQueue>?>(mutableListOf())\r\n\r\n    private var currentQueueIndex = -1\r\n\r\n    private val _isShuffling = MutableLiveData<Boolean>(false)\r\n    val isShuffling: LiveData<Boolean> = _isShuffling\r\n\r\n    private val _repeatMode = MutableLiveData<RepeatMode>(RepeatMode.NONE)\r\n    val repeatMode: LiveData<RepeatMode> = _repeatMode\r\n\r\n    enum class RepeatMode { NONE, ONE, ALL }\r\n\r\n    private fun getCurrentSongInQueue(): SongInQueue? {\r\n        val currId = _currSong.value?.id ?: return null\r\n        return _manualQueue.value?.find { it.song.id == currId }\r\n    }\r\n\r\n    fun playSong(song: Song, context: Context) {\r\n        _isPlaying.value = true\r\n\r\n\r\n        viewModelScope.launch {\r\n            val userId = getUserIdBlocking() ?: return@launch\r\n            val isLiked = likedSongDao.isLiked(userId, song.id)\r\n            val songWithLike = song.copy(isLiked = isLiked)\r\n\r\n            if (_currSong.value?.id == song.id) {\r\n                _currSong.postValue(songWithLike)\r\n            }\r\n\r\n            Log.d(\r\n                \"NowPlayingViewModel\",\r\n                \"Song data: filePath=${song.filePath}, resId=${song.resId}\"\r\n            )\r\n\r\n            // Ensure PlayerController.play runs on the main thread\r\n            withContext(Dispatchers.Main) {\r\n                val success = PlayerController.play(songWithLike, context)\r\n                if (success) {\r\n                    _currSong.value = songWithLike\r\n                    _isLiked.value = isLiked\r\n\r\n                    Handler(Looper.getMainLooper()).postDelayed({\r\n                        _isPlaying.value = PlayerController.isPlaying()\r\n                    }, 300)\r\n\r\n                    PlayerController.onCompletion = {\r\n                        when (_repeatMode.value) {\r\n                            RepeatMode.ONE -> {\r\n                                _currSong.value?.let { playSong(it, context) }\r\n                            }\r\n                            else -> {\r\n                                removeCurrentFromQueue()\r\n                                playNextInQueue(context)\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    _isPlaying.value = false\r\n                    _errorMessage.value = \"Gagal memutar lagu. Cek file atau perizinan.\"\r\n                }\r\n            }\r\n        }\r\n//        val success = PlayerController.play(song, context)\r\n//        if (success) {\r\n//            _currSong.value = song\r\n////            _isPlaying.value = true\r\n//            Handler(Looper.getMainLooper()).postDelayed({\r\n//                _isPlaying.value = PlayerController.isPlaying()\r\n//            }, 300)\r\n//\r\n//\r\n//\r\n//            PlayerController.onCompletion = {\r\n//                when (_repeatMode.value) {\r\n//                    RepeatMode.ONE -> {\r\n//                        _currSong.value?.let { playSong(it, context) }\r\n//                    }\r\n//                    else -> {\r\n//                        removeCurrentFromQueue()\r\n//                        playNextInQueue(context)\r\n//                    }\r\n//                }\r\n//            }\r\n//        } else {\r\n//            _isPlaying.value = false\r\n//            _errorMessage.value = \"Gagal memutar lagu. Cek file atau perizinan.\"\r\n//        }\r\n    }\r\n\r\n    private fun pauseSong() {\r\n        _isPlaying.value = false\r\n        PlayerController.pause()\r\n    }\r\n\r\n    private fun resumeSong() {\r\n        if (!PlayerController.isPlaying()) {\r\n            _isPlaying.value = true\r\n            PlayerController.resume()\r\n        } else {\r\n            Log.d(\"NowPlayingViewModel\", \"resumeSong called but already playing.\")\r\n        }\r\n    }\r\n\r\n    fun togglePlayPause() {\r\n        val currentlyPlaying = _isPlaying.value ?: false\r\n        if (currentlyPlaying) {\r\n            pauseSong()\r\n        } else {\r\n            resumeSong()\r\n        }\r\n    }\r\n\r\n    fun toggleLike(song: Song) {\r\n        viewModelScope.launch {\r\n            val userId = profileViewModel.profileData.value?.id\r\n            userId?.let { id ->\r\n                val isLiked = likedSongDao.isSongLiked(id, song.id)\r\n                if (!isLiked) {\r\n                    val likedSong = LikedSong(\r\n                        userId = id,\r\n                        songId = song.id\r\n                    )\r\n                    likedSongDao.likeSong(likedSong)\r\n                    _isLiked.postValue(true) // Update the liked state\r\n                } else {\r\n                    likedSongDao.unlikeSong(id, song.id)\r\n                    _isLiked.postValue(false) // Update the liked state\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private suspend fun getUserIdBlocking(): Int? {\r\n        return profileViewModel.profileData.value?.id ?: suspendCoroutine { cont ->\r\n            val observer = object : Observer<ProfileData?> {\r\n                override fun onChanged(value: ProfileData?) {\r\n                    if (value != null) {\r\n                        cont.resume(value.id)\r\n                        profileViewModel.profileData.removeObserver(this)\r\n                    }\r\n                }\r\n            }\r\n            profileViewModel.profileData.observeForever(observer)\r\n        }\r\n    }\r\n\r\n    fun addToQueue(song: Song, context: Context) {\r\n        val updatedManualQueue = _manualQueue.value ?: mutableListOf()\r\n        updatedManualQueue.add(SongInQueue(song, fromManualQueue = true))\r\n        _manualQueue.value = updatedManualQueue\r\n\r\n        if (_currSong.value == null) {\r\n            playSong(song, context)\r\n        }\r\n    }\r\n\r\n    fun setQueueFromClickedSong(clicked: Song, allSongs: List<Song>, context: Context) {\r\n        originalAllSongs = allSongs\r\n\r\n        val newMainQueue = mutableListOf<SongInQueue>()\r\n        newMainQueue.add(SongInQueue(clicked, fromManualQueue = false))\r\n        newMainQueue.addAll(allSongs.filter { it.id != clicked.id }.map { SongInQueue(it, false) })\r\n\r\n        _manualQueue.value = mutableListOf()\r\n        _mainQueue.value = newMainQueue\r\n        currentQueueIndex = 0\r\n        playSong(clicked, context)\r\n    }\r\n\r\n    fun removeFromQueue(deletedSongId: String, context: Context) {\r\n        val wasCurrent = _currSong.value?.id == deletedSongId\r\n\r\n        val manualQueueList = _manualQueue.value ?: mutableListOf()\r\n        val manualIndex = manualQueueList.indexOfFirst { it.song.id == deletedSongId }\r\n\r\n        if (manualIndex != -1) {\r\n            manualQueueList.removeAt(manualIndex)\r\n            _manualQueue.value = manualQueueList\r\n        } else {\r\n            val mainQueueList = _mainQueue.value?.toMutableList() ?: mutableListOf()\r\n            val mainIndex = mainQueueList.indexOfFirst { it.song.id == deletedSongId }\r\n\r\n            if (mainIndex != -1) {\r\n                mainQueueList.removeAt(mainIndex)\r\n                _mainQueue.value = mainQueueList\r\n                if (mainIndex < currentQueueIndex) currentQueueIndex--\r\n            }\r\n        }\r\n\r\n        if (wasCurrent) {\r\n            playNextInQueue(context)\r\n        }\r\n    }\r\n\r\n\r\n    private fun removeCurrentFromQueue() {\r\n        val currentInQueue = getCurrentSongInQueue()\r\n        if (currentInQueue?.fromManualQueue == true) {\r\n            val updatedManual = _manualQueue.value?.toMutableList()\r\n            updatedManual?.removeIf { it.song.id == currentInQueue.song.id }\r\n            _manualQueue.value = updatedManual\r\n        }\r\n    }\r\n\r\n    private fun playNextInQueue(context: Context) {\r\n        val manual = _manualQueue.value ?: mutableListOf()\r\n        if (manual.isNotEmpty()) {\r\n            val nextManual = manual.removeAt(0)\r\n            _manualQueue.value = manual\r\n            playSong(nextManual.song, context)\r\n            return\r\n        }\r\n\r\n        val main = _mainQueue.value.orEmpty()\r\n        if (main.isEmpty()) return\r\n\r\n        if (currentQueueIndex < main.size - 1) {\r\n            currentQueueIndex++\r\n            playSong(main[currentQueueIndex].song, context)\r\n        } else if (_repeatMode.value == RepeatMode.ALL) {\r\n            currentQueueIndex = 0\r\n            playSong(main[0].song, context)\r\n        }\r\n    }\r\n\r\n\r\n    fun nextSong(context: Context, isManual: Boolean = true) {\r\n        if (isManual && _repeatMode.value == RepeatMode.ONE) {\r\n            _repeatMode.value = RepeatMode.ALL\r\n        }\r\n        playNextInQueue(context)\r\n    }\r\n\r\n    fun previousSong(context: Context) {\r\n        val main = _mainQueue.value.orEmpty()\r\n        if (main.isEmpty()) return\r\n\r\n        if (_isShuffling.value == true) {\r\n            val randomSong = main.random()\r\n            currentQueueIndex = main.indexOf(randomSong)\r\n            playSong(randomSong.song, context)\r\n        } else {\r\n            if (currentQueueIndex > 0) {\r\n                currentQueueIndex--\r\n                playSong(main[currentQueueIndex].song, context)\r\n            } else if (_repeatMode.value == RepeatMode.ALL && main.isNotEmpty()) {\r\n                currentQueueIndex = main.size - 1\r\n                playSong(main[currentQueueIndex].song, context)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun clearQueue() {\r\n        _mainQueue.value = emptyList()\r\n        _manualQueue.value = mutableListOf()\r\n        _currSong.value = null\r\n        _isPlaying.value = false\r\n        currentQueueIndex = -1\r\n    }\r\n\r\n    fun toggleShuffle() {\r\n        val isNowShuffling = !(_isShuffling.value ?: false)\r\n        _isShuffling.value = isNowShuffling\r\n\r\n        val currentSong = _currSong.value ?: return\r\n        val newMainQueue = mutableListOf<SongInQueue>()\r\n\r\n        if (isNowShuffling) {\r\n            val shuffled = originalAllSongs.shuffled().filter { it.id != currentSong.id }\r\n            newMainQueue.add(SongInQueue(currentSong, fromManualQueue = false))\r\n            newMainQueue.addAll(shuffled.map { SongInQueue(it, false) })\r\n        } else {\r\n            val ordered = originalAllSongs.filter { it.id != currentSong.id }\r\n            newMainQueue.add(SongInQueue(currentSong, fromManualQueue = false))\r\n            newMainQueue.addAll(ordered.map { SongInQueue(it, false) })\r\n        }\r\n\r\n        _mainQueue.value = newMainQueue\r\n        currentQueueIndex = 0\r\n    }\r\n\r\n    fun toggleRepeat() {\r\n        _repeatMode.value = when (_repeatMode.value) {\r\n            RepeatMode.NONE -> RepeatMode.ALL\r\n            RepeatMode.ALL -> RepeatMode.ONE\r\n            RepeatMode.ONE, null -> RepeatMode.NONE\r\n        }\r\n    }\r\n\r\n    override fun onCleared() {\r\n        super.onCleared()\r\n        PlayerController.release()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt b/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt
--- a/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/player/NowPlayingViewModel.kt	(date 1748195617125)
@@ -1,34 +1,47 @@
 package com.tubes.purry.ui.player
 
+import android.app.Application
 import android.content.Context
+import android.content.Intent
+import android.media.AudioManager
+import android.media.AudioDeviceInfo
+import android.os.Build
 import androidx.lifecycle.*
+import com.tubes.purry.data.local.AppDatabase
 import com.tubes.purry.data.local.LikedSongDao
 import com.tubes.purry.data.local.SongDao
 import com.tubes.purry.data.model.LikedSong
 import com.tubes.purry.data.model.ProfileData
+import com.tubes.purry.data.repository.AnalyticsRepository
 import android.os.Handler
 import android.os.Looper
 import android.util.Log
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
+import com.tubes.purry.data.model.AudioDevice
 import com.tubes.purry.data.model.Song
 import com.tubes.purry.ui.profile.ProfileViewModel
+import com.tubes.purry.utils.SessionManager
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.launch
 import kotlinx.coroutines.withContext
 import kotlin.coroutines.resume
 import kotlin.coroutines.suspendCoroutine
 import com.tubes.purry.data.model.SongInQueue
+import com.tubes.purry.data.remote.ApiClient.apiService
+import com.tubes.purry.utils.parseDuration
 
 class NowPlayingViewModel(
+    application: Application,
     private val likedSongDao: LikedSongDao,
     private val songDao: SongDao,
     private val profileViewModel: ProfileViewModel
-) : ViewModel() {
+) : AndroidViewModel(application) {
 
-    private val _currSong = MutableLiveData<Song?>() // mutable untuk bisa diubah2
-    val currSong: LiveData<Song?> = _currSong // untuk read
+    val profileData: LiveData<ProfileData> get() = profileViewModel.profileData
+    private val _currSong = MutableLiveData<Song?>()
+    val currSong: LiveData<Song?> = _currSong
 
     private val _isPlaying = MutableLiveData<Boolean>()
     val isPlaying: LiveData<Boolean> = _isPlaying
@@ -36,56 +49,156 @@
     private val _isLiked = MutableLiveData<Boolean>()
     val isLiked: LiveData<Boolean> = _isLiked
 
-    private val _errorMessage = MutableLiveData<String>()
-    private var originalAllSongs: List<Song> = emptyList()
-    private val _mainQueue = MutableLiveData<List<SongInQueue>>(emptyList())
-    private val _manualQueue = MutableLiveData<MutableList<SongInQueue>?>(mutableListOf())
-
-    private var currentQueueIndex = -1
-
     private val _isShuffling = MutableLiveData<Boolean>(false)
     val isShuffling: LiveData<Boolean> = _isShuffling
 
     private val _repeatMode = MutableLiveData<RepeatMode>(RepeatMode.NONE)
     val repeatMode: LiveData<RepeatMode> = _repeatMode
 
+    // ===== PERBAIKAN DURASI - TAMBAHAN LIVE DATA =====
+    private val _currentPosition = MutableLiveData<Int>(0)
+    val currentPosition: LiveData<Int> = _currentPosition
+
+    private val _songDuration = MutableLiveData<Int>(0)
+    val songDuration: LiveData<Int> = _songDuration
+
+    // Add AudioRoutingViewModel integration
+    private val audioRoutingViewModel = AudioRoutingViewModel(application)
+
+    init {
+        setupAudioRoutingIntegration()
+    }
+
+    private fun setupAudioRoutingIntegration() {
+        // Set up the callback for MediaPlayer restart
+        audioRoutingViewModel.onMediaPlayerRestartNeeded = { context, device ->
+            Log.d("NowPlayingViewModel", "🔄 Audio routing changed to: ${device.name}, restarting MediaPlayer")
+            restartMediaPlayerForAudioRouting(context)
+        }
+
+        // Observe active device changes
+        audioRoutingViewModel.activeDevice.observeForever { activeDevice ->
+            activeDevice?.let { device ->
+                Log.d("NowPlayingViewModel", "🎧 Active audio device: ${device.name}")
+                // You can update UI or perform other actions here
+            }
+        }
+    }
+
+    fun getAudioRoutingViewModel(): AudioRoutingViewModel {
+        return audioRoutingViewModel
+    }
+
     enum class RepeatMode { NONE, ONE, ALL }
 
-    private fun getCurrentSongInQueue(): SongInQueue? {
-        val currId = _currSong.value?.id ?: return null
-        return _manualQueue.value?.find { it.song.id == currId }
+    private val _errorMessage = MutableLiveData<String>()
+
+    private var originalAllSongs: List<Song> = emptyList()
+    private var shuffledQueue: List<SongInQueue> = emptyList()
+    private var currentQueueIndex = -1
+    private val _mainQueue = MutableLiveData<List<SongInQueue>>(emptyList())
+    private val _manualQueue = MutableLiveData<MutableList<SongInQueue>?>(mutableListOf())
+
+    // ===== PERBAIKAN DURASI - HANDLER UNTUK UPDATE POSISI =====
+    private val positionHandler = Handler(Looper.getMainLooper())
+    private val positionRunnable = object : Runnable {
+        override fun run() {
+            if (PlayerController.isPlaying()) {
+                val position = PlayerController.getCurrentPosition()
+                val duration = PlayerController.getDuration()
+
+                _currentPosition.value = position
+                if (duration > 0 && _songDuration.value != duration) {
+                    _songDuration.value = duration
+                    // Update song object dengan durasi yang benar
+                    _currSong.value?.let { song ->
+                        _currSong.value = song.copy(duration = duration)
+                    }
+                }
+            }
+            positionHandler.postDelayed(this, 1000) // Update setiap detik
+        }
     }
 
+    // ===== ANALYTICS TRACKING VARIABLES =====
+    private val analyticsRepository by lazy {
+        val database = AppDatabase.getDatabase(getApplication())
+        AnalyticsRepository(database.analyticsDao(), database.songDao())
+    }
+
+    private var currentSessionId: Long? = null
+    private var sessionStartTime: Long = 0
+    private var isPaused: Boolean = false
+    private var pauseStartTime: Long = 0
+    private var totalPauseTime: Long = 0
+
+    // ===== PERBAIKAN DURASI - METHODS UNTUK TRACKING =====
+    private fun startPositionTracking() {
+        positionHandler.removeCallbacks(positionRunnable)
+        positionHandler.post(positionRunnable)
+    }
+
+    private fun stopPositionTracking() {
+        positionHandler.removeCallbacks(positionRunnable)
+    }
+
+//    private fun getCurrentSongInQueue(): SongInQueue? {
+//        val currId = _currSong.value?.id ?: return null
+//        return _manualQueue.value?.find { it.song.id == currId }
+//    }
+
+    // ===== PERBAIKAN DURASI - PLAYSONG METHOD YANG DIPERBAIKI =====
     fun playSong(song: Song, context: Context) {
+        // ===== END PREVIOUS ANALYTICS SESSION =====
+        endCurrentAnalyticsSession()
+
         _isPlaying.value = true
-
-
         viewModelScope.launch {
-            val userId = getUserIdBlocking() ?: return@launch
-            val isLiked = likedSongDao.isLiked(userId, song.id)
-            val songWithLike = song.copy(isLiked = isLiked)
-
-            if (_currSong.value?.id == song.id) {
-                _currSong.postValue(songWithLike)
-            }
+            val songWithLike = song.copy(isLiked = false)
+            _currSong.postValue(songWithLike)
 
-            Log.d(
-                "NowPlayingViewModel",
-                "Song data: filePath=${song.filePath}, resId=${song.resId}"
-            )
-
-            // Ensure PlayerController.play runs on the main thread
             withContext(Dispatchers.Main) {
                 val success = PlayerController.play(songWithLike, context)
                 if (success) {
-                    _currSong.value = songWithLike
-                    _isLiked.value = isLiked
+                    // Set callback untuk durasi siap
+                    PlayerController.onDurationReady = { duration ->
+                        Log.d("NowPlayingViewModel", "Duration ready: $duration ms")
+                        _songDuration.postValue(duration)
+                        _currSong.value?.let { currentSong ->
+                            _currSong.postValue(currentSong.copy(duration = duration))
+                        }
+                    }
+
+                    PlayerController.onPrepared = {
+                        val duration = PlayerController.getDuration()
+                        Log.d("NowPlayingViewModel", "OnPrepared - Duration: $duration ms")
+
+                        if (duration > 0) {
+                            _songDuration.postValue(duration)
+                            _currSong.value?.let { currentSong ->
+                                _currSong.postValue(currentSong.copy(duration = duration))
+                            }
+                        }
+
+                        _isPlaying.postValue(PlayerController.isPlaying())
 
-                    Handler(Looper.getMainLooper()).postDelayed({
-                        _isPlaying.value = PlayerController.isPlaying()
-                    }, 300)
+                        // Mulai tracking posisi setelah prepared
+                        startPositionTracking()
+
+                        // Coba dapatkan durasi lagi setelah delay singkat
+                        Handler(Looper.getMainLooper()).postDelayed({
+                            val finalDuration = PlayerController.ensureDurationAvailable()
+                            if (finalDuration > 0 && finalDuration != _songDuration.value) {
+                                _songDuration.postValue(finalDuration)
+                                _currSong.value?.let { currentSong ->
+                                    _currSong.postValue(currentSong.copy(duration = finalDuration))
+                                }
+                            }
+                        }, 500)
+                    }
 
                     PlayerController.onCompletion = {
+                        stopPositionTracking()
                         when (_repeatMode.value) {
                             RepeatMode.ONE -> {
                                 _currSong.value?.let { playSong(it, context) }
@@ -96,81 +209,150 @@
                             }
                         }
                     }
+
+                    // ===== START ANALYTICS TRACKING =====
+                    startAnalyticsTracking(songWithLike, context)
+
+                    markSongAsRecentlyPlayed(songWithLike)
+                    val userId = getUserIdBlocking()
+                    if (userId != null) {
+                        val isLiked = likedSongDao.isSongLiked(userId, songWithLike.id)
+                        _isLiked.postValue(isLiked)
+                    }
                 } else {
                     _isPlaying.value = false
                     _errorMessage.value = "Gagal memutar lagu. Cek file atau perizinan."
                 }
             }
         }
-//        val success = PlayerController.play(song, context)
-//        if (success) {
-//            _currSong.value = song
-////            _isPlaying.value = true
-//            Handler(Looper.getMainLooper()).postDelayed({
-//                _isPlaying.value = PlayerController.isPlaying()
-//            }, 300)
-//
-//
-//
-//            PlayerController.onCompletion = {
-//                when (_repeatMode.value) {
-//                    RepeatMode.ONE -> {
-//                        _currSong.value?.let { playSong(it, context) }
-//                    }
-//                    else -> {
-//                        removeCurrentFromQueue()
-//                        playNextInQueue(context)
-//                    }
-//                }
-//            }
-//        } else {
-//            _isPlaying.value = false
-//            _errorMessage.value = "Gagal memutar lagu. Cek file atau perizinan."
-//        }
+    }
+
+    // ===== ANALYTICS TRACKING METHODS =====
+    private fun startAnalyticsTracking(song: Song, context: Context) {
+        val sessionManager = SessionManager(context)
+        val userId = sessionManager.getUserId()
+
+        Log.d("NowPlayingAnalytics", "🎵 STARTING ANALYTICS: ${song.title}")
+        Log.d("NowPlayingAnalytics", "User ID: $userId")
+
+        if (userId != null) {
+            viewModelScope.launch {
+                try {
+                    currentSessionId = analyticsRepository.startListeningSession(userId, song)
+                    sessionStartTime = System.currentTimeMillis()
+                    totalPauseTime = 0
+                    isPaused = false
+
+                    Log.d("Analytics", "Started session ${currentSessionId} for song: ${song.title}")
+                } catch (e: Exception) {
+                    Log.e("Analytics", "Failed to start analytics session: ${e.message}")
+                }
+            }
+        }
+    }
+
+    private fun endCurrentAnalyticsSession() {
+        Log.d("NowPlayingAnalytics", "🛑 ENDING SESSION: $currentSessionId")
+        currentSessionId?.let { sessionId ->
+            val currentTime = System.currentTimeMillis()
+            val totalDuration = if (isPaused) {
+                // If currently paused, add current pause time
+                (pauseStartTime - sessionStartTime) - totalPauseTime
+            } else {
+                (currentTime - sessionStartTime) - totalPauseTime
+            }
+
+            // Only count sessions longer than 30 seconds
+            if (totalDuration >= 30000) {
+                viewModelScope.launch {
+                    try {
+                        analyticsRepository.endListeningSession(sessionId, totalDuration)
+                        Log.d("Analytics", "Ended session $sessionId, duration: ${totalDuration}ms")
+                    } catch (e: Exception) {
+                        Log.e("Analytics", "Failed to end analytics session: ${e.message}")
+                    }
+                }
+            }
+
+            // Reset tracking variables
+            currentSessionId = null
+            sessionStartTime = 0
+            totalPauseTime = 0
+            isPaused = false
+        }
     }
 
     private fun pauseSong() {
-        _isPlaying.value = false
         PlayerController.pause()
+        _isPlaying.value = false
+        stopPositionTracking()
+
+        // ===== ANALYTICS: Track pause =====
+        if (!isPaused && currentSessionId != null) {
+            pauseStartTime = System.currentTimeMillis()
+            isPaused = true
+        }
     }
 
     private fun resumeSong() {
         if (!PlayerController.isPlaying()) {
+            PlayerController.resume()
             _isPlaying.value = true
-            PlayerController.resume()
+            startPositionTracking()
+
+            // ===== ANALYTICS: Track resume =====
+            if (isPaused && currentSessionId != null) {
+                totalPauseTime += System.currentTimeMillis() - pauseStartTime
+                isPaused = false
+            }
         } else {
             Log.d("NowPlayingViewModel", "resumeSong called but already playing.")
         }
     }
 
     fun togglePlayPause() {
-        val currentlyPlaying = _isPlaying.value ?: false
-        if (currentlyPlaying) {
+        if (_isPlaying.value == true) {
             pauseSong()
         } else {
             resumeSong()
         }
     }
 
+    fun seekTo(positionMs: Int) {
+        PlayerController.seekTo(positionMs)
+        _currentPosition.value = positionMs
+    }
+
     fun toggleLike(song: Song) {
         viewModelScope.launch {
-            val userId = profileViewModel.profileData.value?.id
-            userId?.let { id ->
-                val isLiked = likedSongDao.isSongLiked(id, song.id)
-                if (!isLiked) {
-                    val likedSong = LikedSong(
-                        userId = id,
-                        songId = song.id
-                    )
-                    likedSongDao.likeSong(likedSong)
-                    _isLiked.postValue(true) // Update the liked state
-                } else {
-                    likedSongDao.unlikeSong(id, song.id)
-                    _isLiked.postValue(false) // Update the liked state
-                }
+            val userId = getUserIdBlocking()
+            if (userId == null) {
+                Log.e("NowPlayingViewModel", "User not logged in.")
+                return@launch
+            }
+
+            val db = AppDatabase.getDatabase(getApplication())
+            val songExists = db.songDao().getById(song.id) != null
+            if (!songExists) {
+                db.songDao().insert(song)
+            }
+
+            val isLiked = db.LikedSongDao().isSongLiked(userId, song.id)
+            val updatedSong = song.copy(isLiked = !isLiked)
+
+            if (!isLiked) {
+                db.LikedSongDao().likeSong(LikedSong(userId = userId, songId = song.id))
+                _isLiked.postValue(true)
+            } else {
+                db.LikedSongDao().unlikeSong(userId, song.id)
+                _isLiked.postValue(false)
             }
+
+            _currSong.postValue(updatedSong)
         }
     }
+
+
 
     private suspend fun getUserIdBlocking(): Int? {
         return profileViewModel.profileData.value?.id ?: suspendCoroutine { cont ->
@@ -188,24 +370,22 @@
 
     fun addToQueue(song: Song, context: Context) {
         val updatedManualQueue = _manualQueue.value ?: mutableListOf()
-        updatedManualQueue.add(SongInQueue(song, fromManualQueue = true))
+        updatedManualQueue.add(SongInQueue(song, true))
         _manualQueue.value = updatedManualQueue
-
         if (_currSong.value == null) {
+            _mainQueue.value = listOf(SongInQueue(song, true))
+            currentQueueIndex = 0
             playSong(song, context)
         }
     }
 
     fun setQueueFromClickedSong(clicked: Song, allSongs: List<Song>, context: Context) {
         originalAllSongs = allSongs
-
-        val newMainQueue = mutableListOf<SongInQueue>()
-        newMainQueue.add(SongInQueue(clicked, fromManualQueue = false))
-        newMainQueue.addAll(allSongs.filter { it.id != clicked.id }.map { SongInQueue(it, false) })
+        val newMainQueue = allSongs.map { SongInQueue(it, fromManualQueue = false) }
 
         _manualQueue.value = mutableListOf()
         _mainQueue.value = newMainQueue
-        currentQueueIndex = 0
+        currentQueueIndex = newMainQueue.indexOfFirst { it.song.id == clicked.id }
         playSong(clicked, context)
     }
 
@@ -213,20 +393,15 @@
         val wasCurrent = _currSong.value?.id == deletedSongId
 
         val manualQueueList = _manualQueue.value ?: mutableListOf()
-        val manualIndex = manualQueueList.indexOfFirst { it.song.id == deletedSongId }
-
-        if (manualIndex != -1) {
-            manualQueueList.removeAt(manualIndex)
-            _manualQueue.value = manualQueueList
-        } else {
-            val mainQueueList = _mainQueue.value?.toMutableList() ?: mutableListOf()
-            val mainIndex = mainQueueList.indexOfFirst { it.song.id == deletedSongId }
-
-            if (mainIndex != -1) {
-                mainQueueList.removeAt(mainIndex)
-                _mainQueue.value = mainQueueList
-                if (mainIndex < currentQueueIndex) currentQueueIndex--
-            }
+        manualQueueList.removeIf { it.song.id == deletedSongId }
+        _manualQueue.value = manualQueueList
+
+        val mainQueueList = _mainQueue.value?.toMutableList() ?: mutableListOf()
+        val mainIndex = mainQueueList.indexOfFirst { it.song.id == deletedSongId }
+        if (mainIndex != -1) {
+            mainQueueList.removeAt(mainIndex)
+            _mainQueue.value = mainQueueList
+            if (mainIndex < currentQueueIndex) currentQueueIndex--
         }
 
         if (wasCurrent) {
@@ -234,37 +409,26 @@
         }
     }
 
-
     private fun removeCurrentFromQueue() {
-        val currentInQueue = getCurrentSongInQueue()
-        if (currentInQueue?.fromManualQueue == true) {
-            val updatedManual = _manualQueue.value?.toMutableList()
-            updatedManual?.removeIf { it.song.id == currentInQueue.song.id }
-            _manualQueue.value = updatedManual
-        }
+        val currentInQueue = _currSong.value ?: return
+        val updatedManual = _manualQueue.value?.toMutableList() ?: return
+        updatedManual.removeIf { it.song.id == currentInQueue.id }
+        _manualQueue.value = updatedManual
     }
 
     private fun playNextInQueue(context: Context) {
-        val manual = _manualQueue.value ?: mutableListOf()
-        if (manual.isNotEmpty()) {
-            val nextManual = manual.removeAt(0)
-            _manualQueue.value = manual
-            playSong(nextManual.song, context)
-            return
-        }
-
-        val main = _mainQueue.value.orEmpty()
-        if (main.isEmpty()) return
-
-        if (currentQueueIndex < main.size - 1) {
+        val manualQueue = _manualQueue.value.orEmpty()
+        val mainQueue = _mainQueue.value.orEmpty()
+        val queue = if (_isShuffling.value == true) shuffledQueue else manualQueue + mainQueue
+        if (queue.isEmpty()) return
+        if (currentQueueIndex < queue.size - 1) {
             currentQueueIndex++
-            playSong(main[currentQueueIndex].song, context)
+            playSong(queue[currentQueueIndex].song, context)
         } else if (_repeatMode.value == RepeatMode.ALL) {
             currentQueueIndex = 0
-            playSong(main[0].song, context)
+            playSong(queue[0].song, context)
         }
     }
-
 
     fun nextSong(context: Context, isManual: Boolean = true) {
         if (isManual && _repeatMode.value == RepeatMode.ONE) {
@@ -274,52 +438,48 @@
     }
 
     fun previousSong(context: Context) {
-        val main = _mainQueue.value.orEmpty()
-        if (main.isEmpty()) return
-
-        if (_isShuffling.value == true) {
-            val randomSong = main.random()
-            currentQueueIndex = main.indexOf(randomSong)
-            playSong(randomSong.song, context)
-        } else {
-            if (currentQueueIndex > 0) {
-                currentQueueIndex--
-                playSong(main[currentQueueIndex].song, context)
-            } else if (_repeatMode.value == RepeatMode.ALL && main.isNotEmpty()) {
-                currentQueueIndex = main.size - 1
-                playSong(main[currentQueueIndex].song, context)
-            }
+        val manualQueue = _manualQueue.value.orEmpty()
+        val mainQueue = _mainQueue.value.orEmpty()
+        val queue = if (_isShuffling.value == true) shuffledQueue else manualQueue + mainQueue
+        if (queue.isEmpty()) return
+        if (currentQueueIndex > 0) {
+            currentQueueIndex--
+            playSong(queue[currentQueueIndex].song, context)
+        } else if (_repeatMode.value == RepeatMode.ALL && queue.isNotEmpty()) {
+            currentQueueIndex = queue.size - 1
+            playSong(queue[currentQueueIndex].song, context)
         }
     }
-
 
     fun clearQueue() {
+        // ===== END ANALYTICS SESSION BEFORE CLEARING =====
+        endCurrentAnalyticsSession()
+
+        stopPositionTracking()
         _mainQueue.value = emptyList()
         _manualQueue.value = mutableListOf()
         _currSong.value = null
         _isPlaying.value = false
+        _currentPosition.value = 0
+        _songDuration.value = 0
         currentQueueIndex = -1
     }
 
     fun toggleShuffle() {
         val isNowShuffling = !(_isShuffling.value ?: false)
         _isShuffling.value = isNowShuffling
-
         val currentSong = _currSong.value ?: return
-        val newMainQueue = mutableListOf<SongInQueue>()
-
         if (isNowShuffling) {
-            val shuffled = originalAllSongs.shuffled().filter { it.id != currentSong.id }
-            newMainQueue.add(SongInQueue(currentSong, fromManualQueue = false))
-            newMainQueue.addAll(shuffled.map { SongInQueue(it, false) })
+            val shuffled = originalAllSongs.shuffled()
+            shuffledQueue = shuffled.map { SongInQueue(it, fromManualQueue = false) }
+            currentQueueIndex = shuffledQueue.indexOfFirst { it.song.id == currentSong.id }
+            _mainQueue.value = shuffledQueue
         } else {
-            val ordered = originalAllSongs.filter { it.id != currentSong.id }
-            newMainQueue.add(SongInQueue(currentSong, fromManualQueue = false))
-            newMainQueue.addAll(ordered.map { SongInQueue(it, false) })
+            val ordered = originalAllSongs.map { SongInQueue(it, fromManualQueue = false) }
+            _mainQueue.value = ordered
+            currentQueueIndex = ordered.indexOfFirst { it.song.id == currentSong.id }
+            shuffledQueue = emptyList()
         }
-
-        _mainQueue.value = newMainQueue
-        currentQueueIndex = 0
     }
 
     fun toggleRepeat() {
@@ -330,8 +490,239 @@
         }
     }
 
+    fun fetchSongByUUID(uuid: String, context: Context) {
+        Log.d("NowPlayingVM", "fetchSongByUUID called with: $uuid")
+        viewModelScope.launch {
+            try {
+                val song = songDao.getById(uuid)
+                if (song != null) {
+                    Log.d("NowPlayingVM", "Local song found: ${song.title}")
+                    _currSong.postValue(song)
+                    playSong(song, context)
+
+                    val userId = getUserIdBlocking()
+                    if (userId != null) {
+                        val isLiked = likedSongDao.isSongLiked(userId, uuid)
+                        _isLiked.postValue(isLiked)
+                    }
+                } else {
+                    _errorMessage.postValue("Lagu lokal tidak ditemukan.")
+                    Log.e("NowPlayingVM", "Lagu lokal tidak ditemukan: $uuid")
+                }
+            } catch (e: Exception) {
+                _errorMessage.postValue("Gagal memuat lagu lokal: ${e.message}")
+                Log.e("NowPlayingVM", "Error fetchSongByUUID: ${e.message}", e)
+            }
+        }
+    }
+
+    fun fetchSongById(serverId: Int, context: Context) {
+        Log.d("NowPlayingVM", "fetchSongById called with serverId: $serverId")
+        viewModelScope.launch {
+            try {
+                val response = apiService.getSongById(serverId)
+                if (response.isSuccessful) {
+                    response.body()?.let { raw ->
+                        val converted = Song(
+                            id = "srv-${raw.id}",
+                            serverId = raw.id,
+                            title = raw.title,
+                            artist = raw.artist,
+                            filePath = raw.url,
+                            coverPath = raw.artwork,
+                            duration = parseDuration(raw.duration),
+                            isLocal = false,
+                            isLiked = false
+                        )
+                        Log.d("NowPlayingVM", "Server song converted: ${converted.title} (ID: ${converted.id})")
+                        _currSong.postValue(converted)
+                        playSong(converted, context)
+
+                        // Check if liked
+                        val userId = getUserIdBlocking()
+                        if (userId != null) {
+                            val isLiked = likedSongDao.isSongLiked(userId, converted.id)
+                            _isLiked.postValue(isLiked)
+                        }
+                    }
+                } else {
+                    _errorMessage.postValue("Gagal memuat lagu dari server: ${response.code()}")
+                    Log.e("NowPlayingVM", "Server error: ${response.code()} - ${response.message()}")
+                }
+            } catch (e: Exception) {
+                _errorMessage.postValue("Error saat mengambil lagu: ${e.message}")
+                Log.e("NowPlayingVM", "Error saat fetch lagu dari server: ${e.message}", e)
+            }
+        }
+    }
+
+    private suspend fun markSongAsRecentlyPlayed(song: Song) {
+        val updatedSong = song.copy(lastPlayedAt = System.currentTimeMillis())
+        if (songDao.getById(song.id) != null) {
+            songDao.update(updatedSong)
+        } else {
+            songDao.insert(updatedSong)
+        }
+    }
+
+    fun fetchSong(songId: String, isLocal: Boolean, serverId: Int? = null, context: Context) {
+        Log.d("NowPlayingVM", "fetchSong called - songId: $songId, isLocal: $isLocal, serverId: $serverId")
+
+        if (isLocal) {
+            fetchSongByUUID(songId, context)
+        } else {
+            // Untuk lagu server, coba extract serverId dari songId jika tidak disediakan
+            val serverIdToUse = serverId ?: run {
+                if (songId.startsWith("srv-")) {
+                    try {
+                        songId.removePrefix("srv-").toInt()
+                    } catch (e: NumberFormatException) {
+                        Log.e("NowPlayingVM", "Cannot extract serverId from songId: $songId", e)
+                        null
+                    }
+                } else {
+                    // Mungkin ID langsung berupa angka
+                    try {
+                        songId.toInt()
+                    } catch (e: NumberFormatException) {
+                        Log.e("NowPlayingVM", "Cannot parse songId as serverId: $songId", e)
+                        null
+                    }
+                }
+            }
+
+            if (serverIdToUse != null) {
+                fetchSongById(serverIdToUse, context)
+            } else {
+                _errorMessage.postValue("Invalid server song ID format: $songId")
+                Log.e("NowPlayingVM", "Invalid serverId for song: $songId")
+            }
+        }
+    }
+
+    fun dismissPlayer() {
+        pauseSong()
+        clearQueue()
+        PlayerController.stop()
+        PlayerController.release()
+
+        Log.d("NowPlayingViewModel", "Player dismissed and cleared")
+    }
+
+    fun formatDurationMs(durationMs: Int): String {
+        val totalSeconds = durationMs / 1000
+        val minutes = totalSeconds / 60
+        val seconds = totalSeconds % 60
+        return "%d:%02d".format(minutes, seconds)
+    }
+
+    fun restartMediaPlayerForAudioRouting(context: Context) {
+        val currentSong = _currSong.value
+        if (currentSong == null) {
+            Log.d("NowPlayingViewModel", "⚠️ No current song to restart")
+            return
+        }
+
+        Log.d("NowPlayingViewModel", "🔄 Restarting MediaPlayer for audio routing change")
+
+        // Save current playback state
+        val wasPlaying = _isPlaying.value == true
+        val currentPosition = if (PlayerController.isPlaying()) {
+            PlayerController.getCurrentPosition()
+        } else 0
+
+        Log.d("NowPlayingViewModel", "💾 Saved state - Position: $currentPosition, Playing: $wasPlaying")
+
+        try {
+            // Stop current playback gracefully
+            if (PlayerController.isPlaying()) {
+                PlayerController.pause()
+            }
+
+            // Small delay to ensure audio routing is stable
+            Handler(Looper.getMainLooper()).postDelayed({
+
+                Log.d("NowPlayingViewModel", "🎵 Restarting playback...")
+
+                // Restart playback
+                val success = PlayerController.play(currentSong, context)
+
+                if (success) {
+                    // Set up callback to restore state when MediaPlayer is ready
+                    PlayerController.onPrepared = {
+                        Log.d("NowPlayingViewModel", "🎵 MediaPlayer prepared, restoring state")
+
+                        // Restore position
+                        if (currentPosition > 0 && currentPosition < PlayerController.getDuration()) {
+                            PlayerController.seekTo(currentPosition)
+                            Log.d("NowPlayingViewModel", "⏭️ Restored position: $currentPosition")
+                        }
+
+                        // Restore play state
+                        if (wasPlaying) {
+                            PlayerController.resume()
+                            _isPlaying.postValue(true)
+                            Log.d("NowPlayingViewModel", "▶️ Resumed playback")
+                        } else {
+                            PlayerController.pause()
+                            _isPlaying.postValue(false)
+                            Log.d("NowPlayingViewModel", "⏸️ Kept paused state")
+                        }
+
+                        // Update duration if needed
+                        val duration = PlayerController.getDuration()
+                        if (duration > 0) {
+                            _currSong.postValue(_currSong.value?.copy(duration = duration))
+                        }
+
+                        // Notify audio routing that restart is complete
+                        audioRoutingViewModel.onMediaPlayerRestarted()
+                    }
+
+                    Log.d("NowPlayingViewModel", "✅ MediaPlayer restart initiated successfully")
+                } else {
+                    Log.e("NowPlayingViewModel", "❌ Failed to restart MediaPlayer")
+                    _isPlaying.postValue(false)
+                    _errorMessage.postValue("Failed to restart playback after audio routing change")
+                }
+
+            }, 300) // Increased delay for better stability
+
+        } catch (e: Exception) {
+            Log.e("NowPlayingViewModel", "❌ Error restarting MediaPlayer: ${e.message}")
+            _isPlaying.postValue(false)
+            _errorMessage.postValue("Error restarting playback: ${e.message}")
+        }
+    }
+
+    fun selectAudioDevice(device: AudioDevice): Boolean {
+        return audioRoutingViewModel.selectAudioDevice(device)
+    }
+
+    /**
+     * Get available audio devices
+     */
+    fun getAvailableAudioDevices(): LiveData<List<AudioDevice>> {
+        return audioRoutingViewModel.availableDevices
+    }
+
+    /**
+     * Get active audio device
+     */
+    fun getActiveAudioDevice(): LiveData<AudioDevice?> {
+        return audioRoutingViewModel.activeDevice
+    }
+
+    /**
+     * Auto-select best available audio device
+     */
+    fun autoSelectBestAudioDevice(): Boolean {
+        return audioRoutingViewModel.autoSelectBestDevice()
+    }
     override fun onCleared() {
         super.onCleared()
-        PlayerController.release()
+        stopPositionTracking()
+        // ===== END ANALYTICS SESSION WHEN VIEWMODEL IS CLEARED =====
+        endCurrentAnalyticsSession()
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/ui/player/PlayerController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.player\r\n\r\nimport android.content.Context\r\nimport android.content.res.AssetFileDescriptor\r\nimport android.media.MediaPlayer\r\nimport android.net.Uri\r\nimport com.tubes.purry.data.model.Song\r\nimport android.util.Log\r\nimport androidx.core.net.toUri\r\nimport com.tubes.purry.ui.player.NowPlayingViewModel.RepeatMode\r\n\r\n\r\nobject PlayerController {\r\n    private var mediaPlayer: MediaPlayer? = null\r\n    private var isPreparing = false\r\n    private var currentlyPlaying: Song? = null\r\n    var onCompletion: (() -> Unit)? = null\r\n\r\n    fun play(song: Song, context: Context): Boolean {\r\n        if (currentlyPlaying?.id == song.id && isPlaying()) {\r\n            Log.d(\"PlayerController\", \"Same song already playing.\")\r\n            return true\r\n        }\r\n\r\n        if (isPreparing) {\r\n            Log.d(\"PlayerController\", \"Still preparing previous song. Skipping.\")\r\n            return false\r\n        }\r\n\r\n        Log.d(\"PlayerController\", \"Preparing song: ${song.title}\")\r\n        release()\r\n        isPreparing = true\r\n        currentlyPlaying = song\r\n\r\n        try {\r\n            val appContext = context.applicationContext\r\n            mediaPlayer = MediaPlayer().apply {\r\n                setOnPreparedListener {\r\n                    Log.d(\"PlayerController\", \"Prepared, starting playback: ${song.title}\")\r\n                    isPreparing = false\r\n                    start()\r\n                }\r\n\r\n                setOnCompletionListener {\r\n                    Log.d(\"PlayerController\", \"Playback completed for: ${song.title}\")\r\n                    onCompletion?.invoke()\r\n                }\r\n\r\n                setOnErrorListener { _, what, extra ->\r\n                    Log.e(\"PlayerController\", \"MediaPlayer error: what=$what, extra=$extra\")\r\n                    isPreparing = false\r\n                    release()\r\n                    true\r\n                }\r\n\r\n                when {\r\n                    song.resId != null -> {\r\n                        val afd = appContext.resources.openRawResourceFd(song.resId)\r\n                        setDataSource(afd.fileDescriptor, afd.startOffset, afd.length)\r\n                        afd.close()\r\n                    }\r\n                    !song.filePath.isNullOrBlank() -> {\r\n                        try {\r\n                            setDataSource(appContext, song.filePath.toUri())\r\n                        } catch (e: SecurityException) {\r\n                            Log.e(\"PlayerController\", \"SecurityException: ${e.message}\")\r\n                            isPreparing = false\r\n                            release()\r\n                            return false\r\n                        }\r\n                    }\r\n                    else -> {\r\n                        Log.e(\"PlayerController\", \"Song has no valid source.\")\r\n                        isPreparing = false\r\n                        release()\r\n                        return false\r\n                    }\r\n                }\r\n\r\n                prepareAsync()\r\n            }\r\n\r\n            return true // sukses jika tidak kena exception\r\n        } catch (e: Exception) {\r\n            Log.e(\"PlayerController\", \"Error playing song: ${e.message}\")\r\n            isPreparing = false\r\n            release()\r\n            return false\r\n        }\r\n    }\r\n\r\n    fun pause() {\r\n        if (isPlaying()) {\r\n            mediaPlayer?.pause()\r\n            Log.d(\"PlayerController\", \"Playback paused\")\r\n        }\r\n    }\r\n\r\n    fun resume() {\r\n        if (!isPlaying()) {\r\n            mediaPlayer?.start()\r\n            Log.d(\"PlayerController\", \"Playback resumed\")\r\n        }\r\n    }\r\n\r\n    fun release() {\r\n        try {\r\n            Log.d(\"PlayerController\", \"Releasing media player\")\r\n            mediaPlayer?.release()\r\n        } catch (e: Exception) {\r\n            Log.w(\"PlayerController\", \"MediaPlayer release error: ${e.message}\")\r\n        } finally {\r\n            mediaPlayer = null\r\n            isPreparing = false\r\n            currentlyPlaying = null\r\n        }\r\n    }\r\n\r\n    fun isPlaying(): Boolean {\r\n        return mediaPlayer?.isPlaying == true\r\n    }\r\n\r\n    fun getCurrentPosition(): Int = mediaPlayer?.currentPosition ?: 0\r\n\r\n    fun seekTo(position: Int) {\r\n        mediaPlayer?.seekTo(position)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/player/PlayerController.kt b/app/src/main/java/com/tubes/purry/ui/player/PlayerController.kt
--- a/app/src/main/java/com/tubes/purry/ui/player/PlayerController.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/player/PlayerController.kt	(date 1748195617128)
@@ -1,94 +1,135 @@
 package com.tubes.purry.ui.player
 
 import android.content.Context
+import android.content.Intent
 import android.content.res.AssetFileDescriptor
+import android.media.AudioAttributes
 import android.media.MediaPlayer
 import android.net.Uri
+import android.os.FileUtils
 import com.tubes.purry.data.model.Song
 import android.util.Log
 import androidx.core.net.toUri
 import com.tubes.purry.ui.player.NowPlayingViewModel.RepeatMode
+import com.tubes.purry.utils.MusicNotificationService
 
 
 object PlayerController {
     private var mediaPlayer: MediaPlayer? = null
     private var isPreparing = false
+    private var isPrepared = false
     private var currentlyPlaying: Song? = null
+
     var onCompletion: (() -> Unit)? = null
+    var onPrepared: (() -> Unit)? = null
+    var onDurationReady: ((Int) -> Unit)? = null
+    var onSeeked: ((Int) -> Unit)? = null
+
+    fun getCurrentSong(): Song? {
+        return currentlyPlaying
+    }
 
     fun play(song: Song, context: Context): Boolean {
-        if (currentlyPlaying?.id == song.id && isPlaying()) {
-            Log.d("PlayerController", "Same song already playing.")
-            return true
+        Log.d("PlayerController", "Masuk play(), judul: ${song.title}, url: ${song.filePath}")
+
+        if (currentlyPlaying?.id == song.id) {
+            if (isPlaying()) {
+                Log.d("PlayerController", "Lagu sudah diputar")
+                return true
+            } else {
+                Log.d("PlayerController", "Lagu sama tapi belum play, lanjut prepare")
+            }
         }
+
 
         if (isPreparing) {
-            Log.d("PlayerController", "Still preparing previous song. Skipping.")
+            Log.d("PlayerController", "Masih mempersiapkan lagu sebelumnya")
             return false
         }
 
-        Log.d("PlayerController", "Preparing song: ${song.title}")
         release()
         isPreparing = true
+        isPrepared = false
         currentlyPlaying = song
 
         try {
-            val appContext = context.applicationContext
             mediaPlayer = MediaPlayer().apply {
-                setOnPreparedListener {
-                    Log.d("PlayerController", "Prepared, starting playback: ${song.title}")
+                setAudioAttributes(
+                    AudioAttributes.Builder()
+                        .setUsage(AudioAttributes.USAGE_MEDIA)
+                        .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)
+                        .build()
+                )
+
+                setOnPreparedListener { mp ->
+                    Log.d("PlayerController", "onPrepared terpanggil, mulai putar lagu")
                     isPreparing = false
+                    isPrepared = true
                     start()
+
+                    val duration = mp.duration
+                    Log.d("PlayerController", "Duration ready: $duration ms")
+                    onDurationReady?.invoke(duration)
+                    onPrepared?.invoke()
+
+                    context.startService(Intent(context, MusicNotificationService::class.java))
                 }
 
                 setOnCompletionListener {
-                    Log.d("PlayerController", "Playback completed for: ${song.title}")
+                    Log.d("PlayerController", "Lagu selesai diputar")
                     onCompletion?.invoke()
                 }
 
                 setOnErrorListener { _, what, extra ->
-                    Log.e("PlayerController", "MediaPlayer error: what=$what, extra=$extra")
+                    Log.e("PlayerController", "Error MediaPlayer: what=$what, extra=$extra")
                     isPreparing = false
+                    isPrepared = false
                     release()
                     true
                 }
 
-                when {
-                    song.resId != null -> {
-                        val afd = appContext.resources.openRawResourceFd(song.resId)
-                        setDataSource(afd.fileDescriptor, afd.startOffset, afd.length)
-                        afd.close()
+                try {
+                    val path = song.filePath ?: ""
+                    when {
+                        path.startsWith("http") -> {
+                            Log.d("PlayerController", "Streaming dari URL: $path")
+                            setDataSource(path)
+                        }
+                        path.startsWith("content://") -> {
+                            Log.d("PlayerController", "Memutar dari content:// URI")
+                            val uri = Uri.parse(path)
+                            context.contentResolver.openAssetFileDescriptor(uri, "r")?.use { afd ->
+                                setDataSource(afd.fileDescriptor, afd.startOffset, afd.length)
+                            } ?: throw IllegalArgumentException("AssetFileDescriptor null untuk URI: $uri")
+                        }
+                        path.isNotBlank() -> {
+                            Log.d("PlayerController", "Memutar dari file lokal: $path")
+                            setDataSource(path)
+                        }
+                        else -> throw IllegalArgumentException("filePath kosong atau tidak valid")
                     }
-                    !song.filePath.isNullOrBlank() -> {
-                        try {
-                            setDataSource(appContext, song.filePath.toUri())
-                        } catch (e: SecurityException) {
-                            Log.e("PlayerController", "SecurityException: ${e.message}")
-                            isPreparing = false
-                            release()
-                            return false
-                        }
-                    }
-                    else -> {
-                        Log.e("PlayerController", "Song has no valid source.")
-                        isPreparing = false
-                        release()
-                        return false
-                    }
+                } catch (e: Exception) {
+                    Log.e("PlayerController", "Gagal set data source: ${e.message}")
+                    isPreparing = false
+                    release()
+                    return false
                 }
 
+                Log.d("PlayerController", "Memanggil prepareAsync()")
                 prepareAsync()
             }
 
-            return true // sukses jika tidak kena exception
+            return true
         } catch (e: Exception) {
-            Log.e("PlayerController", "Error playing song: ${e.message}")
+            Log.e("PlayerController", "Exception luar: ${e.message}")
             isPreparing = false
+            isPrepared = false
             release()
             return false
         }
     }
 
+
     fun pause() {
         if (isPlaying()) {
             mediaPlayer?.pause()
@@ -97,32 +138,114 @@
     }
 
     fun resume() {
-        if (!isPlaying()) {
+        if (!isPlaying() && isPrepared) {
             mediaPlayer?.start()
             Log.d("PlayerController", "Playback resumed")
         }
     }
 
+    fun stop() {
+        try {
+            mediaPlayer?.apply {
+                if (isPlaying) {
+                    stop()
+                }
+                reset()
+                release()
+            }
+            mediaPlayer = null
+            currentlyPlaying = null
+            Log.d("PlayerController", "MediaPlayer stopped and released")
+        } catch (e: Exception) {
+            Log.e("PlayerController", "Error stopping MediaPlayer: ${e.message}")
+        }
+    }
+
     fun release() {
         try {
-            Log.d("PlayerController", "Releasing media player")
             mediaPlayer?.release()
         } catch (e: Exception) {
-            Log.w("PlayerController", "MediaPlayer release error: ${e.message}")
+            Log.w("PlayerController", "Release error: ${e.message}")
         } finally {
             mediaPlayer = null
             isPreparing = false
+            isPrepared = false
             currentlyPlaying = null
         }
     }
 
     fun isPlaying(): Boolean {
-        return mediaPlayer?.isPlaying == true
+        return isPrepared && mediaPlayer?.isPlaying == true
+    }
+
+    fun getCurrentPosition(): Int {
+        return try {
+            if (isPrepared && mediaPlayer != null) {
+                val position = mediaPlayer?.currentPosition ?: 0
+//                Log.d("PlayerController", "getCurrentPosition: $position ms")
+                position
+            } else {
+                0
+            }
+        } catch (e: Exception) {
+            Log.e("PlayerController", "Error getting position: ${e.message}")
+            0
+        }
     }
 
-    fun getCurrentPosition(): Int = mediaPlayer?.currentPosition ?: 0
+    fun getDuration(): Int {
+        return try {
+            if (isPrepared && mediaPlayer != null) {
+                val duration = mediaPlayer?.duration ?: 0
+//                Log.d("PlayerController", "getDuration: $duration ms")
+                duration
+            } else {
+                Log.d("PlayerController", "getDuration: not prepared or null player")
+                0
+            }
+        } catch (e: Exception) {
+            Log.e("PlayerController", "Error getting duration: ${e.message}")
+            0
+        }
+    }
 
     fun seekTo(position: Int) {
-        mediaPlayer?.seekTo(position)
+        try {
+            if (isPrepared && mediaPlayer != null) {
+                mediaPlayer?.seekTo(position)
+//                Log.d("PlayerController", "Seeked to: $position ms")
+                onSeeked?.invoke(position)
+            } else {
+                Log.w("PlayerController", "Cannot seek: not prepared or null player")
+            }
+        } catch (e: Exception) {
+            Log.e("PlayerController", "Error seeking: ${e.message}")
+        }
+    }
+
+
+    fun ensureDurationAvailable(): Int {
+        return try {
+            if (isPrepared && mediaPlayer != null) {
+                val duration = mediaPlayer?.duration ?: 0
+                if (duration > 0) {
+                    Log.d("PlayerController", "Duration ensured: $duration ms")
+                    duration
+                } else {
+                    Log.w("PlayerController", "Duration still not available")
+                    0
+                }
+            } else {
+                0
+            }
+        } catch (e: Exception) {
+            Log.e("PlayerController", "Error ensuring duration: ${e.message}")
+            0
+        }
+    }
+
+
+    fun getCurrentSong(): Song? {
+        return currentlyPlaying
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/ui/home/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.home\r\n\r\nimport android.app.AlertDialog\r\nimport android.graphics.Canvas\r\nimport android.graphics.Paint\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.FrameLayout\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.tubes.purry.MainActivity\r\nimport com.tubes.purry.data.local.AppDatabase\r\nimport androidx.recyclerview.widget.ItemTouchHelper\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.tubes.purry.R\r\nimport com.tubes.purry.ui.library.SongViewModel\r\nimport com.tubes.purry.ui.library.SongViewModelFactory\r\nimport com.tubes.purry.ui.library.SongCardAdapter\r\nimport com.tubes.purry.ui.library.SongListAdapter\r\nimport com.tubes.purry.ui.player.NowPlayingViewModel\r\nimport com.tubes.purry.ui.player.NowPlayingViewModelFactory\r\nimport com.tubes.purry.databinding.FragmentHomeBinding\r\nimport com.tubes.purry.data.model.Song\r\nimport com.tubes.purry.ui.profile.ProfileViewModel\r\nimport com.tubes.purry.ui.library.EditSongBottomSheetFragment\r\nimport com.tubes.purry.ui.player.MiniPlayerFragment\r\nimport androidx.core.graphics.toColorInt\r\n\r\n\r\nclass HomeFragment : Fragment() {\r\n\r\n    private lateinit var binding: FragmentHomeBinding\r\n    private val viewModel: SongViewModel by viewModels {\r\n        SongViewModelFactory(requireContext())\r\n    }\r\n    private var allSongs: List<Song> = emptyList()\r\n\r\n    private lateinit var newSongsAdapter: SongCardAdapter\r\n    private lateinit var recentSongsAdapter: SongListAdapter\r\n    private lateinit var nowPlayingViewModel: NowPlayingViewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentHomeBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        val context = requireContext().applicationContext\r\n        val db = AppDatabase.getDatabase(context)\r\n        val likedSongDao = db.LikedSongDao()\r\n        val songDao = db.songDao()\r\n\r\n        // Get ProfileViewModel using default factory\r\n        val profileViewModel: ProfileViewModel = ViewModelProvider(requireActivity())[ProfileViewModel::class.java]\r\n\r\n        // Use custom factory\r\n        val factory = NowPlayingViewModelFactory(likedSongDao, songDao, profileViewModel)\r\n        nowPlayingViewModel = ViewModelProvider(requireActivity(), factory)[NowPlayingViewModel::class.java]\r\n\r\n        setupAdapters()\r\n        observeSongs()\r\n        enableSwipeToAddToQueue(binding.rvRecentlyPlayed, recentSongsAdapter, nowPlayingViewModel)\r\n    }\r\n\r\n    private fun setupAdapters() {\r\n        newSongsAdapter = SongCardAdapter { song ->\r\n            onSongClicked(song)\r\n        }\r\n\r\n        recentSongsAdapter = SongListAdapter(\r\n            onClick = { song -> onSongClicked(song) },\r\n            onEdit = {song -> showEditBottomSheet(song)},\r\n            onDelete = { song -> confirmDelete(song) }\r\n        )\r\n\r\n\r\n        binding.rvNewSongs.apply {\r\n            adapter = newSongsAdapter\r\n            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)\r\n        }\r\n\r\n        binding.rvRecentlyPlayed.apply {\r\n            adapter = recentSongsAdapter\r\n            layoutManager = LinearLayoutManager(context)\r\n        }\r\n    }\r\n\r\n    private fun confirmDelete(song: Song) {\r\n        AlertDialog.Builder(requireContext())\r\n            .setTitle(\"Delete Song\")\r\n            .setMessage(\"Are you sure you want to delete \\\"${song.title}\\\"?\")\r\n            .setPositiveButton(\"Yes\") { _, _ ->\r\n                viewModel.deleteSong(song)\r\n                nowPlayingViewModel.removeFromQueue(song.id, requireContext())\r\n            }\r\n            .setNegativeButton(\"No\", null)\r\n            .show()\r\n    }\r\n\r\n    private fun showEditBottomSheet(song: Song) {\r\n        val editSheet = EditSongBottomSheetFragment(song)\r\n        editSheet.show(childFragmentManager, \"EditSongBottomSheet\")\r\n    }\r\n\r\n    private fun observeSongs() {\r\n        viewModel.newSongs.observe(viewLifecycleOwner) { songs ->\r\n            allSongs = songs\r\n            newSongsAdapter.submitList(songs)\r\n        }\r\n\r\n        viewModel.recentlyPlayed.observe(viewLifecycleOwner) { songs ->\r\n            recentSongsAdapter.submitList(songs)\r\n        }\r\n    }\r\n\r\n    private fun onSongClicked(song: Song) {\r\n        Log.d(\"HomeFragment\", \"Song clicked: ${song.title}\")\r\n        nowPlayingViewModel.setQueueFromClickedSong(song, allSongs, requireContext())\r\n        nowPlayingViewModel.playSong(song, requireContext())\r\n        viewModel.markAsPlayed(song)\r\n\r\n        val fragmentManager = requireActivity().supportFragmentManager\r\n\r\n        // Check if MiniPlayerFragment is already attached\r\n        val existingFragment = fragmentManager.findFragmentById(R.id.miniPlayerContainer)\r\n        if (existingFragment == null) {\r\n            fragmentManager.beginTransaction()\r\n                .replace(R.id.miniPlayerContainer, MiniPlayerFragment())\r\n                .commit()\r\n        }\r\n\r\n        // Make the container visible with fade-in if it's not already\r\n        val container = requireActivity().findViewById<FrameLayout>(R.id.miniPlayerContainer)\r\n        if (container.visibility != View.VISIBLE) {\r\n            container.alpha = 0f\r\n            container.visibility = View.VISIBLE\r\n            container.animate().alpha(1f).setDuration(250).start()\r\n        }\r\n\r\n//        (requireActivity() as MainActivity).showMiniPlayer()\r\n    }\r\n\r\n    private fun enableSwipeToAddToQueue(\r\n        recyclerView: RecyclerView,\r\n        adapter: SongListAdapter,\r\n        nowPlayingViewModel: NowPlayingViewModel\r\n    ) {\r\n        val paint = Paint().apply { color = \"#4CAF50\".toColorInt() }\r\n\r\n        val itemTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT) {\r\n            override fun onMove(\r\n                recyclerView: RecyclerView,\r\n                viewHolder: RecyclerView.ViewHolder,\r\n                target: RecyclerView.ViewHolder\r\n            ) = false\r\n\r\n            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {\r\n                val position = viewHolder.adapterPosition\r\n                val song = adapter.getSongAt(position)\r\n                nowPlayingViewModel.addToQueue(song, requireContext())\r\n                adapter.notifyItemChanged(position)\r\n                Toast.makeText(requireContext(), \"Added to queue: ${song.title}\", Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n            override fun onChildDraw(\r\n                c: Canvas,\r\n                recyclerView: RecyclerView,\r\n                viewHolder: RecyclerView.ViewHolder,\r\n                dX: Float,\r\n                dY: Float,\r\n                actionState: Int,\r\n                isCurrentlyActive: Boolean\r\n            ) {\r\n                if (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {\r\n                    val itemView: View = viewHolder.itemView\r\n                    c.drawRect(\r\n                        itemView.right.toFloat() + dX,\r\n                        itemView.top.toFloat(),\r\n                        itemView.right.toFloat(),\r\n                        itemView.bottom.toFloat(),\r\n                        paint\r\n                    )\r\n                }\r\n                super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive)\r\n            }\r\n        })\r\n        itemTouchHelper.attachToRecyclerView(recyclerView)\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/home/HomeFragment.kt b/app/src/main/java/com/tubes/purry/ui/home/HomeFragment.kt
--- a/app/src/main/java/com/tubes/purry/ui/home/HomeFragment.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/home/HomeFragment.kt	(date 1748195617114)
@@ -1,11 +1,13 @@
 package com.tubes.purry.ui.home
 
 import android.app.AlertDialog
+import android.content.Intent
 import android.graphics.Canvas
 import android.graphics.Paint
 import android.os.Bundle
 import android.util.Log
 import android.view.LayoutInflater
+import androidx.navigation.fragment.findNavController
 import android.view.View
 import android.view.ViewGroup
 import android.widget.FrameLayout
@@ -14,7 +16,6 @@
 import androidx.fragment.app.viewModels
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.lifecycle.ViewModelProvider
-import com.tubes.purry.MainActivity
 import com.tubes.purry.data.local.AppDatabase
 import androidx.recyclerview.widget.ItemTouchHelper
 import androidx.recyclerview.widget.RecyclerView
@@ -24,26 +25,33 @@
 import com.tubes.purry.ui.library.SongCardAdapter
 import com.tubes.purry.ui.library.SongListAdapter
 import com.tubes.purry.ui.player.NowPlayingViewModel
-import com.tubes.purry.ui.player.NowPlayingViewModelFactory
 import com.tubes.purry.databinding.FragmentHomeBinding
 import com.tubes.purry.data.model.Song
 import com.tubes.purry.ui.profile.ProfileViewModel
 import com.tubes.purry.ui.library.EditSongBottomSheetFragment
 import com.tubes.purry.ui.player.MiniPlayerFragment
 import androidx.core.graphics.toColorInt
-
+import androidx.core.os.bundleOf
+import com.tubes.purry.data.model.ChartItem
+import com.tubes.purry.ui.chart.ChartAdapter
+import com.tubes.purry.PurrytifyApplication
+import com.tubes.purry.data.model.RecommendationItem
+import com.tubes.purry.data.model.RecommendationType
+import com.tubes.purry.ui.recommendation.RecommendationDetailActivity
+import com.tubes.purry.utils.SessionManager
 
 class HomeFragment : Fragment() {
-
     private lateinit var binding: FragmentHomeBinding
     private val viewModel: SongViewModel by viewModels {
         SongViewModelFactory(requireContext())
     }
     private var allSongs: List<Song> = emptyList()
-
     private lateinit var newSongsAdapter: SongCardAdapter
     private lateinit var recentSongsAdapter: SongListAdapter
     private lateinit var nowPlayingViewModel: NowPlayingViewModel
+    private lateinit var chartAdapter: ChartAdapter
+    private lateinit var recommendationAdapter: RecommendationAdapter
+    private lateinit var sessionManager: SessionManager
 
     override fun onCreateView(
         inflater: LayoutInflater, container: ViewGroup?,
@@ -55,20 +63,13 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-
-        val context = requireContext().applicationContext
-        val db = AppDatabase.getDatabase(context)
-        val likedSongDao = db.LikedSongDao()
-        val songDao = db.songDao()
+        sessionManager = SessionManager(requireContext())
 
-        // Get ProfileViewModel using default factory
-        val profileViewModel: ProfileViewModel = ViewModelProvider(requireActivity())[ProfileViewModel::class.java]
-
-        // Use custom factory
-        val factory = NowPlayingViewModelFactory(likedSongDao, songDao, profileViewModel)
-        nowPlayingViewModel = ViewModelProvider(requireActivity(), factory)[NowPlayingViewModel::class.java]
+        nowPlayingViewModel = (requireActivity().application as PurrytifyApplication).nowPlayingViewModel
 
         setupAdapters()
+        setupChartSection()
+        setupRecommendationSection()
         observeSongs()
         enableSwipeToAddToQueue(binding.rvRecentlyPlayed, recentSongsAdapter, nowPlayingViewModel)
     }
@@ -80,11 +81,10 @@
 
         recentSongsAdapter = SongListAdapter(
             onClick = { song -> onSongClicked(song) },
-            onEdit = {song -> showEditBottomSheet(song)},
+            onEdit = { song -> showEditBottomSheet(song) },
             onDelete = { song -> confirmDelete(song) }
         )
 
-
         binding.rvNewSongs.apply {
             adapter = newSongsAdapter
             layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
@@ -102,7 +102,7 @@
             .setMessage("Are you sure you want to delete \"${song.title}\"?")
             .setPositiveButton("Yes") { _, _ ->
                 viewModel.deleteSong(song)
-                nowPlayingViewModel.removeFromQueue(song.id, requireContext())
+                nowPlayingViewModel.removeFromQueue(song.id.toString(), requireContext())
             }
             .setNegativeButton("No", null)
             .show()
@@ -129,26 +129,6 @@
         nowPlayingViewModel.setQueueFromClickedSong(song, allSongs, requireContext())
         nowPlayingViewModel.playSong(song, requireContext())
         viewModel.markAsPlayed(song)
-
-        val fragmentManager = requireActivity().supportFragmentManager
-
-        // Check if MiniPlayerFragment is already attached
-        val existingFragment = fragmentManager.findFragmentById(R.id.miniPlayerContainer)
-        if (existingFragment == null) {
-            fragmentManager.beginTransaction()
-                .replace(R.id.miniPlayerContainer, MiniPlayerFragment())
-                .commit()
-        }
-
-        // Make the container visible with fade-in if it's not already
-        val container = requireActivity().findViewById<FrameLayout>(R.id.miniPlayerContainer)
-        if (container.visibility != View.VISIBLE) {
-            container.alpha = 0f
-            container.visibility = View.VISIBLE
-            container.animate().alpha(1f).setDuration(250).start()
-        }
-
-//        (requireActivity() as MainActivity).showMiniPlayer()
     }
 
     private fun enableSwipeToAddToQueue(
@@ -198,4 +178,80 @@
         itemTouchHelper.attachToRecyclerView(recyclerView)
     }
 
+    private fun setupChartSection() {
+        val chartItems = listOf(
+            ChartItem(
+                title = "Top 50 Global",
+                description = "Most played globally",
+                imageRes = R.drawable.cov_playlist_global,
+                isGlobal = true
+            ),
+            ChartItem(
+                title = "Top 50 Indonesia",
+                description = "Most played in Indonesia",
+                imageRes = R.drawable.cov_playlist_around,
+                isGlobal = false
+            )
+        )
+
+        chartAdapter = ChartAdapter(chartItems) { item ->
+            val navController = requireActivity()
+                .supportFragmentManager
+                .findFragmentById(R.id.nav_host_fragment)
+                ?.findNavController()
+
+            navController?.navigate(
+                R.id.topChartDetailFragment,
+                bundleOf("isGlobal" to item.isGlobal)
+            )
+        }
+
+        binding.rvCharts.apply {
+            adapter = chartAdapter
+            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
+        }
+    }
+
+    private fun setupRecommendationSection() {
+        val userId = sessionManager.getUserId()
+        val userName = "User"
+
+        val recommendationItems = listOf(
+            RecommendationItem(
+                id = "liked_songs_mix",
+                title = "Liked Songs Mix",
+                description = "Based on your favorites",
+                imageRes = R.drawable.cov_liked_mix,
+                type = RecommendationType.LIKED_SONGS_MIX
+            ),
+            RecommendationItem(
+                id = "discovery_mix",
+                title = "Discover Weekly",
+                description = "New music for you",
+                imageRes = R.drawable.cov_discover_weekly,
+                type = RecommendationType.DISCOVERY_MIX
+            ),
+            RecommendationItem(
+                id = "recently_played_mix",
+                title = "On Repeat",
+                description = "Songs you've been playing",
+                imageRes = R.drawable.cov_on_repeat,
+                type = RecommendationType.RECENTLY_PLAYED_MIX
+            )
+        )
+
+        recommendationAdapter = RecommendationAdapter(recommendationItems) { item ->
+            val intent = Intent(requireContext(), RecommendationDetailActivity::class.java)
+            intent.putExtra("recommendation_type", item.type.name)
+            intent.putExtra("title", item.title)
+            intent.putExtra("description", item.description)
+            intent.putExtra("image_res", item.imageRes)
+            startActivity(intent)
+        }
+
+        binding.rvRecommendations.apply {
+            adapter = recommendationAdapter
+            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
+        }
+    }
 }
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
deleted file mode 100644
--- a/.idea/deploymentTargetSelector.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ /dev/null	(revision f9e98528dd956b47022f07d100c5ddc413406443)
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetSelector">
-    <selectionStates>
-      <SelectionState runConfigName="app">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-    </selectionStates>
-  </component>
-</project>
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/ui/profile/ProfileFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.profile\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.bumptech.glide.Glide\r\nimport com.tubes.purry.R\r\nimport com.tubes.purry.data.local.AppDatabase\r\nimport com.tubes.purry.databinding.FragmentProfileBinding\r\nimport com.tubes.purry.data.repository.SongRepository\r\nimport com.tubes.purry.ui.auth.LoginActivity\r\nimport com.tubes.purry.utils.NetworkUtil\r\nimport com.tubes.purry.utils.SessionManager\r\n\r\nclass ProfileFragment : Fragment() {\r\n\r\n    private var _binding: FragmentProfileBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private lateinit var viewModel: ProfileViewModel\r\n    private lateinit var sessionManager: SessionManager\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentProfileBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        sessionManager = SessionManager(requireContext())\r\n\r\n        val factory = ProfileViewModelFactory(requireContext())\r\n        viewModel = ViewModelProvider(this, factory)[ProfileViewModel::class.java]\r\n\r\n        binding.btnLogout.setOnClickListener {\r\n            sessionManager.clearTokens()\r\n            navigateToLogin()\r\n        }\r\n\r\n        observeViewModel()\r\n\r\n        if (NetworkUtil.isNetworkAvailable(requireContext())) {\r\n            loadProfileData()\r\n        } else {\r\n            showNetworkError()\r\n        }\r\n    }\r\n\r\n    private fun loadProfileData() {\r\n        val token = sessionManager.fetchAuthToken()\r\n        if (token != null) {\r\n            Log.d(\"ProfileFragment\", \"Token exists, attempting to load profile\")\r\n            viewModel.getProfileData()\r\n        } else {\r\n            Log.d(\"ProfileFragment\", \"No token found, navigating to login\")\r\n            navigateToLogin()\r\n        }\r\n    }\r\n\r\n    private fun observeViewModel() {\r\n        viewModel.profileData.observe(viewLifecycleOwner) { profile ->\r\n            profile?.let {\r\n                // 1. Tampilkan ke UI\r\n                binding.apply {\r\n                    txtUsername.text = it.username\r\n                    txtLocation.text = it.location\r\n\r\n                    val imageUrl = \"http://34.101.226.132:3000/uploads/profile-picture/${it.profilePhoto}\"\r\n                    Glide.with(this@ProfileFragment)\r\n                        .load(imageUrl)\r\n                        .placeholder(R.drawable.profile_placeholder)\r\n                        .error(R.drawable.profile_placeholder)\r\n                        .circleCrop()\r\n                        .into(imgProfile)\r\n                }\r\n\r\n                // 2. ⬅\uFE0F Panggil untuk update song stats by user ID\r\n                viewModel.fetchSongStats(it.id)\r\n            }\r\n        }\r\n\r\n        viewModel.songStats.observe(viewLifecycleOwner) { stats ->\r\n            binding.apply {\r\n                txtSongsCount.text = stats.totalCount.toString()\r\n                txtLikedCount.text = stats.likedCount.toString()\r\n                txtListenedCount.text = stats.listenedCount.toString()\r\n            }\r\n        }\r\n\r\n        viewModel.errorMessage.observe(viewLifecycleOwner) { error ->\r\n            Toast.makeText(context, error, Toast.LENGTH_LONG).show()\r\n        }\r\n\r\n        viewModel.loading.observe(viewLifecycleOwner) { isLoading ->\r\n            binding.progressBar.visibility = if (isLoading) View.VISIBLE else View.GONE\r\n        }\r\n    }\r\n\r\n    private fun showNetworkError() {\r\n        binding.networkErrorLayout.visibility = View.VISIBLE\r\n        binding.profileLayout.visibility = View.GONE\r\n    }\r\n\r\n\r\n\r\n    private fun navigateToLogin() {\r\n        val intent = Intent(requireContext(), LoginActivity::class.java)\r\n        startActivity(intent)\r\n        requireActivity().finish()\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/profile/ProfileFragment.kt b/app/src/main/java/com/tubes/purry/ui/profile/ProfileFragment.kt
--- a/app/src/main/java/com/tubes/purry/ui/profile/ProfileFragment.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/profile/ProfileFragment.kt	(date 1748195617130)
@@ -9,14 +9,24 @@
 import android.widget.Toast
 import androidx.fragment.app.Fragment
 import androidx.lifecycle.ViewModelProvider
+import androidx.lifecycle.lifecycleScope
 import com.bumptech.glide.Glide
 import com.tubes.purry.R
 import com.tubes.purry.data.local.AppDatabase
+import com.tubes.purry.data.model.MonthlyAnalytics
+import com.tubes.purry.data.repository.AnalyticsRepository
 import com.tubes.purry.databinding.FragmentProfileBinding
 import com.tubes.purry.data.repository.SongRepository
 import com.tubes.purry.ui.auth.LoginActivity
+import com.tubes.purry.ui.analytics.SoundCapsuleActivity
 import com.tubes.purry.utils.NetworkUtil
 import com.tubes.purry.utils.SessionManager
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+import java.text.SimpleDateFormat
+import java.util.Date
+import java.util.Locale
 
 class ProfileFragment : Fragment() {
 
@@ -26,6 +36,9 @@
     private lateinit var viewModel: ProfileViewModel
     private lateinit var sessionManager: SessionManager
 
+    // Add a constant for request code
+    private val EDIT_PROFILE_REQUEST_CODE = 100
+
     override fun onCreateView(
         inflater: LayoutInflater,
         container: ViewGroup?,
@@ -40,14 +53,10 @@
 
         sessionManager = SessionManager(requireContext())
 
-        val factory = ProfileViewModelFactory(requireContext())
+        val factory = ProfileViewModelFactory(requireActivity().application)
         viewModel = ViewModelProvider(this, factory)[ProfileViewModel::class.java]
 
-        binding.btnLogout.setOnClickListener {
-            sessionManager.clearTokens()
-            navigateToLogin()
-        }
-
+        setupClickListeners()
         observeViewModel()
 
         if (NetworkUtil.isNetworkAvailable(requireContext())) {
@@ -57,6 +66,47 @@
         }
     }
 
+    private fun setupClickListeners() {
+        // Set up logout button
+        binding.btnLogout.setOnClickListener {
+            com.tubes.purry.ui.player.PlayerController.release()
+            sessionManager.clearTokens()
+            navigateToLogin()
+        }
+
+        // Set up edit profile button
+        binding.btnEditProfile.setOnClickListener {
+            navigateToEditProfile()
+        }
+
+        // ===== ADD SOUND CAPSULE BUTTON CLICK =====
+        binding.cardSoundCapsule.setOnClickListener {
+            openSoundCapsule()
+        }
+    }
+
+    private fun navigateToEditProfile() {
+        val intent = Intent(requireContext(), EditProfileActivity::class.java)
+        startActivityForResult(intent, EDIT_PROFILE_REQUEST_CODE)
+    }
+
+    // ===== ADD SOUND CAPSULE NAVIGATION =====
+    private fun openSoundCapsule() {
+        val intent = Intent(requireContext(), SoundCapsuleActivity::class.java)
+        startActivity(intent)
+    }
+
+    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
+        super.onActivityResult(requestCode, resultCode, data)
+
+        if (requestCode == EDIT_PROFILE_REQUEST_CODE) {
+            // Refresh profile data after returning from edit screen
+            if (NetworkUtil.isNetworkAvailable(requireContext())) {
+                loadProfileData()
+            }
+        }
+    }
+
     private fun loadProfileData() {
         val token = sessionManager.fetchAuthToken()
         if (token != null) {
@@ -74,7 +124,8 @@
                 // 1. Tampilkan ke UI
                 binding.apply {
                     txtUsername.text = it.username
-                    txtLocation.text = it.location
+                    // Convert country code to country name for better display
+                    txtLocation.text = getCountryNameFromCode(it.location)
 
                     val imageUrl = "http://34.101.226.132:3000/uploads/profile-picture/${it.profilePhoto}"
                     Glide.with(this@ProfileFragment)
@@ -87,6 +138,9 @@
 
                 // 2. ⬅️ Panggil untuk update song stats by user ID
                 viewModel.fetchSongStats(it.id)
+
+                // ===== 3. OBSERVE REAL-TIME ANALYTICS =====
+                observeRealTimeAnalytics(it.id)
             }
         }
 
@@ -107,12 +161,115 @@
         }
     }
 
+    // ===== ADD REAL-TIME ANALYTICS OBSERVER =====
+//    private fun observeRealTimeAnalytics(userId: Int) {
+//        try {
+//            viewModel.getCurrentMonthAnalytics(userId).observe(viewLifecycleOwner) { analytics ->
+//                // Update Sound Capsule summary in real-time
+//                binding.apply {
+//                    tvAnalyticsSummary.text = when {
+//                        analytics.totalMinutesListened > 0 -> {
+//                            "${analytics.totalMinutesListened} minutes this month"
+//                        }
+//                        else -> "Start listening to see your analytics"
+//                    }
+//
+//                    // Update time listened display if available
+//                    if (analytics.totalMinutesListened > 0) {
+//                        tvTimeListened.text = "${analytics.totalMinutesListened} min"
+//                        tvTimeListened.visibility = View.VISIBLE
+//                    } else {
+//                        tvTimeListened.visibility = View.GONE
+//                    }
+//                }
+//            }
+//        } catch (e: Exception) {
+//            Log.e("ProfileFragment", "Error observing analytics: ${e.message}")
+//            // Fallback - set default text
+//            binding.tvAnalyticsSummary.text = "View your music analytics"
+//        }
+//    }
+
+    private fun observeRealTimeAnalytics(userId: Int) {
+        // Simple approach: Load once on profile view, refresh on resume
+        loadAnalyticsSummary(userId)
+    }
+
+    override fun onResume() {
+        super.onResume()
+
+        // Refresh analytics when returning to profile
+        sessionManager.getUserId()?.let { userId ->
+            loadAnalyticsSummary(userId)
+        }
+    }
+
+    private fun loadAnalyticsSummary(userId: Int) {
+        // Use viewLifecycleOwner.lifecycleScope to prevent cancellation
+        viewLifecycleOwner.lifecycleScope.launch {
+            try {
+                val database = AppDatabase.getDatabase(requireContext())
+                val analyticsDao = database.analyticsDao()
+                val songDao = database.songDao()
+                val analyticsRepository = AnalyticsRepository(analyticsDao, songDao)
+
+                val currentMonth = SimpleDateFormat("yyyy-MM", Locale.getDefault()).format(Date())
+                Log.d("ProfileAnalytics", "Loading analytics for user $userId, month $currentMonth")
+
+                val analytics = withContext(Dispatchers.IO) {
+                    analyticsRepository.getMonthlyAnalytics(userId, currentMonth)
+                }
+
+                // Update UI on main thread
+                withContext(Dispatchers.Main) {
+                    updateAnalyticsUI(analytics)
+                }
+
+                Log.d("ProfileAnalytics", "Analytics loaded successfully: ${analytics.totalMinutesListened} minutes")
+
+            } catch (e: Exception) {
+                Log.e("ProfileAnalytics", "Error loading analytics: ${e.message}", e)
+
+                // Update UI with default text on main thread
+                withContext(Dispatchers.Main) {
+                    binding.tvAnalyticsSummary.text = "View your music analytics"
+                    binding.tvTimeListened.visibility = View.GONE
+                }
+            }
+        }
+    }
+
+    private fun updateAnalyticsUI(analytics: MonthlyAnalytics) {
+        binding.apply {
+            tvAnalyticsSummary.text = when {
+                analytics.totalMinutesListened > 0 -> {
+                    "${analytics.totalMinutesListened} minutes this month"
+                }
+                else -> "Start listening to see your analytics"
+            }
+
+            if (analytics.totalMinutesListened > 0) {
+                tvTimeListened.text = "${analytics.totalMinutesListened} min"
+                tvTimeListened.visibility = View.VISIBLE
+            } else {
+                tvTimeListened.visibility = View.GONE
+            }
+        }
+    }
+
+    private fun getCountryNameFromCode(countryCode: String): String {
+        return try {
+            val locale = Locale("", countryCode)
+            locale.displayCountry
+        } catch (e: Exception) {
+            countryCode // Fallback to showing the code if conversion fails
+        }
+    }
+
     private fun showNetworkError() {
         binding.networkErrorLayout.visibility = View.VISIBLE
-        binding.profileLayout.visibility = View.GONE
+        binding.profileLayout?.visibility = View.GONE
     }
-
-
 
     private fun navigateToLogin() {
         val intent = Intent(requireContext(), LoginActivity::class.java)
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.tubes.purry\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.READ_MEDIA_AUDIO\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\r\n        android:maxSdkVersion=\"28\"/>\r\n    <!--    <uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />-->\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\r\n        android:maxSdkVersion=\"32\"/>\r\n\r\n    <application\r\n        android:name=\".PurrytifyApplication\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@drawable/logo_splash\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@drawable/logo_splash\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.Purrytify\"\r\n        android:usesCleartextTraffic=\"true\">\r\n\r\n        <activity\r\n            android:name=\".ui.auth.LoginActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"false\" />\r\n\r\n        <service android:name=\".utils.TokenExpirationService\" />\r\n\r\n<!--        <receiver-->\r\n<!--            android:name=\".utils.NetworkStateReceiver\"-->\r\n<!--            android:exported=\"false\">-->\r\n<!--            <intent-filter>-->\r\n<!--                <action android:name=\"android.net.conn.CONNECTIVITY_CHANGE\" />-->\r\n<!--            </intent-filter>-->\r\n<!--        </receiver>-->\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/AndroidManifest.xml	(date 1748195617079)
@@ -1,15 +1,61 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
     package="com.tubes.purry">
 
+    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
+
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK" />
+
     <uses-permission android:name="android.permission.READ_MEDIA_AUDIO" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"
-        android:maxSdkVersion="28"/>
-    <!--    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />-->
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
-        android:maxSdkVersion="32"/>
+    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
+
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="28"/>
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32"/>
+    <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" tools:ignore="ScopedStorage" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.CAMERA" />
+
+    <uses-feature android:name="android.hardware.camera" android:required="false" />
+    <uses-feature android:name="android.hardware.camera.autofocus" android:required="false" />
+    <uses-feature android:name="android.hardware.location.gps" android:required="false" />
+    <uses-feature android:name="android.hardware.location.network" android:required="false" />
+
+    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
+
+    <!-- Bluetooth permissions for device detection and connection -->
+    <uses-permission android:name="android.permission.BLUETOOTH" />
+    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
+
+    <!-- For Android 12+ (API 31+) -->
+    <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
+    <uses-permission android:name="android.permission.BLUETOOTH_SCAN" />
+
+    <!-- Audio recording permission (sometimes needed for audio routing) -->
+    <uses-permission android:name="android.permission.RECORD_AUDIO" />
+
+    <!-- Audio focus and media permissions -->
+    <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
+
+    <!-- Location permission for Bluetooth LE scanning (Android 6.0+) -->
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+
+
+    <uses-feature
+        android:name="android.hardware.bluetooth"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.bluetooth_le"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.audio.output"
+        android:required="true" />
 
     <application
         android:name=".PurrytifyApplication"
@@ -21,6 +67,31 @@
         android:theme="@style/Theme.Purrytify"
         android:usesCleartextTraffic="true">
 
+<!--        <activity-->
+<!--            android:name=".MainActivity"-->
+<!--            android:exported="true"/>-->
+
+        <meta-data
+            android:name="com.google.android.geo.API_KEY"
+            android:value="AIzaSyBbWyagxLmhIKXZT7l80j-wTZYXdOISyWc" />
+
+        <activity android:name=".MainActivity" android:launchMode="singleTop" android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="purrytify" android:host="song" />
+            </intent-filter>
+            <intent-filter android:autoVerify="true">
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data
+                    android:scheme="https"
+                    android:host="purrytify.page.link" />
+            </intent-filter>
+        </activity>
+
         <activity
             android:name=".ui.auth.LoginActivity"
             android:exported="true">
@@ -31,18 +102,85 @@
         </activity>
 
         <activity
-            android:name=".MainActivity"
+            android:name=".ui.profile.EditProfileActivity"
+            android:exported="false" />
+
+        <activity
+            android:name=".ui.profile.MapsActivity"
             android:exported="false" />
 
+        <activity android:name=".ui.chart.TopChartDetailFragment"
+            android:exported="false"
+            tools:ignore="Instantiatable" />
+
+        <activity
+            android:name=".ui.recommendation.RecommendationDetailActivity"
+            android:exported="false" />
+
+        <activity
+            android:name=".ui.analytics.SoundCapsuleActivity"
+            android:exported="false"
+             />
+
+        <activity
+            android:name=".ui.analytics.MonthDetailActivity"
+            android:exported="false"
+             />
+
+        <activity
+            android:name=".ui.analytics.TimeListenedDetailActivity"
+            android:exported="false"
+             />
+
+        <activity
+            android:name=".ui.analytics.TopSongsActivity"
+            android:exported="false"
+             />
+
+        <activity
+            android:name=".ui.analytics.TopArtistsActivity"
+            android:exported="false"
+             />
+
+        <activity android:name=".ui.qr.ScanQRActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <category android:name="android.intent.category.BROWSABLE"/>
+                <data android:scheme="purrytify" android:host="scan" />
+            </intent-filter>
+        </activity>
+
+
+        <!-- File Provider for camera -->
+        <provider
+            android:name="androidx.core.content.FileProvider"
+            android:authorities="com.tubes.purry.fileprovider"
+            android:exported="false"
+            android:grantUriPermissions="true">
+            <meta-data
+                android:name="android.support.FILE_PROVIDER_PATHS"
+                android:resource="@xml/file_paths" />
+        </provider>
+
         <service android:name=".utils.TokenExpirationService" />
+        <service
+            android:name=".utils.MusicNotificationService"
+            android:exported="false"
+            android:foregroundServiceType="mediaPlayback" />
 
-<!--        <receiver-->
-<!--            android:name=".utils.NetworkStateReceiver"-->
-<!--            android:exported="false">-->
-<!--            <intent-filter>-->
-<!--                <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />-->
-<!--            </intent-filter>-->
-<!--        </receiver>-->
+        <receiver
+            android:name=".utils.MusicNotificationReceiver"
+            android:enabled="true"
+            android:exported="false">
+            <intent-filter>
+                <action android:name="com.tubes.purry.ACTION_PLAY" />
+                <action android:name="com.tubes.purry.ACTION_PAUSE" />
+                <action android:name="com.tubes.purry.ACTION_NEXT" />
+                <action android:name="com.tubes.purry.ACTION_PREV" />
+            </intent-filter>
+        </receiver>
     </application>
 
 </manifest>
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.data.local\r\n\r\nimport android.content.Context\r\nimport androidx.room.Database\r\nimport androidx.room.Room\r\nimport androidx.room.RoomDatabase\r\nimport android.util.Log\r\nimport com.tubes.purry.data.model.Song\r\nimport androidx.sqlite.db.SupportSQLiteDatabase\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport com.tubes.purry.R\r\nimport com.tubes.purry.R.raw.terlintas\r\nimport com.tubes.purry.data.model.LikedSong\r\nimport com.tubes.purry.data.model.ProfileData\r\n\r\n@Database(entities = [Song::class, LikedSong::class, ProfileData::class], version = 2)\r\nabstract class AppDatabase : RoomDatabase() {\r\n    abstract fun songDao(): SongDao\r\n    abstract fun userProfileDao(): UserProfileDao\r\n    abstract fun LikedSongDao(): LikedSongDao\r\n\r\n    companion object {\r\n        @Volatile private var INSTANCE: AppDatabase? = null\r\n\r\n        fun getDatabase(context: Context): AppDatabase {\r\n            return INSTANCE ?: synchronized(this) {\r\n                val instance = Room.databaseBuilder(\r\n                    context.applicationContext,\r\n                    AppDatabase::class.java,\r\n                    \"purritify.db\"\r\n                )\r\n                    .fallbackToDestructiveMigration()\r\n                    .addCallback(SeedDatabaseCallback())\r\n                    .build()\r\n                    .also { INSTANCE = it }\r\n\r\n                instance\r\n            }\r\n        }\r\n    }\r\n\r\n    private class SeedDatabaseCallback : Callback() {\r\n        override fun onCreate(db: SupportSQLiteDatabase) {\r\n            super.onCreate(db)\r\n            Log.d(\"AppDatabase\", \"onCreate triggered. Seeding data...\")\r\n\r\n            // Create triggers for likedSongs counter\r\n            db.execSQL(\"\"\"\r\n                CREATE TRIGGER IF NOT EXISTS increment_liked_songs\r\n                AFTER INSERT ON liked_songs\r\n                BEGIN\r\n                  UPDATE user_profile\r\n                  SET likedSongs = likedSongs + 1\r\n                  WHERE id = NEW.userId;\r\n                END;\r\n            \"\"\".trimIndent())\r\n\r\n            db.execSQL(\"\"\"\r\n                CREATE TRIGGER IF NOT EXISTS decrement_liked_songs\r\n                AFTER DELETE ON liked_songs\r\n                BEGIN\r\n                  UPDATE user_profile\r\n                  SET likedSongs = likedSongs - 1\r\n                  WHERE id = OLD.userId;\r\n                END;\r\n            \"\"\".trimIndent())\r\n\r\n            CoroutineScope(Dispatchers.IO).launch {\r\n                INSTANCE?.songDao()?.insertAll(predefinedSongs())\r\n                Log.d(\"AppDatabase\", \"Seeding done.\")\r\n            }\r\n        }\r\n\r\n        private fun predefinedSongs(): List<Song> = listOf(\r\n            Song(\r\n                id = \"1\",\r\n                title = \"Katakan Saja\",\r\n                artist = \"Adikara\",\r\n                coverResId = R.drawable.katakan_saja,\r\n                coverPath = null,\r\n                filePath = null,\r\n                resId = R.raw.katakan_saja,\r\n                duration = 239000,\r\n                isLiked = false,\r\n                isLocal = true,\r\n                lastPlayedAt = 0L,\r\n                uploadedBy = -1\r\n            ),\r\n            Song(\r\n                id = \"2\",\r\n                title = \"Primadona\",\r\n                artist = \"Adikara\",\r\n                coverResId = R.drawable.primadona,\r\n                coverPath = null,\r\n                filePath = null,\r\n                resId = R.raw.primadona,\r\n                duration = 247000,\r\n                isLiked = false,\r\n                isLocal = true,\r\n                lastPlayedAt = 0L,\r\n                uploadedBy = -1\r\n            ),\r\n            Song(\r\n                id = \"3\",\r\n                title = \"Terlintas\",\r\n                artist = \"Bernadya\",\r\n                coverResId = R.drawable.terlintas,\r\n                coverPath = null,\r\n                filePath = null,\r\n                resId = terlintas,\r\n                duration = 235000,\r\n                isLiked = false,\r\n                isLocal = true,\r\n                lastPlayedAt = 0L,\r\n                uploadedBy = -1\r\n            )\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt b/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt
--- a/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/data/local/AppDatabase.kt	(date 1748195617084)
@@ -14,12 +14,14 @@
 import com.tubes.purry.R.raw.terlintas
 import com.tubes.purry.data.model.LikedSong
 import com.tubes.purry.data.model.ProfileData
+import com.tubes.purry.data.model.ListeningSession
 
-@Database(entities = [Song::class, LikedSong::class, ProfileData::class], version = 2)
+@Database(entities = [Song::class, LikedSong::class, ProfileData::class, ListeningSession::class], version = 8)
 abstract class AppDatabase : RoomDatabase() {
     abstract fun songDao(): SongDao
     abstract fun userProfileDao(): UserProfileDao
     abstract fun LikedSongDao(): LikedSongDao
+    abstract fun analyticsDao(): AnalyticsDao
 
     companion object {
         @Volatile private var INSTANCE: AppDatabase? = null
@@ -68,54 +70,57 @@
             """.trimIndent())
 
             CoroutineScope(Dispatchers.IO).launch {
-                INSTANCE?.songDao()?.insertAll(predefinedSongs())
+//                INSTANCE?.songDao()?.insertAll(predefinedSongs())
                 Log.d("AppDatabase", "Seeding done.")
             }
         }
 
-        private fun predefinedSongs(): List<Song> = listOf(
-            Song(
-                id = "1",
-                title = "Katakan Saja",
-                artist = "Adikara",
-                coverResId = R.drawable.katakan_saja,
-                coverPath = null,
-                filePath = null,
-                resId = R.raw.katakan_saja,
-                duration = 239000,
-                isLiked = false,
-                isLocal = true,
-                lastPlayedAt = 0L,
-                uploadedBy = -1
-            ),
-            Song(
-                id = "2",
-                title = "Primadona",
-                artist = "Adikara",
-                coverResId = R.drawable.primadona,
-                coverPath = null,
-                filePath = null,
-                resId = R.raw.primadona,
-                duration = 247000,
-                isLiked = false,
-                isLocal = true,
-                lastPlayedAt = 0L,
-                uploadedBy = -1
-            ),
-            Song(
-                id = "3",
-                title = "Terlintas",
-                artist = "Bernadya",
-                coverResId = R.drawable.terlintas,
-                coverPath = null,
-                filePath = null,
-                resId = terlintas,
-                duration = 235000,
-                isLiked = false,
-                isLocal = true,
-                lastPlayedAt = 0L,
-                uploadedBy = -1
-            )
-        )
+//        private fun predefinedSongs(): List<Song> = listOf(
+//            Song(
+//                id = "1",
+//                serverId = null,
+//                title = "Katakan Saja",
+//                artist = "Adikara",
+//                coverResId = R.drawable.katakan_saja,
+//                coverPath = null,
+//                filePath = null,
+//                resId = R.raw.katakan_saja,
+//                duration = 239000,
+//                isLiked = false,
+//                isLocal = true,
+//                lastPlayedAt = 0L,
+//                uploadedBy = -1
+//            ),
+//            Song(
+//                id = "2",
+//                serverId = null,
+//                title = "Primadona",
+//                artist = "Adikara",
+//                coverResId = R.drawable.primadona,
+//                coverPath = null,
+//                filePath = null,
+//                resId = R.raw.primadona,
+//                duration = 247000,
+//                isLiked = false,
+//                isLocal = true,
+//                lastPlayedAt = 0L,
+//                uploadedBy = -1
+//            ),
+//            Song(
+//                id = "3",
+//                serverId = null,
+//                title = "Terlintas",
+//                artist = "Bernadya",
+//                coverResId = R.drawable.terlintas,
+//                coverPath = null,
+//                filePath = null,
+//                resId = terlintas,
+//                duration = 235000,
+//                isLiked = false,
+//                isLocal = true,
+//                lastPlayedAt = 0L,
+//                uploadedBy = -1
+//            )
+//        )
     }
 }
Index: app/src/main/java/com/tubes/purry/data/local/SongDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.data.local\r\n\r\nimport androidx.room.*\r\nimport com.tubes.purry.data.model.Song\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\n@Dao\r\ninterface SongDao {\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insert(song: Song)\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertAll(songs: List<Song>)\r\n\r\n    @Update\r\n    suspend fun update(song: Song)\r\n\r\n    @Delete\r\n    suspend fun delete(song: Song)\r\n\r\n    @Query(\"SELECT * FROM songs WHERE isLocal = 1 ORDER BY id DESC LIMIT 10\")\r\n    fun getNewSongs(): Flow<List<Song>>\r\n\r\n    @Query(\"SELECT * FROM songs WHERE lastPlayedAt > 0 ORDER BY lastPlayedAt DESC LIMIT 10\")\r\n    fun getRecentlyPlayed(): Flow<List<Song>>\r\n\r\n    @Query(\"SELECT COUNT(*) FROM songs\")\r\n    fun getTotalSongCount(): Flow<Int>\r\n\r\n    @Query(\"SELECT COUNT(*) FROM songs WHERE isLiked = 1\")\r\n    fun getLikedSongsCount(): Flow<Int>\r\n\r\n    @Query(\"SELECT COUNT(*) FROM songs WHERE lastPlayedAt > 0\")\r\n    fun getListenedSongsCount(): Flow<Int>\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/data/local/SongDao.kt b/app/src/main/java/com/tubes/purry/data/local/SongDao.kt
--- a/app/src/main/java/com/tubes/purry/data/local/SongDao.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/data/local/SongDao.kt	(date 1748195617088)
@@ -1,5 +1,6 @@
 package com.tubes.purry.data.local
 
+import androidx.lifecycle.LiveData
 import androidx.room.*
 import com.tubes.purry.data.model.Song
 import kotlinx.coroutines.flow.Flow
@@ -18,7 +19,7 @@
     @Delete
     suspend fun delete(song: Song)
 
-    @Query("SELECT * FROM songs WHERE isLocal = 1 ORDER BY id DESC LIMIT 10")
+    @Query("SELECT * FROM songs WHERE filePath IS NOT NULL ORDER BY title ASC")
     fun getNewSongs(): Flow<List<Song>>
 
     @Query("SELECT * FROM songs WHERE lastPlayedAt > 0 ORDER BY lastPlayedAt DESC LIMIT 10")
@@ -32,4 +33,25 @@
 
     @Query("SELECT COUNT(*) FROM songs WHERE lastPlayedAt > 0")
     fun getListenedSongsCount(): Flow<Int>
+
+    @Query("SELECT * FROM songs WHERE filePath = :path LIMIT 1")
+    suspend fun getSongByFilePath(path: String): Song?
+
+    @Query("SELECT * FROM songs ORDER BY title ASC")
+    fun getAllSongs(): Flow<List<Song>>
+
+    @Query("SELECT * FROM songs WHERE id = :id LIMIT 1")
+    suspend fun getById(id: String): Song?
+
+    @Query("UPDATE songs SET playCount = playCount + 1 WHERE id = :songId")
+    suspend fun incrementPlayCount(songId: String)
+
+    @Query("SELECT * FROM songs WHERE isLocal = 1 ORDER BY title ASC")
+    fun getLibrarySongs(): Flow<List<Song>>
+
+    @Query("SELECT * FROM songs WHERE title LIKE '%' || :title || '%' AND artist LIKE '%' || :artist || '%' LIMIT 1")
+    suspend fun getSongByTitleAndArtist(title: String, artist: String): Song?
+
+    @Query("SELECT * FROM songs WHERE artist LIKE '%' || :artist || '%'")
+    suspend fun getSongsByArtist(artist: String): List<Song>
 }
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/data/model/Song.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.data.model\r\n\r\nimport android.os.Parcel\r\nimport android.os.Parcelable\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\n\r\n//@Parcelize\r\n@Entity(tableName = \"songs\")\r\ndata class Song(\r\n    @PrimaryKey val id: String,\r\n    val title: String,\r\n    val artist: String,\r\n    val filePath: String? = null,\r\n    val resId: Int? = null,\r\n    val coverResId: Int? = null,\r\n    val coverPath: String? = null,\r\n    val duration: Int = 0,\r\n    val isLiked: Boolean = false,\r\n    val isLocal: Boolean = false,\r\n    val lastPlayedAt: Long = 0L,\r\n    val uploadedBy: Int = 0\r\n) : Parcelable {\r\n    constructor(parcel: Parcel) : this(\r\n        id = parcel.readString() ?: \"\",\r\n        title = parcel.readString() ?: \"\",\r\n        artist = parcel.readString() ?: \"\",\r\n        filePath = parcel.readString(),\r\n        resId = parcel.readValue(Int::class.java.classLoader) as? Int,\r\n        coverResId = parcel.readInt(),\r\n        coverPath = parcel.readString(),\r\n        duration = parcel.readInt(),\r\n        isLiked = parcel.readByte() != 0.toByte(),\r\n        isLocal = parcel.readByte() != 0.toByte(),\r\n        lastPlayedAt = parcel.readLong(),\r\n        uploadedBy = parcel.readInt()\r\n    )\r\n\r\n    override fun writeToParcel(parcel: Parcel, flags: Int) {\r\n        parcel.writeString(id)\r\n        parcel.writeString(title)\r\n        parcel.writeString(artist)\r\n        parcel.writeString(filePath)\r\n        parcel.writeValue(resId)\r\n        parcel.writeValue(coverResId)\r\n        parcel.writeString(coverPath)\r\n        parcel.writeInt(duration)\r\n        parcel.writeByte(if (isLiked) 1 else 0)\r\n        parcel.writeByte(if (isLocal) 1 else 0)\r\n        parcel.writeLong(lastPlayedAt)\r\n        parcel.writeInt(uploadedBy)\r\n    }\r\n\r\n    override fun describeContents(): Int = 0\r\n\r\n    companion object CREATOR : Parcelable.Creator<Song> {\r\n        override fun createFromParcel(parcel: Parcel): Song = Song(parcel)\r\n        override fun newArray(size: Int): Array<Song?> = arrayOfNulls(size)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/data/model/Song.kt b/app/src/main/java/com/tubes/purry/data/model/Song.kt
--- a/app/src/main/java/com/tubes/purry/data/model/Song.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/data/model/Song.kt	(date 1748195617095)
@@ -3,12 +3,15 @@
 import android.os.Parcel
 import android.os.Parcelable
 import androidx.room.Entity
+import androidx.room.Index
 import androidx.room.PrimaryKey
 
 //@Parcelize
-@Entity(tableName = "songs")
+@Entity(tableName = "songs",
+    indices = [Index(value = ["filePath"], unique = true)])
 data class Song(
     @PrimaryKey val id: String,
+    val serverId: Int? = null,
     val title: String,
     val artist: String,
     val filePath: String? = null,
@@ -19,10 +22,12 @@
     val isLiked: Boolean = false,
     val isLocal: Boolean = false,
     val lastPlayedAt: Long = 0L,
-    val uploadedBy: Int = 0
+    val uploadedBy: Int = 0,
+    val playCount: Int = 0
 ) : Parcelable {
     constructor(parcel: Parcel) : this(
         id = parcel.readString() ?: "",
+        serverId = parcel.readValue(Int::class.java.classLoader) as? Int,
         title = parcel.readString() ?: "",
         artist = parcel.readString() ?: "",
         filePath = parcel.readString(),
@@ -33,11 +38,13 @@
         isLiked = parcel.readByte() != 0.toByte(),
         isLocal = parcel.readByte() != 0.toByte(),
         lastPlayedAt = parcel.readLong(),
-        uploadedBy = parcel.readInt()
+        uploadedBy = parcel.readInt(),
+        playCount = parcel.readInt()
     )
 
     override fun writeToParcel(parcel: Parcel, flags: Int) {
         parcel.writeString(id)
+        parcel.writeValue(serverId)
         parcel.writeString(title)
         parcel.writeString(artist)
         parcel.writeString(filePath)
@@ -49,6 +56,7 @@
         parcel.writeByte(if (isLocal) 1 else 0)
         parcel.writeLong(lastPlayedAt)
         parcel.writeInt(uploadedBy)
+        parcel.writeInt(playCount)
     }
 
     override fun describeContents(): Int = 0
Index: app/src/main/res/navigation/mobile_navigation.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/mobile_navigation\"\r\n    app:startDestination=\"@+id/navigation_home\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/addSongFragment\"\r\n        android:name=\"com.tubes.purry.ui.library.AddSongBottomSheetFragment\"\r\n        android:label=\"Add Song\"\r\n        tools:layout=\"@layout/fragment_add_song_bottom_sheet\" />\r\n\r\n    <fragment\r\n        android:id=\"@+id/navigation_home\"\r\n        android:name=\"com.tubes.purry.ui.home.HomeFragment\"\r\n        android:label=\"@string/title_home\"\r\n        tools:layout=\"@layout/fragment_home\" />\r\n\r\n    <fragment\r\n        android:id=\"@+id/editSongFragment\"\r\n        android:name=\"com.tubes.purry.ui.library.EditSongBottomSheetFragment\"\r\n        android:label=\"Edit Song\"\r\n        tools:layout=\"@layout/fragment_add_song_bottom_sheet\">\r\n\r\n        <argument\r\n            android:name=\"song\"\r\n            app:argType=\"com.tubes.purry.data.model.Song\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/navigation_library\"\r\n        android:name=\"com.tubes.purry.ui.library.LibraryFragment\"\r\n        android:label=\"@string/title_library\"\r\n        tools:layout=\"@layout/fragment_library\">\r\n        <action\r\n            android:id=\"@+id/action_libraryFragment_to_addSongFragment\"\r\n            app:destination=\"@id/addSongFragment\" />\r\n        <action\r\n            android:id=\"@+id/action_libraryFragment_to_editSongFragment\"\r\n            app:destination=\"@id/editSongFragment\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/navigation_profile\"\r\n        android:name=\"com.tubes.purry.ui.profile.ProfileFragment\"\r\n        android:label=\"@string/title_profile\"\r\n        tools:layout=\"@layout/fragment_profile\" />\r\n\r\n    <fragment\r\n        android:id=\"@+id/songDetailFragment\"\r\n        android:name=\"com.tubes.purry.ui.detail.SongDetailFragment\"\r\n        android:label=\"Now Playing\"\r\n        tools:layout=\"@layout/fragment_song_detail\">\r\n    </fragment>\r\n\r\n    <action\r\n        android:id=\"@+id/action_global_songDetailFragment\"\r\n        app:destination=\"@id/songDetailFragment\"\r\n        app:launchSingleTop=\"true\" />\r\n\r\n</navigation>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/mobile_navigation.xml b/app/src/main/res/navigation/mobile_navigation.xml
--- a/app/src/main/res/navigation/mobile_navigation.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/res/navigation/mobile_navigation.xml	(date 1748195617196)
@@ -15,7 +15,11 @@
         android:id="@+id/navigation_home"
         android:name="com.tubes.purry.ui.home.HomeFragment"
         android:label="@string/title_home"
-        tools:layout="@layout/fragment_home" />
+        tools:layout="@layout/fragment_home">
+        <action
+            android:id="@+id/action_navigation_home_to_songDetailFragment"
+            app:destination="@id/songDetailFragment" />
+    </fragment>
 
     <fragment
         android:id="@+id/editSongFragment"
@@ -24,8 +28,9 @@
         tools:layout="@layout/fragment_add_song_bottom_sheet">
 
         <argument
-            android:name="song"
-            app:argType="com.tubes.purry.data.model.Song" />
+            android:name="id"
+            app:argType="string"
+            app:nullable="true" />
     </fragment>
 
     <fragment
@@ -50,8 +55,38 @@
     <fragment
         android:id="@+id/songDetailFragment"
         android:name="com.tubes.purry.ui.detail.SongDetailFragment"
-        android:label="Now Playing"
-        tools:layout="@layout/fragment_song_detail">
+        android:label="Song Detail">
+        <argument
+            android:name="songId"
+            app:argType="string"
+            app:nullable="true" />
+        <argument
+            android:name="songIdInt"
+            app:argType="integer"
+            android:defaultValue="-1" />
+        <argument
+            android:name="isLocal"
+            app:argType="boolean"
+            android:defaultValue="false" />
+        <argument
+            android:name="serverId"
+            app:argType="integer"
+            android:defaultValue="-1" />
+        <argument
+            android:name="id"
+            app:argType="string"
+            app:nullable="true" />
+    </fragment>
+
+    <fragment
+        android:id="@+id/topChartDetailFragment"
+        android:name="com.tubes.purry.ui.chart.TopChartDetailFragment"
+        android:label="Top Chart"
+        tools:layout="@layout/fragment_top_chart_detail">
+        <argument
+            android:name="isGlobal"
+            app:argType="boolean"
+            android:defaultValue="true" />
     </fragment>
 
     <action
@@ -59,4 +94,5 @@
         app:destination="@id/songDetailFragment"
         app:launchSingleTop="true" />
 
+
 </navigation>
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/data/repository/ProfileRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.data.repository\r\n\r\nimport android.util.Log\r\nimport com.tubes.purry.data.model.ProfileResponse\r\nimport com.tubes.purry.data.remote.ApiService\r\nimport okhttp3.ResponseBody.Companion.toResponseBody\r\nimport retrofit2.Response\r\n\r\nclass ProfileRepository(\r\n    private val apiService: ApiService,\r\n    private val authRepository: AuthRepository // For refreshing token\r\n) {\r\n\r\n    suspend fun getProfile(): Response<ProfileResponse> {\r\n        // Get a valid auth token before making the API call\r\n        val token = authRepository.getValidAuthToken() ?: return Response.error(401,\r\n            \"Token expired\".toResponseBody(null)\r\n        )\r\n\r\n        Log.d(\"ProfileRepository\", \"Making profile API request\")\r\n        Log.d(\"ProfileRepository\", \"Using token: $token\")\r\n\r\n        // Make the request using the valid token\r\n        return apiService.getProfile(\"Bearer $token\")\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/data/repository/ProfileRepository.kt b/app/src/main/java/com/tubes/purry/data/repository/ProfileRepository.kt
--- a/app/src/main/java/com/tubes/purry/data/repository/ProfileRepository.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/data/repository/ProfileRepository.kt	(date 1748195617098)
@@ -1,10 +1,18 @@
 package com.tubes.purry.data.repository
 
+import android.net.Uri
 import android.util.Log
+import com.tubes.purry.data.model.ProfileData
 import com.tubes.purry.data.model.ProfileResponse
 import com.tubes.purry.data.remote.ApiService
+import okhttp3.MediaType.Companion.toMediaTypeOrNull
+import okhttp3.MultipartBody
+import okhttp3.RequestBody
+import okhttp3.RequestBody.Companion.asRequestBody
+import okhttp3.RequestBody.Companion.toRequestBody
 import okhttp3.ResponseBody.Companion.toResponseBody
 import retrofit2.Response
+import java.io.File
 
 class ProfileRepository(
     private val apiService: ApiService,
@@ -23,4 +31,17 @@
         // Make the request using the valid token
         return apiService.getProfile("Bearer $token")
     }
-}
+
+    suspend fun updateProfile(token: String, location: String, profilePhotoUri: Uri?): Response<ProfileData> {
+        val locationPart = location.toRequestBody("text/plain".toMediaTypeOrNull())
+
+        var profilePhotoPart: MultipartBody.Part? = null
+        if (profilePhotoUri != null) {
+            val file = File(profilePhotoUri.path)
+            val requestFile = file.asRequestBody("image/*".toMediaTypeOrNull())
+            profilePhotoPart = MultipartBody.Part.createFormData("profilePhoto", file.name, requestFile)
+        }
+
+        return apiService.updateProfile(token, locationPart, profilePhotoPart)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/data/remote/ApiService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.data.remote\r\n\r\nimport com.tubes.purry.data.model.LoginRequest\r\nimport com.tubes.purry.data.model.LoginResponse\r\nimport com.tubes.purry.data.model.ProfileResponse\r\nimport com.tubes.purry.data.model.RefreshTokenRequest\r\nimport com.tubes.purry.data.model.RefreshTokenResponse\r\nimport retrofit2.Response\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.Header\r\nimport retrofit2.http.POST\r\n\r\ninterface ApiService {\r\n    @POST(\"api/login\")\r\n    suspend fun login(@Body loginRequest: LoginRequest): Response<LoginResponse>\r\n\r\n    @GET(\"api/profile\")\r\n    suspend fun getProfile(@Header(\"Authorization\") token: String): Response<ProfileResponse>\r\n\r\n    @POST(\"api/refresh-token\")\r\n    suspend fun refreshToken(@Body request: RefreshTokenRequest): Response<RefreshTokenResponse>\r\n\r\n    @GET(\"api/verify-token\")\r\n    suspend fun verifyToken(@Header(\"Authorization\") token: String): Response<Void>\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/data/remote/ApiService.kt b/app/src/main/java/com/tubes/purry/data/remote/ApiService.kt
--- a/app/src/main/java/com/tubes/purry/data/remote/ApiService.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/data/remote/ApiService.kt	(date 1748195617096)
@@ -2,14 +2,25 @@
 
 import com.tubes.purry.data.model.LoginRequest
 import com.tubes.purry.data.model.LoginResponse
+import com.tubes.purry.data.model.OnlineSong
+import com.tubes.purry.data.model.ProfileData
 import com.tubes.purry.data.model.ProfileResponse
+import com.tubes.purry.data.model.RawSong
 import com.tubes.purry.data.model.RefreshTokenRequest
 import com.tubes.purry.data.model.RefreshTokenResponse
+import com.tubes.purry.data.model.Song
+import okhttp3.MultipartBody
+import okhttp3.RequestBody
 import retrofit2.Response
 import retrofit2.http.Body
 import retrofit2.http.GET
 import retrofit2.http.Header
+import retrofit2.http.Multipart
+import retrofit2.http.PATCH
 import retrofit2.http.POST
+import retrofit2.http.PUT
+import retrofit2.http.Part
+import retrofit2.http.Path
 
 interface ApiService {
     @POST("api/login")
@@ -23,4 +34,21 @@
 
     @GET("api/verify-token")
     suspend fun verifyToken(@Header("Authorization") token: String): Response<Void>
+
+    @Multipart
+    @PATCH("api/profile")
+    suspend fun updateProfile(
+        @Header("Authorization") token: String,
+        @Part("location") location: RequestBody?,
+        @Part profilePhoto: MultipartBody.Part?
+    ): Response<ProfileData>
+
+    @GET("api/top-songs/global")
+    suspend fun getTopSongsGlobal(): List<OnlineSong>
+
+    @GET("api/top-songs/{country}")
+    suspend fun getTopSongsByCountry(@Path("country") code: String): List<OnlineSong>
+
+    @GET("api/songs/{id}")
+    suspend fun getSongById(@Path("id") id: Int): Response<RawSong>
 }
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/utils/AudioMetadata.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.utils\r\n\r\ndata class AudioMetadata(\r\n    val title: String?,\r\n    val artist: String?,\r\n    val duration: Int\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/utils/AudioMetadata.kt b/app/src/main/java/com/tubes/purry/utils/AudioMetadata.kt
--- a/app/src/main/java/com/tubes/purry/utils/AudioMetadata.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/utils/AudioMetadata.kt	(date 1748195617134)
@@ -3,5 +3,5 @@
 data class AudioMetadata(
     val title: String?,
     val artist: String?,
-    val duration: Int
+    val duration: String?
 )
Index: app/src/main/res/layout/item_song_card.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"120dp\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:orientation=\"vertical\"\r\n    android:padding=\"8dp\"\r\n    android:gravity=\"center_horizontal\">\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imgCover\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"100dp\"\r\n        android:background=\"@color/black\"\r\n        android:contentDescription=\"@string/cover_art\"\r\n        android:scaleType=\"centerCrop\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvTitle\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/song_title_card\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textStyle=\"bold\"\r\n        android:textSize=\"14sp\"\r\n        android:maxLines=\"1\"\r\n        android:ellipsize=\"end\"\r\n        android:paddingTop=\"4dp\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvArtist\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/artist_song_card\"\r\n        android:textColor=\"@android:color/darker_gray\"\r\n        android:textSize=\"12sp\"\r\n        android:maxLines=\"1\"\r\n        android:ellipsize=\"end\" />\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/item_song_card.xml b/app/src/main/res/layout/item_song_card.xml
--- a/app/src/main/res/layout/item_song_card.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/res/layout/item_song_card.xml	(date 1748195617192)
@@ -3,14 +3,16 @@
     android:layout_width="120dp"
     android:layout_height="wrap_content"
     android:orientation="vertical"
-    android:padding="8dp"
-    android:gravity="center_horizontal">
+    android:layout_marginEnd="12dp"
+    android:background="?attr/selectableItemBackground"
+    android:clickable="true"
+    android:focusable="true">
 
     <ImageView
         android:id="@+id/imgCover"
-        android:layout_width="match_parent"
-        android:layout_height="100dp"
-        android:background="@color/black"
+        android:layout_width="120dp"
+        android:layout_height="120dp"
+        android:background="@drawable/rounded_corner_background"
         android:contentDescription="@string/cover_art"
         android:scaleType="centerCrop" />
 
@@ -18,21 +20,22 @@
         android:id="@+id/tvTitle"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:layout_marginTop="8dp"
         android:text="@string/song_title_card"
         android:textColor="@android:color/white"
         android:textStyle="bold"
         android:textSize="14sp"
         android:maxLines="1"
-        android:ellipsize="end"
-        android:paddingTop="4dp" />
+        android:ellipsize="end" />
 
     <TextView
         android:id="@+id/tvArtist"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:layout_marginTop="2dp"
         android:text="@string/artist_song_card"
         android:textColor="@android:color/darker_gray"
         android:textSize="12sp"
-        android:maxLines="1"
+        android:maxLines="2"
         android:ellipsize="end" />
 </LinearLayout>
Index: app/src/main/java/com/tubes/purry/utils/TokenExpirationService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.utils\r\n\r\nimport android.app.Service\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Handler\r\nimport android.os.IBinder\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport com.tubes.purry.data.model.RefreshTokenRequest\r\nimport com.tubes.purry.data.remote.ApiClient\r\nimport com.tubes.purry.ui.auth.LoginActivity\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport java.util.Timer\r\nimport java.util.TimerTask\r\n\r\nclass TokenExpirationService : Service() {\r\n\r\n    private val timer = Timer()\r\n    private val verificationInterval = 60000L // Check every 1 minute\r\n    private lateinit var sessionManager: SessionManager\r\n\r\n    companion object {\r\n        fun startService(context: Context) {\r\n            val intent = Intent(context, TokenExpirationService::class.java)\r\n            context.startService(intent)\r\n        }\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        sessionManager = SessionManager(this)\r\n    }\r\n\r\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        timer.scheduleAtFixedRate(object : TimerTask() {\r\n            override fun run() {\r\n                if (NetworkUtil.isNetworkAvailable(applicationContext)) {\r\n                    checkTokenExpiration()\r\n                }\r\n            }\r\n        }, 0, verificationInterval)\r\n\r\n        return START_STICKY\r\n    }\r\n\r\n    private fun checkTokenExpiration() {\r\n        Log.d(\"TokenCheck\", \"Verifying token...\")\r\n        val token = sessionManager.fetchAuthToken() ?: return\r\n        if (token.isNullOrBlank()) {\r\n            Log.d(\"TokenCheck\", \"Access token is null or blank → Logging out\")\r\n            logoutAndRedirect()\r\n            return\r\n        }\r\n\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            try {\r\n                val response = ApiClient.apiService.verifyToken(\"Bearer $token\")\r\n                if (!response.isSuccessful && response.code() == 403) {\r\n                    // Token expired, try to refresh\r\n                    tryRefreshToken()\r\n                }\r\n            } catch (e: Exception) {\r\n                // Network or other error, handle appropriately\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun logoutAndRedirect() {\r\n        sessionManager.clearTokens()\r\n\r\n        val intent = Intent(this, LoginActivity::class.java).apply {\r\n            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n            putExtra(\"EXTRA_LOGOUT\", true)\r\n        }\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun tryRefreshToken() {\r\n        Log.d(\"TokenCheck\", \"Verifying token...\")\r\n        val refreshToken = sessionManager.fetchRefreshToken() ?: run {\r\n            logoutUser()\r\n            return\r\n        }\r\n\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            try {\r\n                val request = RefreshTokenRequest(refreshToken)\r\n                val response = ApiClient.apiService.refreshToken(request)\r\n\r\n                if (response.isSuccessful && response.body() != null) {\r\n                    val newToken = response.body()?.token\r\n                    val newRefreshToken = response.body()?.refreshToken\r\n\r\n                    if (newToken != null) {\r\n                        sessionManager.saveAuthToken(newToken)\r\n                    }\r\n\r\n                    if (newRefreshToken != null) {\r\n                        sessionManager.saveRefreshToken(newRefreshToken)\r\n                    }\r\n                } else {\r\n                    logoutUser()\r\n                }\r\n            } catch (e: Exception) {\r\n                logoutUser()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun logoutUser() {\r\n        // Clear tokens\r\n        sessionManager.clearTokens()\r\n\r\n        // Redirect to login screen\r\n        Handler(Looper.getMainLooper()).post {\r\n            val intent = Intent(applicationContext, LoginActivity::class.java)\r\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n            startActivity(intent)\r\n\r\n            // Show a toast\r\n            Toast.makeText(\r\n                applicationContext,\r\n                \"Session expired. Please login again.\",\r\n                Toast.LENGTH_LONG\r\n            ).show()\r\n        }\r\n    }\r\n\r\n    override fun onBind(intent: Intent?): IBinder? = null\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        timer.cancel()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/utils/TokenExpirationService.kt b/app/src/main/java/com/tubes/purry/utils/TokenExpirationService.kt
--- a/app/src/main/java/com/tubes/purry/utils/TokenExpirationService.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/utils/TokenExpirationService.kt	(date 1748195617141)
@@ -11,6 +11,7 @@
 import com.tubes.purry.data.model.RefreshTokenRequest
 import com.tubes.purry.data.remote.ApiClient
 import com.tubes.purry.ui.auth.LoginActivity
+import com.tubes.purry.ui.player.PlayerController
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.launch
@@ -20,7 +21,7 @@
 class TokenExpirationService : Service() {
 
     private val timer = Timer()
-    private val verificationInterval = 60000L // Check every 1 minute
+    private val verificationInterval = 30 * 60 * 1000L // Check every 1 minute
     private lateinit var sessionManager: SessionManager
 
     companion object {
@@ -71,6 +72,7 @@
 
     private fun logoutAndRedirect() {
         sessionManager.clearTokens()
+        PlayerController.release()
 
         val intent = Intent(this, LoginActivity::class.java).apply {
             flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
@@ -103,6 +105,7 @@
                         sessionManager.saveRefreshToken(newRefreshToken)
                     }
                 } else {
+                    Log.e("TokenCheck", "Refresh gagal. response code: ${response.code()} body: ${response.errorBody()?.string()}")
                     logoutUser()
                 }
             } catch (e: Exception) {
@@ -114,6 +117,7 @@
     private fun logoutUser() {
         // Clear tokens
         sessionManager.clearTokens()
+        PlayerController.release()
 
         // Redirect to login screen
         Handler(Looper.getMainLooper()).post {
Index: app/src/main/java/com/tubes/purry/utils/AudioUtil.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.utils\r\n\r\nimport android.content.Context\r\nimport android.media.MediaMetadataRetriever\r\nimport android.net.Uri\r\n\r\nfun extractAudioMetadata(context: Context, uri: Uri): AudioMetadata {\r\n    val retriever = MediaMetadataRetriever()\r\n    retriever.setDataSource(context, uri)\r\n\r\n    val title = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE)\r\n    val artist = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST)\r\n    val durationStr = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION)\r\n    val duration = durationStr?.toIntOrNull() ?: 0\r\n\r\n    retriever.release()\r\n\r\n    return AudioMetadata(title, artist, duration)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/utils/AudioUtil.kt b/app/src/main/java/com/tubes/purry/utils/AudioUtil.kt
--- a/app/src/main/java/com/tubes/purry/utils/AudioUtil.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/utils/AudioUtil.kt	(date 1748195617137)
@@ -10,8 +10,7 @@
 
     val title = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE)
     val artist = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST)
-    val durationStr = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION)
-    val duration = durationStr?.toIntOrNull() ?: 0
+    val duration = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION)
 
     retriever.release()
 
Index: app/src/main/res/layout/item_song_list.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:id=\"@+id/songItemRoot\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:orientation=\"horizontal\"\r\n    android:padding=\"12dp\"\r\n    android:gravity=\"center_vertical\"\r\n    android:background=\"?attr/selectableItemBackground\">\r\n\r\n    <!-- Cover Image -->\r\n    <ImageView\r\n        android:id=\"@+id/imgCover\"\r\n        android:layout_width=\"56dp\"\r\n        android:layout_height=\"56dp\"\r\n        android:scaleType=\"centerCrop\"\r\n        android:contentDescription=\"@string/cover_art\"\r\n        android:src=\"@drawable/album_default\"\r\n        android:background=\"@color/black\" />\r\n\r\n    <!-- Title and Artist -->\r\n    <LinearLayout\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_weight=\"1\"\r\n        android:orientation=\"vertical\"\r\n        android:layout_marginStart=\"12dp\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/tvTitle\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/song_title_edit\"\r\n            android:textColor=\"@android:color/white\"\r\n            android:textStyle=\"bold\"\r\n            android:textSize=\"16sp\"\r\n            android:maxLines=\"1\"\r\n            android:ellipsize=\"end\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/tvArtist\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/artist_name_edit\"\r\n            android:textColor=\"@android:color/darker_gray\"\r\n            android:textSize=\"14sp\"\r\n            android:maxLines=\"1\"\r\n            android:ellipsize=\"end\" />\r\n    </LinearLayout>\r\n\r\n    <!-- Edit Button -->\r\n    <ImageButton\r\n        android:id=\"@+id/btnEdit\"\r\n        android:layout_width=\"36dp\"\r\n        android:layout_height=\"36dp\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n        android:src=\"@drawable/ic_edit\"\r\n        android:contentDescription=\"@string/edit_song\"\r\n        android:visibility=\"gone\"\r\n        app:tint=\"@android:color/white\" />\r\n\r\n    <!-- Delete Button -->\r\n    <ImageButton\r\n        android:id=\"@+id/btnDelete\"\r\n        android:layout_width=\"36dp\"\r\n        android:layout_height=\"36dp\"\r\n        android:layout_marginStart=\"4dp\"\r\n        android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n        android:src=\"@drawable/ic_delete_song\"\r\n        android:contentDescription=\"@string/delete_song\"\r\n        android:visibility=\"gone\"\r\n        app:tint=\"@android:color/white\" />\r\n\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/item_song_list.xml b/app/src/main/res/layout/item_song_list.xml
--- a/app/src/main/res/layout/item_song_list.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/res/layout/item_song_list.xml	(date 1748195617193)
@@ -49,28 +49,63 @@
             android:ellipsize="end" />
     </LinearLayout>
 
-    <!-- Edit Button -->
-    <ImageButton
-        android:id="@+id/btnEdit"
-        android:layout_width="36dp"
-        android:layout_height="36dp"
-        android:layout_marginStart="8dp"
-        android:background="?attr/selectableItemBackgroundBorderless"
-        android:src="@drawable/ic_edit"
-        android:contentDescription="@string/edit_song"
-        android:visibility="gone"
-        app:tint="@android:color/white" />
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginStart="8dp"
+        android:gravity="center_vertical">
+
+        <ImageButton
+            android:id="@+id/btnEdit"
+            android:layout_width="36dp"
+            android:layout_height="36dp"
+            android:background="?attr/selectableItemBackgroundBorderless"
+            android:src="@drawable/ic_edit"
+            android:contentDescription="@string/edit_song"
+            android:visibility="gone"
+            app:tint="@android:color/white" />
 
-    <!-- Delete Button -->
-    <ImageButton
-        android:id="@+id/btnDelete"
-        android:layout_width="36dp"
-        android:layout_height="36dp"
-        android:layout_marginStart="4dp"
-        android:background="?attr/selectableItemBackgroundBorderless"
-        android:src="@drawable/ic_delete_song"
-        android:contentDescription="@string/delete_song"
-        android:visibility="gone"
-        app:tint="@android:color/white" />
+        <ImageButton
+            android:id="@+id/btnDelete"
+            android:layout_width="36dp"
+            android:layout_height="36dp"
+            android:layout_marginStart="4dp"
+            android:background="?attr/selectableItemBackgroundBorderless"
+            android:src="@drawable/ic_delete_song"
+            android:contentDescription="@string/delete_song"
+            android:visibility="gone"
+            app:tint="@android:color/white" />
 
+        <!-- New Download Button -->
+        <ImageButton
+            android:id="@+id/btnDownload"
+            android:layout_width="36dp"
+            android:layout_height="36dp"
+            android:layout_marginStart="4dp"
+            android:background="?attr/selectableItemBackgroundBorderless"
+            android:src="@drawable/ic_download"
+            android:contentDescription="@string/download_song"
+            android:visibility="gone"
+            app:tint="@color/white" />
+
+        <!-- Download ProgressBar -->
+        <ProgressBar
+            android:id="@+id/downloadProgress"
+            android:layout_width="24dp"
+            android:layout_height="24dp"
+            android:layout_marginStart="8dp"
+            android:visibility="gone"
+            style="@android:style/Widget.DeviceDefault.Light.ProgressBar.Small" />
+
+        <!-- Downloaded Icon -->
+        <ImageView
+            android:id="@+id/iconDownloaded"
+            android:layout_width="24dp"
+            android:layout_height="24dp"
+            android:layout_marginStart="4dp"
+            android:src="@drawable/ic_downloaded"
+            app:tint="@color/green"
+            android:visibility="gone" />
+    </LinearLayout>
 </LinearLayout>
Index: app/src/main/res/layout/fragment_profile.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n    <View\r\n        android:id=\"@+id/backgroundGradient\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@drawable/profile_gradient_background\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <ProgressBar\r\n        android:id=\"@+id/progressBar\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:visibility=\"gone\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/networkErrorLayout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:gravity=\"center\"\r\n        android:orientation=\"vertical\"\r\n        android:padding=\"24dp\"\r\n        android:visibility=\"gone\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <ImageView\r\n            android:layout_width=\"100dp\"\r\n            android:layout_height=\"100dp\"\r\n            android:src=\"@drawable/no_internet\"\r\n            android:contentDescription=\"@string/no_internet_connection\"/>\r\n\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"16dp\"\r\n            android:text=\"@string/no_internet_connection\"\r\n            android:textColor=\"@color/white\"\r\n            android:textSize=\"20sp\"\r\n            android:textStyle=\"bold\" />\r\n\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"8dp\"\r\n            android:gravity=\"center\"\r\n            android:text=\"@string/check_your_internet\"\r\n            android:textColor=\"@color/gray\"\r\n            android:textSize=\"16sp\" />\r\n    </LinearLayout>\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/profileLayout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/txtProfileTitle\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"80dp\"\r\n            android:text=\"@string/profile\"\r\n            android:textColor=\"@color/white\"\r\n            android:textSize=\"24sp\"\r\n            android:textStyle=\"bold\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintHorizontal_bias=\"0.498\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n        <ImageView\r\n            android:id=\"@+id/imgProfile\"\r\n            android:layout_width=\"120dp\"\r\n            android:layout_height=\"120dp\"\r\n            android:layout_marginTop=\"32dp\"\r\n            android:background=\"@drawable/circle_background\"\r\n            android:scaleType=\"centerCrop\"\r\n            android:contentDescription=\"@string/circle_background\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/txtProfileTitle\"\r\n            tools:src=\"@drawable/profile\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/btnEditPhoto\"\r\n            android:layout_width=\"32dp\"\r\n            android:layout_height=\"32dp\"\r\n            android:background=\"@drawable/circle_edit_button\"\r\n            android:padding=\"6dp\"\r\n            android:contentDescription=\"@string/circle_edit_button\"\r\n            android:src=\"@drawable/ic_edit\"\r\n            app:layout_constraintBottom_toBottomOf=\"@+id/imgProfile\"\r\n            app:layout_constraintEnd_toEndOf=\"@+id/imgProfile\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/txtUsername\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"16dp\"\r\n            android:text=\"@string/username\"\r\n            android:textColor=\"@color/white\"\r\n            android:textSize=\"20sp\"\r\n            android:textStyle=\"bold\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/imgProfile\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/txtLocation\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"4dp\"\r\n            android:text=\"@string/location\"\r\n            android:textColor=\"@color/gray\"\r\n            android:textSize=\"16sp\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/txtUsername\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/btnLogout\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"16dp\"\r\n            android:background=\"@drawable/button_outline_background\"\r\n            android:paddingStart=\"24dp\"\r\n            android:paddingEnd=\"24dp\"\r\n            android:text=\"@string/logout\"\r\n            android:textAllCaps=\"false\"\r\n            android:textColor=\"@color/white\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/txtLocation\" />\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/statsContainer\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"32dp\"\r\n            android:baselineAligned=\"false\"\r\n            android:gravity=\"center\"\r\n            android:orientation=\"horizontal\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/btnLogout\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                android:gravity=\"center\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/txtSongsCount\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"@string/_135\"\r\n                    android:textColor=\"@color/white\"\r\n                    android:textSize=\"18sp\"\r\n                    android:textStyle=\"bold\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"@string/songs\"\r\n                    android:textColor=\"@color/gray\"\r\n                    android:textSize=\"14sp\" />\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                android:gravity=\"center\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/txtLikedCount\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"@string/_32\"\r\n                    android:textColor=\"@color/white\"\r\n                    android:textSize=\"18sp\"\r\n                    android:textStyle=\"bold\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"@string/liked\"\r\n                    android:textColor=\"@color/gray\"\r\n                    android:textSize=\"14sp\" />\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                android:gravity=\"center\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/txtListenedCount\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"@string/_50\"\r\n                    android:textColor=\"@color/white\"\r\n                    android:textSize=\"18sp\"\r\n                    android:textStyle=\"bold\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"@string/listened\"\r\n                    android:textColor=\"@color/gray\"\r\n                    android:textSize=\"14sp\" />\r\n            </LinearLayout>\r\n        </LinearLayout>\r\n\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_profile.xml b/app/src/main/res/layout/fragment_profile.xml
--- a/app/src/main/res/layout/fragment_profile.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/res/layout/fragment_profile.xml	(date 1748195617187)
@@ -63,173 +63,264 @@
             android:textSize="16sp" />
     </LinearLayout>
 
-    <androidx.constraintlayout.widget.ConstraintLayout
+    <ScrollView
         android:id="@+id/profileLayout"
         android:layout_width="match_parent"
-        android:layout_height="match_parent">
+        android:layout_height="match_parent"
+        android:fillViewport="true">
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:paddingBottom="32dp">
 
-        <TextView
-            android:id="@+id/txtProfileTitle"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="80dp"
-            android:text="@string/profile"
-            android:textColor="@color/white"
-            android:textSize="24sp"
-            android:textStyle="bold"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintHorizontal_bias="0.498"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toTopOf="parent" />
+            <TextView
+                android:id="@+id/txtProfileTitle"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="80dp"
+                android:text="@string/profile"
+                android:textColor="@color/white"
+                android:textSize="24sp"
+                android:textStyle="bold"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintHorizontal_bias="0.498"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toTopOf="parent" />
 
-        <ImageView
-            android:id="@+id/imgProfile"
-            android:layout_width="120dp"
-            android:layout_height="120dp"
-            android:layout_marginTop="32dp"
-            android:background="@drawable/circle_background"
-            android:scaleType="centerCrop"
-            android:contentDescription="@string/circle_background"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/txtProfileTitle"
-            tools:src="@drawable/profile" />
+            <ImageView
+                android:id="@+id/imgProfile"
+                android:layout_width="120dp"
+                android:layout_height="120dp"
+                android:layout_marginTop="32dp"
+                android:background="@drawable/circle_background"
+                android:scaleType="centerCrop"
+                android:contentDescription="@string/circle_background"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/txtProfileTitle"
+                tools:src="@drawable/profile" />
 
-        <ImageButton
-            android:id="@+id/btnEditPhoto"
-            android:layout_width="32dp"
-            android:layout_height="32dp"
-            android:background="@drawable/circle_edit_button"
-            android:padding="6dp"
-            android:contentDescription="@string/circle_edit_button"
-            android:src="@drawable/ic_edit"
-            app:layout_constraintBottom_toBottomOf="@+id/imgProfile"
-            app:layout_constraintEnd_toEndOf="@+id/imgProfile" />
-
-        <TextView
-            android:id="@+id/txtUsername"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="16dp"
-            android:text="@string/username"
-            android:textColor="@color/white"
-            android:textSize="20sp"
-            android:textStyle="bold"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/imgProfile" />
+            <TextView
+                android:id="@+id/txtUsername"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dp"
+                android:text="@string/username"
+                android:textColor="@color/white"
+                android:textSize="20sp"
+                android:textStyle="bold"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/imgProfile" />
 
-        <TextView
-            android:id="@+id/txtLocation"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="4dp"
-            android:text="@string/location"
-            android:textColor="@color/gray"
-            android:textSize="16sp"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/txtUsername" />
+            <TextView
+                android:id="@+id/txtLocation"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="4dp"
+                android:text="@string/location"
+                android:textColor="@color/gray"
+                android:textSize="16sp"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/txtUsername" />
 
-        <Button
-            android:id="@+id/btnLogout"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="16dp"
-            android:background="@drawable/button_outline_background"
-            android:paddingStart="24dp"
-            android:paddingEnd="24dp"
-            android:text="@string/logout"
-            android:textAllCaps="false"
-            android:textColor="@color/white"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/txtLocation" />
+            <!-- Add Edit Profile Button -->
+            <Button
+                android:id="@+id/btnEditProfile"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dp"
+                android:background="@drawable/button_outline_background"
+                android:paddingStart="24dp"
+                android:paddingEnd="24dp"
+                android:text="Edit Profile"
+                android:textAllCaps="false"
+                android:textColor="@color/white"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/txtLocation" />
+
+            <Button
+                android:id="@+id/btnLogout"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dp"
+                android:background="@drawable/button_outline_background"
+                android:paddingStart="24dp"
+                android:paddingEnd="24dp"
+                android:text="@string/logout"
+                android:textAllCaps="false"
+                android:textColor="@color/white"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/btnEditProfile" />
 
-        <LinearLayout
-            android:id="@+id/statsContainer"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="32dp"
-            android:baselineAligned="false"
-            android:gravity="center"
-            android:orientation="horizontal"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/btnLogout">
+            <LinearLayout
+                android:id="@+id/statsContainer"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="32dp"
+                android:baselineAligned="false"
+                android:gravity="center"
+                android:orientation="horizontal"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/btnLogout">
 
-            <LinearLayout
-                android:layout_width="0dp"
-                android:layout_height="wrap_content"
-                android:layout_weight="1"
-                android:gravity="center"
-                android:orientation="vertical">
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="center"
+                    android:orientation="vertical">
 
-                <TextView
-                    android:id="@+id/txtSongsCount"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:text="@string/_135"
-                    android:textColor="@color/white"
-                    android:textSize="18sp"
-                    android:textStyle="bold" />
+                    <TextView
+                        android:id="@+id/txtSongsCount"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/_135"
+                        android:textColor="@color/white"
+                        android:textSize="18sp"
+                        android:textStyle="bold" />
 
-                <TextView
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:text="@string/songs"
-                    android:textColor="@color/gray"
-                    android:textSize="14sp" />
-            </LinearLayout>
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/songs"
+                        android:textColor="@color/gray"
+                        android:textSize="14sp" />
+                </LinearLayout>
 
-            <LinearLayout
-                android:layout_width="0dp"
-                android:layout_height="wrap_content"
-                android:layout_weight="1"
-                android:gravity="center"
-                android:orientation="vertical">
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="center"
+                    android:orientation="vertical">
 
-                <TextView
-                    android:id="@+id/txtLikedCount"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:text="@string/_32"
-                    android:textColor="@color/white"
-                    android:textSize="18sp"
-                    android:textStyle="bold" />
+                    <TextView
+                        android:id="@+id/txtLikedCount"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/_32"
+                        android:textColor="@color/white"
+                        android:textSize="18sp"
+                        android:textStyle="bold" />
 
-                <TextView
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:text="@string/liked"
-                    android:textColor="@color/gray"
-                    android:textSize="14sp" />
-            </LinearLayout>
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/liked"
+                        android:textColor="@color/gray"
+                        android:textSize="14sp" />
+                </LinearLayout>
 
-            <LinearLayout
-                android:layout_width="0dp"
-                android:layout_height="wrap_content"
-                android:layout_weight="1"
-                android:gravity="center"
-                android:orientation="vertical">
+                <LinearLayout
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:gravity="center"
+                    android:orientation="vertical">
 
-                <TextView
-                    android:id="@+id/txtListenedCount"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:text="@string/_50"
-                    android:textColor="@color/white"
-                    android:textSize="18sp"
-                    android:textStyle="bold" />
+                    <TextView
+                        android:id="@+id/txtListenedCount"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/_50"
+                        android:textColor="@color/white"
+                        android:textSize="18sp"
+                        android:textStyle="bold" />
 
-                <TextView
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:text="@string/listened"
-                    android:textColor="@color/gray"
-                    android:textSize="14sp" />
-            </LinearLayout>
-        </LinearLayout>
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/listened"
+                        android:textColor="@color/gray"
+                        android:textSize="14sp" />
+                </LinearLayout>
+            </LinearLayout>
 
-    </androidx.constraintlayout.widget.ConstraintLayout>
+            <!-- ===== ADD SOUND CAPSULE CARD ===== -->
+            <com.google.android.material.card.MaterialCardView
+                android:id="@+id/cardSoundCapsule"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_margin="16dp"
+                android:layout_marginTop="32dp"
+                android:clickable="true"
+                android:focusable="true"
+                app:cardBackgroundColor="#1E1E1E"
+                app:cardCornerRadius="12dp"
+                app:cardElevation="4dp"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/statsContainer">
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal"
+                    android:padding="16dp">
+
+                    <ImageView
+                        android:layout_width="48dp"
+                        android:layout_height="48dp"
+                        android:layout_gravity="center_vertical"
+                        android:src="@android:drawable/ic_media_play"
+                        app:tint="#1DB954" />
+
+                    <LinearLayout
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center_vertical"
+                        android:layout_marginStart="16dp"
+                        android:layout_weight="1"
+                        android:orientation="vertical">
+
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="Your Sound Capsule"
+                            android:textColor="@color/white"
+                            android:textSize="16sp"
+                            android:textStyle="bold" />
+
+                        <TextView
+                            android:id="@+id/tvAnalyticsSummary"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="View your music analytics"
+                            android:textColor="@color/gray"
+                            android:textSize="14sp" />
+
+                        <TextView
+                            android:id="@+id/tvTimeListened"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:layout_marginTop="4dp"
+                            android:text="0 min this month"
+                            android:textColor="#1DB954"
+                            android:textSize="12sp"
+                            android:textStyle="bold"
+                            android:visibility="gone" />
+
+                    </LinearLayout>
+
+                    <ImageView
+                        android:layout_width="24dp"
+                        android:layout_height="24dp"
+                        android:layout_gravity="center_vertical"
+                        android:src="@android:drawable/ic_media_next"
+                        app:tint="@color/gray" />
+
+                </LinearLayout>
+
+            </com.google.android.material.card.MaterialCardView>
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+    </ScrollView>
+
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: .idea/assetWizardSettings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"WizardSettings\">\r\n    <option name=\"children\">\r\n      <map>\r\n        <entry key=\"imageWizard\">\r\n          <value>\r\n            <PersistentState>\r\n              <option name=\"children\">\r\n                <map>\r\n                  <entry key=\"imageAssetPanel\">\r\n                    <value>\r\n                      <PersistentState>\r\n                        <option name=\"children\">\r\n                          <map>\r\n                            <entry key=\"actionbar\">\r\n                              <value>\r\n                                <PersistentState>\r\n                                  <option name=\"children\">\r\n                                    <map>\r\n                                      <entry key=\"clipArt\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                                <entry key=\"imagePath\" value=\"C:\\Users\\HP\\AppData\\Local\\Temp\\ic_android_black_24dp.xml\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"text\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"textAsset\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                    </map>\r\n                                  </option>\r\n                                </PersistentState>\r\n                              </value>\r\n                            </entry>\r\n                            <entry key=\"launcher\">\r\n                              <value>\r\n                                <PersistentState>\r\n                                  <option name=\"children\">\r\n                                    <map>\r\n                                      <entry key=\"foregroundClipArt\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"imagePath\" value=\"C:\\Users\\HP\\AppData\\Local\\Temp\\ic_android_black_24dp.xml\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"foregroundImage\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"foregroundText\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"foregroundTextAsset\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                    </map>\r\n                                  </option>\r\n                                </PersistentState>\r\n                              </value>\r\n                            </entry>\r\n                            <entry key=\"launcherLegacy\">\r\n                              <value>\r\n                                <PersistentState>\r\n                                  <option name=\"children\">\r\n                                    <map>\r\n                                      <entry key=\"clipArt\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                                <entry key=\"imagePath\" value=\"C:\\Users\\HP\\AppData\\Local\\Temp\\ic_android_black_24dp.xml\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"image\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                                <entry key=\"imagePath\" value=\"D:\\mobdevasser\\album.png\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"text\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"textAsset\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                    </map>\r\n                                  </option>\r\n                                  <option name=\"values\">\r\n                                    <map>\r\n                                      <entry key=\"assetType\" value=\"IMAGE\" />\r\n                                      <entry key=\"imageAsset\" value=\"D:\\mobdevasser\\album.png\" />\r\n                                      <entry key=\"outputName\" value=\"ic_launcher_album\" />\r\n                                    </map>\r\n                                  </option>\r\n                                </PersistentState>\r\n                              </value>\r\n                            </entry>\r\n                            <entry key=\"notification\">\r\n                              <value>\r\n                                <PersistentState>\r\n                                  <option name=\"children\">\r\n                                    <map>\r\n                                      <entry key=\"clipArt\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                                <entry key=\"imagePath\" value=\"C:\\Users\\HP\\AppData\\Local\\Temp\\ic_android_black_24dp.xml\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"text\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"textAsset\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                    </map>\r\n                                  </option>\r\n                                </PersistentState>\r\n                              </value>\r\n                            </entry>\r\n                            <entry key=\"tvBanner\">\r\n                              <value>\r\n                                <PersistentState>\r\n                                  <option name=\"children\">\r\n                                    <map>\r\n                                      <entry key=\"foregroundText\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                    </map>\r\n                                  </option>\r\n                                </PersistentState>\r\n                              </value>\r\n                            </entry>\r\n                            <entry key=\"tvChannel\">\r\n                              <value>\r\n                                <PersistentState>\r\n                                  <option name=\"children\">\r\n                                    <map>\r\n                                      <entry key=\"foregroundClipArt\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"imagePath\" value=\"C:\\Users\\HP\\AppData\\Local\\Temp\\ic_android_black_24dp.xml\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"foregroundImage\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"foregroundText\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                      <entry key=\"foregroundTextAsset\">\r\n                                        <value>\r\n                                          <PersistentState>\r\n                                            <option name=\"values\">\r\n                                              <map>\r\n                                                <entry key=\"color\" value=\"000000\" />\r\n                                              </map>\r\n                                            </option>\r\n                                          </PersistentState>\r\n                                        </value>\r\n                                      </entry>\r\n                                    </map>\r\n                                  </option>\r\n                                </PersistentState>\r\n                              </value>\r\n                            </entry>\r\n                          </map>\r\n                        </option>\r\n                        <option name=\"values\">\r\n                          <map>\r\n                            <entry key=\"outputIconType\" value=\"LAUNCHER_LEGACY\" />\r\n                          </map>\r\n                        </option>\r\n                      </PersistentState>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </PersistentState>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"vectorWizard\">\r\n          <value>\r\n            <PersistentState>\r\n              <option name=\"children\">\r\n                <map>\r\n                  <entry key=\"vectorAssetStep\">\r\n                    <value>\r\n                      <PersistentState>\r\n                        <option name=\"values\">\r\n                          <map>\r\n                            <entry key=\"assetSourceType\" value=\"FILE\" />\r\n                            <entry key=\"outputName\" value=\"ic_more_vert\" />\r\n                            <entry key=\"sourceFile\" value=\"D:\\College\\mobile\\More.svg\" />\r\n                          </map>\r\n                        </option>\r\n                      </PersistentState>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </PersistentState>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/assetWizardSettings.xml b/.idea/assetWizardSettings.xml
--- a/.idea/assetWizardSettings.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/.idea/assetWizardSettings.xml	(date 1748195617061)
@@ -134,7 +134,7 @@
                                             <option name="values">
                                               <map>
                                                 <entry key="color" value="000000" />
-                                                <entry key="imagePath" value="D:\mobdevasser\album.png" />
+                                                <entry key="imagePath" value="D:\College\mobile\playlist_global_cover.png" />
                                               </map>
                                             </option>
                                           </PersistentState>
@@ -167,8 +167,8 @@
                                   <option name="values">
                                     <map>
                                       <entry key="assetType" value="IMAGE" />
-                                      <entry key="imageAsset" value="D:\mobdevasser\album.png" />
-                                      <entry key="outputName" value="ic_launcher_album" />
+                                      <entry key="imageAsset" value="D:\College\mobile\playlist_global_cover.png" />
+                                      <entry key="outputName" value="cov_top50_global" />
                                     </map>
                                   </option>
                                 </PersistentState>
@@ -319,8 +319,8 @@
                         <option name="values">
                           <map>
                             <entry key="assetSourceType" value="FILE" />
-                            <entry key="outputName" value="ic_more_vert" />
-                            <entry key="sourceFile" value="D:\College\mobile\More.svg" />
+                            <entry key="outputName" value="ic_qr_scan" />
+                            <entry key="sourceFile" value="D:\College\mobile\ic_qr_scan.svg" />
                           </map>
                         </option>
                       </PersistentState>
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">Purrytify</string>\r\n    <string name=\"title_home\">Home</string>\r\n    <string name=\"title_library\">Library</string>\r\n    <string name=\"title_profile\">Profile</string>\r\n    <string name=\"new_songs\">New songs</string>\r\n    <string name=\"recently_played\">Recently played</string>\r\n    <string name=\"artist\">Artist</string>\r\n    <string name=\"cancel\">Cancel</string>\r\n    <string name=\"save\">Save</string>\r\n    <string name=\"title\">Title</string>\r\n    <string name=\"upload_song\">Upload Song</string>\r\n    <string name=\"play_song\">Play song</string>\r\n    <string name=\"like_song\">Like song</string>\r\n    <string name=\"mini_album_cover\">Mini Album Cover</string>\r\n    <string name=\"mini_player_artist_name\">Artist</string>\r\n    <string name=\"mini_player_song_title\">Song Title</string>\r\n    <string name=\"item_new_song_title\">Song Title</string>\r\n    <string name=\"item_new_song_artist_name\">Artist Name</string>\r\n    <string name=\"item_new_song_album_cover\">Album Cover</string>\r\n    <string name=\"cover_art\">Cover art</string>\r\n    <string name=\"library_all_songs\">All</string>\r\n    <string name=\"library_liked_songs\">Liked</string>\r\n    <string name=\"library_header\">Your Library</string>\r\n    <string name=\"library_add_song\">Add Song</string>\r\n    <string name=\"collapse_player\" />\r\n    <string name=\"album_cover_player\" />\r\n    <string name=\"play_pause_song\" />\r\n    <string name=\"next_song\" />\r\n    <string name=\"previous_song\" />\r\n    <string name=\"edit_song\">Edit Song</string>\r\n    <string name=\"delete_song\" />\r\n    <string name=\"song_title\">Song Title</string>\r\n    <string name=\"artist_name\">Artist Name</string>\r\n    <string name=\"edit_song_drawer\">Edit Song</string>\r\n    <string name=\"artist_name_edit\">Artist Name</string>\r\n    <string name=\"song_title_edit\">Song Title</string>\r\n    <string name=\"empty_library\">Your library is empty. Add some songs to get started!</string>\r\n    <string name=\"no_search_results\">No songs match your search</string>\r\n    <string name=\"no_liked_songs\">You haven\\'t liked any songs yet</string>\r\n    <string name=\"current_time\">1:44</string>\r\n    <string name=\"duration\">3:50</string>\r\n    <string name=\"_player\">Song Title</string>\r\n    <string name=\"song_title_player\" />\r\n    <string name=\"artist_title_player\">The Weeknd, Daft Punk</string>\r\n    <string name=\"shuffle\">Shuffle</string>\r\n    <string name=\"repeat\">Repeat</string>\r\n    <string name=\"save_update\">Update</string>\r\n    <string name=\"title_add_edit_song\">Title</string>\r\n    <string name=\"song_title_add_edit_song\">Song Title</string>\r\n    <string name=\"artist_add_edit_song\">Artist</string>\r\n    <string name=\"artist_name_add_edit_song\">Artist Name</string>\r\n    <string name=\"file_upload\">file upload</string>\r\n    <string name=\"photo_upload\">photo upload</string>\r\n    <string name=\"background_image\">background image</string>\r\n    <string name=\"login_logo\">login logo</string>\r\n    <string name=\"search_songs_or_artists\">Search songs or artists</string>\r\n    <string name=\"image_search\">image search</string>\r\n    <string name=\"close_search\">close search</string>\r\n    <string name=\"library_icon\">library icon</string>\r\n    <string name=\"no_internet_connection\">No Internet Connection</string>\r\n    <string name=\"circle_background\">circle background</string>\r\n    <string name=\"circle_edit_button\">circle edit button</string>\r\n    <string name=\"song_title_recent_song\">Song Title</string>\r\n    <string name=\"default_album_picture\">default album picture</string>\r\n    <string name=\"millions_of_songs\">Millions of Songs.</string>\r\n    <string name=\"only_on_purrytify\">Only on Purrytify.</string>\r\n    <string name=\"email\">Email</string>\r\n    <string name=\"email_edit\">Email</string>\r\n    <string name=\"password\">Password</string>\r\n    <string name=\"password_edit\">Password</string>\r\n    <string name=\"log_in\">Log In</string>\r\n    <string name=\"check_your_internet\">Please check your internet connection and try again.</string>\r\n    <string name=\"profile\">Profile</string>\r\n    <string name=\"username\">13522xxx</string>\r\n    <string name=\"location\">None</string>\r\n    <string name=\"logout\">Logout</string>\r\n    <string name=\"_135\">135</string>\r\n    <string name=\"songs\">SONGS</string>\r\n    <string name=\"_32\">32</string>\r\n    <string name=\"liked\">LIKED</string>\r\n    <string name=\"_50\">50</string>\r\n    <string name=\"listened\">LISTENED</string>\r\n    <string name=\"artist_recent_song\">Artist</string>\r\n    <string name=\"edit_recent_song\">Edit</string>\r\n    <string name=\"delete_song_icon\">Delete</string>\r\n    <string name=\"artist_song_card\">Artist</string>\r\n    <string name=\"song_title_card\">Song Title</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/res/values/strings.xml	(date 1748195617198)
@@ -27,7 +27,7 @@
     <string name="album_cover_player" />
     <string name="play_pause_song" />
     <string name="next_song" />
-    <string name="previous_song" />
+    <string name="previous_song">Previous</string>
     <string name="edit_song">Edit Song</string>
     <string name="delete_song" />
     <string name="song_title">Song Title</string>
@@ -86,4 +86,29 @@
     <string name="delete_song_icon">Delete</string>
     <string name="artist_song_card">Artist</string>
     <string name="song_title_card">Song Title</string>
+    <string name="top_50_global">Top 50 Global</string>
+    <string name="chart_cover">chart-cover</string>
+    <string name="download_song">download icon</string>
+    <string name="_detail">Nama Artis</string>
+    <string name="_favorit">favorit</string>
+    <string name="_back">back</string>
+    <string name="_options">options</string>
+    <string name="_title">Title</string>
+    <string name="shareUrl">Share URL</string>
+    <string name="shareQRC">Share QR Code</string>
+    <string name="recommendation_cover">Recommendation playlist cover</string>
+    <string name="play">Play</string>
+    <string name="download_all">Download All</string>
+    <string name="sound_capsule">Sound Capsule</string>
+    <string name="time_listened">Time Listened</string>
+    <string name="top_artists">Top Artists</string>
+    <string name="top_songs">Top Songs</string>
+    <string name="export_data">Export Data</string>
+    <string name="no_data_available">No data available</string>
+    <string name="daily_chart">Daily Chart</string>
+    <string name="export_success">Export successful! Check your Downloads folder.</string>
+    <string name="export_failed">Export failed. Please try again.</string>
+    <string name="chart_image_desc">Chart cover image</string>
+    <string name="edit_profile">Edit Profil</string>
+    <string name="next_song_play">next</string>
 </resources>
\ No newline at end of file
Index: .idea/navEditor.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"navEditor-manualLayoutAlgorithm2\">\r\n    <option name=\"myPositions\">\r\n      <map>\r\n        <entry key=\"mobile_navigation.xml\">\r\n          <value>\r\n            <LayoutPositions>\r\n              <option name=\"myPositions\">\r\n                <map>\r\n                  <entry key=\"action_global_nowPlayingFragment\">\r\n                    <value>\r\n                      <LayoutPositions />\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"addSongFragment\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"256\" />\r\n                            <option name=\"y\" value=\"12\" />\r\n                          </Point>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"editSongFragment\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"12\" />\r\n                            <option name=\"y\" value=\"12\" />\r\n                          </Point>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"navigation_home\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"453\" />\r\n                            <option name=\"y\" value=\"113\" />\r\n                          </Point>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"navigation_library\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"38\" />\r\n                            <option name=\"y\" value=\"335\" />\r\n                          </Point>\r\n                        </option>\r\n                        <option name=\"myPositions\">\r\n                          <map>\r\n                            <entry key=\"action_libraryFragment_to_addSongFragment\">\r\n                              <value>\r\n                                <LayoutPositions />\r\n                              </value>\r\n                            </entry>\r\n                          </map>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"navigation_profile\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"451\" />\r\n                            <option name=\"y\" value=\"-300\" />\r\n                          </Point>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"nowPlayingFragment\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"58\" />\r\n                            <option name=\"y\" value=\"3\" />\r\n                          </Point>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"songDetailFragment\">\r\n                    <value>\r\n                      <LayoutPositions>\r\n                        <option name=\"myPosition\">\r\n                          <Point>\r\n                            <option name=\"x\" value=\"12\" />\r\n                            <option name=\"y\" value=\"12\" />\r\n                          </Point>\r\n                        </option>\r\n                      </LayoutPositions>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </LayoutPositions>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/navEditor.xml b/.idea/navEditor.xml
--- a/.idea/navEditor.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/.idea/navEditor.xml	(date 1748195617064)
@@ -8,7 +8,7 @@
             <LayoutPositions>
               <option name="myPositions">
                 <map>
-                  <entry key="action_global_nowPlayingFragment">
+                  <entry key="action_global_songDetailFragment">
                     <value>
                       <LayoutPositions />
                     </value>
@@ -46,6 +46,15 @@
                             <option name="y" value="113" />
                           </Point>
                         </option>
+                        <option name="myPositions">
+                          <map>
+                            <entry key="action_navigation_home_to_songDetailFragment">
+                              <value>
+                                <LayoutPositions />
+                              </value>
+                            </entry>
+                          </map>
+                        </option>
                       </LayoutPositions>
                     </value>
                   </entry>
@@ -61,6 +70,11 @@
                         <option name="myPositions">
                           <map>
                             <entry key="action_libraryFragment_to_addSongFragment">
+                              <value>
+                                <LayoutPositions />
+                              </value>
+                            </entry>
+                            <entry key="action_libraryFragment_to_editSongFragment">
                               <value>
                                 <LayoutPositions />
                               </value>
@@ -82,19 +96,31 @@
                       </LayoutPositions>
                     </value>
                   </entry>
-                  <entry key="nowPlayingFragment">
+                  <entry key="recommendationDetailFragment">
                     <value>
                       <LayoutPositions>
                         <option name="myPosition">
                           <Point>
-                            <option name="x" value="58" />
-                            <option name="y" value="3" />
+                            <option name="x" value="12" />
+                            <option name="y" value="12" />
                           </Point>
                         </option>
                       </LayoutPositions>
                     </value>
                   </entry>
                   <entry key="songDetailFragment">
+                    <value>
+                      <LayoutPositions>
+                        <option name="myPosition">
+                          <Point>
+                            <option name="x" value="12" />
+                            <option name="y" value="12" />
+                          </Point>
+                        </option>
+                      </LayoutPositions>
+                    </value>
+                  </entry>
+                  <entry key="topChartDetailFragment">
                     <value>
                       <LayoutPositions>
                         <option name="myPosition">
Index: app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <color name=\"black\">#FF000000</color>\r\n    <color name=\"white\">#FFFFFFFF</color>\r\n    <color name=\"white_gray\">#C3C3C3</color>\r\n    <color name=\"green\">#1DB954</color>\r\n    <color name=\"dark_gray\">#212121</color>\r\n    <color name=\"gray\">#535353</color>\r\n    <color name=\"light_gray\">#7F7F7F</color>\r\n    <color name=\"blue\">#3386FF</color>\r\n    <color name=\"red\">#FF3333</color>\r\n    <color name=\"your_custom_color\">#00C853</color>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
--- a/app/src/main/res/values/colors.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/res/values/colors.xml	(date 1748195617197)
@@ -10,4 +10,9 @@
     <color name="blue">#3386FF</color>
     <color name="red">#FF3333</color>
     <color name="your_custom_color">#00C853</color>
+    <color name="background_dark">#121212</color>
+    <color name="card_background">#1E1E1E</color>
+    <color name="primary_green">#1DB954</color>
+    <color name="text_secondary">#B3B3B3</color>
+    <color name="divider">#2A2A2A</color>
 </resources>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    android:padding=\"16dp\">\r\n\r\n    <!-- New Songs Title -->\r\n    <TextView\r\n        android:id=\"@+id/labelNewSongs\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/new_songs\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textSize=\"20sp\"\r\n        android:textStyle=\"bold\"\r\n        android:paddingBottom=\"8dp\" />\r\n\r\n    <!-- Horizontal New Songs -->\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/rvNewSongs\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"154dp\"\r\n        android:layout_marginBottom=\"16dp\"\r\n        android:clipToPadding=\"false\"\r\n        android:orientation=\"horizontal\"\r\n        android:overScrollMode=\"never\"\r\n        android:paddingStart=\"8dp\"\r\n        android:paddingEnd=\"8dp\"\r\n        app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\"\r\n        tools:listitem=\"@layout/item_song_card\" />\r\n\r\n    <!-- Recently Played Title -->\r\n    <TextView\r\n        android:id=\"@+id/labelRecentlyPlayed\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/recently_played\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textSize=\"20sp\"\r\n        android:textStyle=\"bold\"\r\n        android:paddingBottom=\"8dp\" />\r\n\r\n    <!-- Recently Played Vertical Scroll -->\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/rvRecentlyPlayed\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_weight=\"1\"\r\n        android:overScrollMode=\"never\"\r\n        android:clipToPadding=\"false\"\r\n        app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\"\r\n        tools:listitem=\"@layout/item_song_list\" />\r\n\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_home.xml b/app/src/main/res/layout/fragment_home.xml
--- a/app/src/main/res/layout/fragment_home.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/res/layout/fragment_home.xml	(date 1748195617186)
@@ -1,11 +1,68 @@
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    android:orientation="vertical"
-    android:padding="16dp">
+    android:fillViewport="true"
+    android:paddingBottom="96dp"
+    android:background="@android:color/black">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:padding="16dp">
 
+    <!-- Made for You / Recommendations Title -->
+    <TextView
+        android:id="@+id/labelRecommendations"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Made for you"
+        android:textColor="@android:color/white"
+        android:textSize="20sp"
+        android:textStyle="bold"
+        android:paddingBottom="8dp" />
+
+    <!-- Horizontal Recommendations -->
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/rvRecommendations"
+        android:layout_width="match_parent"
+        android:layout_height="180dp"
+        android:layout_marginBottom="16dp"
+        android:clipToPadding="false"
+        android:orientation="horizontal"
+        android:overScrollMode="never"
+        android:paddingStart="8dp"
+        android:paddingEnd="8dp"
+        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
+        tools:listitem="@layout/item_recommendation" />
+
+    <!-- Chart Title -->
+    <TextView
+        android:id="@+id/labelCharts"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Charts"
+        android:textColor="@android:color/white"
+        android:textSize="20sp"
+        android:textStyle="bold"
+        android:paddingBottom="8dp" />
+
+    <!-- Horizontal Charts -->
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/rvCharts"
+        android:layout_width="match_parent"
+        android:layout_height="180dp"
+        android:layout_marginBottom="16dp"
+        android:clipToPadding="false"
+        android:orientation="horizontal"
+        android:overScrollMode="never"
+        android:paddingStart="8dp"
+        android:paddingEnd="8dp"
+        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
+        tools:listitem="@layout/item_chart_card" />
+
     <!-- New Songs Title -->
     <TextView
         android:id="@+id/labelNewSongs"
@@ -21,7 +78,7 @@
     <androidx.recyclerview.widget.RecyclerView
         android:id="@+id/rvNewSongs"
         android:layout_width="match_parent"
-        android:layout_height="154dp"
+        android:layout_height="180dp"
         android:layout_marginBottom="16dp"
         android:clipToPadding="false"
         android:orientation="horizontal"
@@ -49,8 +106,10 @@
         android:layout_height="0dp"
         android:layout_weight="1"
         android:overScrollMode="never"
+
         android:clipToPadding="false"
         app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
         tools:listitem="@layout/item_song_list" />
 
-</LinearLayout>
+    </LinearLayout>
+</androidx.core.widget.NestedScrollView>
\ No newline at end of file
Index: settings.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>pluginManagement {\r\n    repositories {\r\n        google {\r\n            content {\r\n                includeGroupByRegex(\"com\\\\.android.*\")\r\n                includeGroupByRegex(\"com\\\\.google.*\")\r\n                includeGroupByRegex(\"androidx.*\")\r\n            }\r\n        }\r\n        mavenCentral()\r\n        gradlePluginPortal()\r\n    }\r\n    plugins {\r\n        id(\"androidx.navigation.safeargs.kotlin\") version \"2.7.5\"\r\n    }\r\n}\r\ndependencyResolutionManagement {\r\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n}\r\n\r\nrootProject.name = \"Purrityfy\"\r\ninclude(\":app\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle.kts b/settings.gradle.kts
--- a/settings.gradle.kts	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/settings.gradle.kts	(date 1748195617201)
@@ -19,6 +19,7 @@
     repositories {
         google()
         mavenCentral()
+        maven { url = uri("https://jitpack.io") }
     }
 }
 
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nagp = \"8.8.1\"\r\nkotlin = \"1.9.24\"\r\ncoreKtx = \"1.15.0\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.2.1\"\r\nespressoCore = \"3.6.1\"\r\nappcompat = \"1.7.0\"\r\nmaterial = \"1.12.0\"\r\nconstraintlayout = \"2.2.1\"\r\nlifecycleLivedataKtx = \"2.8.7\"\r\nlifecycleViewmodelKtx = \"2.8.7\"\r\nnavigationFragmentKtx = \"2.8.9\"\r\nnavigationUiKtx = \"2.8.9\"\r\npaletteKtx = \"1.0.0\"\r\nsafeargs = \"2.7.5\"\r\nlegacySupportV4 = \"1.0.0\"\r\nfragmentKtx = \"1.5.6\"\r\nuiGraphicsAndroid = \"1.7.8\"\r\n\r\n#[versions]\r\n#core-ktx = \"1.10.1\"\r\n#appcompat = \"1.6.1\"\r\n#constraintlayout = \"2.1.4\"\r\n#navigation = \"2.6.0\"\r\n#lifecycle = \"2.6.1\"\r\n#\r\n#[libraries]\r\n#androidx-core-ktx = { module = \"androidx.core:core-ktx\", version.ref = \"core-ktx\" }\r\n#androidx-appcompat = { module = \"androidx.appcompat:appcompat\", version.ref = \"appcompat\" }\r\n#androidx-constraintlayout = { module = \"androidx.constraintlayout:constraintlayout\", version.ref = \"constraintlayout\" }\r\n#androidx-navigation-fragment-ktx = { module = \"androidx.navigation:navigation-fragment-ktx\", version.ref = \"navigation\" }\r\n#androidx-navigation-ui-ktx = { module = \"androidx.navigation:navigation-ui-ktx\", version.ref = \"navigation\" }\r\n#androidx-lifecycle-livedata-ktx = { module = \"androidx.lifecycle:lifecycle-livedata-ktx\", version.ref = \"lifecycle\" }\r\n#androidx-lifecycle-viewmodel-ktx = { module = \"androidx.lifecycle:lifecycle-viewmodel-ktx\", version.ref = \"lifecycle\" }\r\n#\r\n#[versions]\r\n#core-ktx = \"1.10.1\"\r\n#appcompat = \"1.6.1\"\r\n#constraintlayout = \"2.1.4\"\r\n#navigation = \"2.6.0\"\r\n#lifecycle = \"2.6.1\"\r\n#\r\n#[libraries]\r\n#androidx-core-ktx = { module = \"androidx.core:core-ktx\", version.ref = \"core-ktx\" }\r\n#androidx-appcompat = { module = \"androidx.appcompat:appcompat\", version.ref = \"appcompat\" }\r\n#androidx-constraintlayout = { module = \"androidx.constraintlayout:constraintlayout\", version.ref = \"constraintlayout\" }\r\n#androidx-navigation-fragment-ktx = { module = \"androidx.navigation:navigation-fragment-ktx\", version.ref = \"navigation\" }\r\n#androidx-navigation-ui-ktx = { module = \"androidx.navigation:navigation-ui-ktx\", version.ref = \"navigation\" }\r\n#androidx-lifecycle-livedata-ktx = { module = \"androidx.lifecycle:lifecycle-livedata-ktx\", version.ref = \"lifecycle\" }\r\n#androidx-lifecycle-viewmodel-ktx = { module = \"androidx.lifecycle:lifecycle-viewmodel-ktx\", version.ref = \"lifecycle\" }\r\n#\r\n\r\n[libraries]\r\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nandroidx-appcompat = { group = \"androidx.appcompat\", name = \"appcompat\", version.ref = \"appcompat\" }\r\nmaterial = { group = \"com.google.android.material\", name = \"material\", version.ref = \"material\" }\r\nandroidx-constraintlayout = { group = \"androidx.constraintlayout\", name = \"constraintlayout\", version.ref = \"constraintlayout\" }\r\nandroidx-lifecycle-livedata-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-livedata-ktx\", version.ref = \"lifecycleLivedataKtx\" }\r\nandroidx-lifecycle-viewmodel-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-viewmodel-ktx\", version.ref = \"lifecycleViewmodelKtx\" }\r\nandroidx-navigation-fragment-ktx = { group = \"androidx.navigation\", name = \"navigation-fragment-ktx\", version.ref = \"navigationFragmentKtx\" }\r\nandroidx-navigation-ui-ktx = { group = \"androidx.navigation\", name = \"navigation-ui-ktx\", version.ref = \"navigationUiKtx\" }\r\nandroidx-palette-ktx = { group = \"androidx.palette\", name = \"palette-ktx\", version.ref = \"paletteKtx\" }\r\nandroidx-legacy-support-v4 = { group = \"androidx.legacy\", name = \"legacy-support-v4\", version.ref = \"legacySupportV4\" }\r\nandroidx-fragment-ktx = { group = \"androidx.fragment\", name = \"fragment-ktx\", version.ref = \"fragmentKtx\" }\r\nandroidx-ui-graphics-android = { group = \"androidx.compose.ui\", name = \"ui-graphics-android\", version.ref = \"uiGraphicsAndroid\" }\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\nkotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\r\nnavigation-safeargs = { id = \"androidx.navigation.safeargs\", version.ref = \"safeargs\" }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/gradle/libs.versions.toml	(date 1748195617200)
@@ -17,6 +17,7 @@
 legacySupportV4 = "1.0.0"
 fragmentKtx = "1.5.6"
 uiGraphicsAndroid = "1.7.8"
+googleServices = "4.3.15"
 
 #[versions]
 #core-ktx = "1.10.1"
@@ -72,4 +73,5 @@
 android-application = { id = "com.android.application", version.ref = "agp" }
 kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
 navigation-safeargs = { id = "androidx.navigation.safeargs", version.ref = "safeargs" }
+google-services = { id = "com.google.gms.google-services", version.ref = "googleServices" }
 
Index: app/src/main/java/com/tubes/purry/utils/AudioRoutingManager.kt
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/utils/AudioRoutingManager.kt b/app/src/main/java/com/tubes/purry/utils/AudioRoutingManager.kt
new file mode 100644
--- /dev/null	(date 1748195617136)
+++ b/app/src/main/java/com/tubes/purry/utils/AudioRoutingManager.kt	(date 1748195617136)
@@ -0,0 +1,358 @@
+package com.tubes.purry.utils
+import android.content.BroadcastReceiver
+import android.content.Context
+import android.content.Intent
+import android.content.IntentFilter
+import android.media.AudioDeviceInfo
+import android.media.AudioManager
+import android.os.Build
+import android.util.Log
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import com.tubes.purry.data.model.AudioDevice
+import com.tubes.purry.data.model.AudioDeviceType
+import android.bluetooth.BluetoothAdapter
+import android.bluetooth.BluetoothDevice
+
+class AudioRoutingManager(private val context: Context) {
+    private val audioManager = context.getSystemService(Context.AUDIO_SERVICE) as AudioManager
+    private val _availableDevices = MutableLiveData<List<AudioDevice>>()
+    val availableDevices: LiveData<List<AudioDevice>> = _availableDevices
+    private val _activeDevice = MutableLiveData<AudioDevice?>()
+    val activeDevice: LiveData<AudioDevice?> = _activeDevice
+    private val _connectionError = MutableLiveData<String?>()
+    val connectionError: LiveData<String?> = _connectionError
+    // Callback for when audio routing actually changes
+    var onAudioRoutingChanged: ((AudioDevice) -> Unit)? = null
+    // Keep track of current routing mode
+    private var currentRoutingMode: AudioRoutingMode = AudioRoutingMode.AUTO
+    private var isBluetoothScoOn = false
+    enum class AudioRoutingMode {
+        AUTO,           // Let Android decide
+        SPEAKER,        // Force speaker
+        WIRED_HEADSET,  // Force wired headset
+        BLUETOOTH,      // Force Bluetooth
+        EARPIECE        // Force earpiece (for calls)
+    }
+    // BroadcastReceiver to monitor audio device changes
+    private val audioDeviceReceiver = object : BroadcastReceiver() {
+        override fun onReceive(context: Context?, intent: Intent?) {
+            when (intent?.action) {
+                AudioManager.ACTION_HEADSET_PLUG -> {
+                    Log.d("AudioRouting", "🎧 Headset plug event")
+                    refreshDeviceList()
+                }
+                AudioManager.ACTION_SCO_AUDIO_STATE_UPDATED -> {
+                    val state = intent.getIntExtra(AudioManager.EXTRA_SCO_AUDIO_STATE, -1)
+                    Log.d("AudioRouting", "🔵 Bluetooth SCO state: $state")
+                    handleBluetoothScoStateChange(state)
+                }
+                "android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED" -> {
+                    Log.d("AudioRouting", "🔵 Bluetooth headset connection changed")
+                    refreshDeviceList()
+                }
+            }
+        }
+    }
+    init {
+        registerReceivers()
+        refreshDeviceList()
+    }
+    private fun registerReceivers() {
+        val filter = IntentFilter().apply {
+            addAction(AudioManager.ACTION_HEADSET_PLUG)
+            addAction(AudioManager.ACTION_SCO_AUDIO_STATE_UPDATED)
+            addAction("android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED")
+        }
+        context.registerReceiver(audioDeviceReceiver, filter)
+    }
+    fun refreshDeviceList() {
+        val devices = mutableListOf<AudioDevice>()
+        val seenDevices = mutableSetOf<String>() // To prevent duplicates
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            // Get all available audio devices
+            val audioDevices = audioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS)
+            for (deviceInfo in audioDevices) {
+                val audioDevice = mapToAudioDevice(deviceInfo)
+                val deviceKey = "${audioDevice.type}_${audioDevice.name}"
+                if (!seenDevices.contains(deviceKey)) {
+                    seenDevices.add(deviceKey)
+                    devices.add(audioDevice)
+                }
+            }
+        } else {
+            // Fallback for older Android versions
+            devices.addAll(getLegacyAudioDevices())
+        }
+        // Always add internal speaker if not present
+        if (!devices.any { it.type == AudioDeviceType.INTERNAL_SPEAKER }) {
+            devices.add(0, AudioDevice(
+                id = "internal_speaker",
+                name = "Phone Speaker",
+                type = AudioDeviceType.INTERNAL_SPEAKER,
+                isConnected = true,
+                isActive = currentRoutingMode == AudioRoutingMode.SPEAKER
+            ))
+        }
+        Log.d("AudioRouting", "📱 Found ${devices.size} audio devices")
+        val pairedBluetoothDevices = getAllPairedBluetoothDevices()
+        devices.addAll(
+            pairedBluetoothDevices.filter { paired ->
+                devices.none { it.id == paired.id }
+            }
+        )
+        _availableDevices.postValue(devices)
+        // Update active device
+        updateActiveDevice(devices)
+    }
+    private fun mapToAudioDevice(deviceInfo: AudioDeviceInfo): AudioDevice {
+        val type = when (deviceInfo.type) {
+            AudioDeviceInfo.TYPE_BUILTIN_SPEAKER -> AudioDeviceType.INTERNAL_SPEAKER
+            AudioDeviceInfo.TYPE_WIRED_HEADPHONES,
+            AudioDeviceInfo.TYPE_WIRED_HEADSET -> AudioDeviceType.WIRED_HEADPHONES
+            AudioDeviceInfo.TYPE_BLUETOOTH_A2DP,
+            AudioDeviceInfo.TYPE_BLUETOOTH_SCO -> AudioDeviceType.BLUETOOTH_HEADPHONES
+            AudioDeviceInfo.TYPE_USB_HEADSET,
+            AudioDeviceInfo.TYPE_USB_DEVICE -> AudioDeviceType.USB_AUDIO
+            else -> AudioDeviceType.UNKNOWN
+        }
+        return AudioDevice(
+            id = "${deviceInfo.type}_${deviceInfo.id}",
+            name = getDeviceName(deviceInfo),
+            type = type,
+            isConnected = true,
+            isActive = isDeviceActive(deviceInfo)
+        )
+    }
+    private fun getDeviceName(deviceInfo: AudioDeviceInfo): String {
+        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
+            deviceInfo.productName?.toString() ?: getDefaultDeviceName(deviceInfo.type)
+        } else {
+            getDefaultDeviceName(deviceInfo.type)
+        }
+    }
+    private fun getDefaultDeviceName(type: Int): String {
+        return when (type) {
+            AudioDeviceInfo.TYPE_BUILTIN_SPEAKER -> "Phone Speaker"
+            AudioDeviceInfo.TYPE_BUILTIN_EARPIECE -> "Phone Earpiece"
+            AudioDeviceInfo.TYPE_WIRED_HEADPHONES -> "Wired Headphones"
+            AudioDeviceInfo.TYPE_WIRED_HEADSET -> "Wired Headset"
+            AudioDeviceInfo.TYPE_BLUETOOTH_A2DP -> "Bluetooth Audio"
+            AudioDeviceInfo.TYPE_BLUETOOTH_SCO -> "Bluetooth Headset"
+            AudioDeviceInfo.TYPE_USB_HEADSET -> "USB Headset"
+            AudioDeviceInfo.TYPE_USB_DEVICE -> "USB Audio Device"
+            else -> "Unknown Audio Device"
+        }
+    }
+    private fun isDeviceActive(deviceInfo: AudioDeviceInfo): Boolean {
+        return when (deviceInfo.type) {
+            AudioDeviceInfo.TYPE_BUILTIN_SPEAKER -> {
+                currentRoutingMode == AudioRoutingMode.SPEAKER
+            }
+            AudioDeviceInfo.TYPE_WIRED_HEADPHONES,
+            AudioDeviceInfo.TYPE_WIRED_HEADSET -> {
+                currentRoutingMode == AudioRoutingMode.WIRED_HEADSET && audioManager.isWiredHeadsetOn
+            }
+            AudioDeviceInfo.TYPE_BLUETOOTH_A2DP,
+            AudioDeviceInfo.TYPE_BLUETOOTH_SCO -> {
+                currentRoutingMode == AudioRoutingMode.BLUETOOTH && (audioManager.isBluetoothA2dpOn || audioManager.isBluetoothScoOn)
+            }
+            else -> false
+        }
+    }
+    private fun getLegacyAudioDevices(): List<AudioDevice> {
+        val devices = mutableListOf<AudioDevice>()
+        // Internal speaker (always available)
+        devices.add(AudioDevice(
+            id = "internal_speaker",
+            name = "Phone Speaker",
+            type = AudioDeviceType.INTERNAL_SPEAKER,
+            isConnected = true,
+            isActive = currentRoutingMode == AudioRoutingMode.SPEAKER
+        ))
+        // Wired headset
+        if (audioManager.isWiredHeadsetOn) {
+            devices.add(AudioDevice(
+                id = "wired_headset",
+                name = "Wired Headset",
+                type = AudioDeviceType.WIRED_HEADPHONES,
+                isConnected = true,
+                isActive = currentRoutingMode == AudioRoutingMode.WIRED_HEADSET
+            ))
+        }
+        // Bluetooth
+        if (audioManager.isBluetoothA2dpOn || audioManager.isBluetoothScoOn) {
+            devices.add(AudioDevice(
+                id = "bluetooth_audio",
+                name = "Bluetooth Audio",
+                type = AudioDeviceType.BLUETOOTH_HEADPHONES,
+                isConnected = true,
+                isActive = currentRoutingMode == AudioRoutingMode.BLUETOOTH
+            ))
+        }
+        return devices
+    }
+    private fun updateActiveDevice(devices: List<AudioDevice>) {
+        val activeDevice = devices.find { it.isActive }
+        _activeDevice.postValue(activeDevice)
+    }
+    fun selectAudioDevice(device: AudioDevice): Boolean {
+        Log.d("AudioRouting", "🎯 Selecting audio device: ${device.name} (${device.type})")
+        return try {
+            when (device.type) {
+                AudioDeviceType.INTERNAL_SPEAKER -> {
+                    setAudioRouting(AudioRoutingMode.SPEAKER)
+                }
+                AudioDeviceType.WIRED_HEADPHONES -> {
+                    if (audioManager.isWiredHeadsetOn) {
+                        setAudioRouting(AudioRoutingMode.WIRED_HEADSET)
+                    } else {
+                        _connectionError.postValue("Wired headset not connected")
+                        return false
+                    }
+                }
+                AudioDeviceType.BLUETOOTH_HEADPHONES,
+                AudioDeviceType.BLUETOOTH_SPEAKER -> {
+                    setBluetoothAudio(true)
+                }
+                else -> {
+                    Log.w("AudioRouting", "⚠️ Unsupported device type: ${device.type}")
+                    return false
+                }
+            }
+            // Notify about the routing change
+            onAudioRoutingChanged?.invoke(device)
+            true
+        } catch (e: Exception) {
+            Log.e("AudioRouting", "❌ Failed to select audio device: ${e.message}")
+            _connectionError.postValue("Failed to switch to ${device.name}: ${e.message}")
+            false
+        }
+    }
+    private fun setAudioRouting(mode: AudioRoutingMode) {
+        Log.d("AudioRouting", "🔄 Setting audio routing mode: $mode")
+        currentRoutingMode = mode
+        // Turn off Bluetooth SCO if switching away from Bluetooth
+        if (mode != AudioRoutingMode.BLUETOOTH && isBluetoothScoOn) {
+            audioManager.stopBluetoothSco()
+            audioManager.isBluetoothScoOn = false
+            isBluetoothScoOn = false
+        }
+        when (mode) {
+            AudioRoutingMode.SPEAKER -> {
+                audioManager.isSpeakerphoneOn = true
+                Log.d("AudioRouting", "🔊 Switched to speaker")
+            }
+            AudioRoutingMode.WIRED_HEADSET -> {
+                audioManager.isSpeakerphoneOn = false
+                Log.d("AudioRouting", "🎧 Switched to wired headset")
+            }
+            AudioRoutingMode.AUTO -> {
+                audioManager.isSpeakerphoneOn = false
+                Log.d("AudioRouting", "🤖 Switched to auto mode")
+            }
+            else -> {
+                Log.d("AudioRouting", "🔄 Routing mode set: $mode")
+            }
+        }
+        // Refresh device list to update active states
+        refreshDeviceList()
+    }
+    private fun setBluetoothAudio(enable: Boolean) {
+        Log.d("AudioRouting", "🔵 Setting Bluetooth audio: $enable")
+        if (enable) {
+            // Check if Bluetooth is available
+            if (!audioManager.isBluetoothA2dpOn && !audioManager.isBluetoothScoOn) {
+                Log.w("AudioRouting", "⚠️ No Bluetooth audio devices connected")
+                _connectionError.postValue("No Bluetooth audio devices connected")
+                return
+            }
+            // Start Bluetooth SCO for better audio quality
+            if (audioManager.isBluetoothScoAvailableOffCall) {
+                audioManager.startBluetoothSco()
+                audioManager.isBluetoothScoOn = true
+                isBluetoothScoOn = true
+            }
+            currentRoutingMode = AudioRoutingMode.BLUETOOTH
+            audioManager.isSpeakerphoneOn = false
+            Log.d("AudioRouting", "🔵 Bluetooth audio enabled")
+        } else {
+            audioManager.stopBluetoothSco()
+            audioManager.isBluetoothScoOn = false
+            isBluetoothScoOn = false
+            // Fall back to auto routing
+            currentRoutingMode = AudioRoutingMode.AUTO
+            Log.d("AudioRouting", "🔵 Bluetooth audio disabled")
+        }
+        refreshDeviceList()
+    }
+    private fun getAllPairedBluetoothDevices(): List<AudioDevice> {
+        val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
+        val pairedDevices: Set<BluetoothDevice>? = bluetoothAdapter?.bondedDevices
+        val result = mutableListOf<AudioDevice>()
+
+        pairedDevices?.forEach { device ->
+            val name = device.name ?: "Bluetooth Device"
+            val address = device.address ?: ""
+            val id = "bt_${address.replace(":", "")}"
+
+            val audioDevice = AudioDevice(
+                id = id,
+                name = name,
+                type = AudioDeviceType.BLUETOOTH_HEADPHONES, // or BLUETOOTH_SPEAKER, based on your logic
+                isConnected = false,  // not currently connected
+                isActive = false,
+                bluetoothAddress = address,
+                deviceInfo = device.toString()
+            )
+
+            // Add only if not already seen in connected devices
+            if (!result.any { it.id == audioDevice.id }) {
+                result.add(audioDevice)
+            }
+        }
+
+        return result
+    }
+    private fun handleBluetoothScoStateChange(state: Int) {
+        when (state) {
+            AudioManager.SCO_AUDIO_STATE_CONNECTED -> {
+                Log.d("AudioRouting", "🔵 Bluetooth SCO connected")
+                isBluetoothScoOn = true
+                refreshDeviceList()
+            }
+            AudioManager.SCO_AUDIO_STATE_DISCONNECTED -> {
+                Log.d("AudioRouting", "🔵 Bluetooth SCO disconnected")
+                isBluetoothScoOn = false
+                if (currentRoutingMode == AudioRoutingMode.BLUETOOTH) {
+                    // Auto-fallback to speaker or headset
+                    if (audioManager.isWiredHeadsetOn) {
+                        setAudioRouting(AudioRoutingMode.WIRED_HEADSET)
+                    } else {
+                        setAudioRouting(AudioRoutingMode.SPEAKER)
+                    }
+                }
+                refreshDeviceList()
+            }
+            AudioManager.SCO_AUDIO_STATE_CONNECTING -> {
+                Log.d("AudioRouting", "🔵 Bluetooth SCO connecting...")
+            }
+        }
+    }
+    fun clearError() {
+        _connectionError.postValue(null)
+    }
+    fun cleanup() {
+        try {
+            context.unregisterReceiver(audioDeviceReceiver)
+            // Clean up Bluetooth SCO if active
+            if (isBluetoothScoOn) {
+                audioManager.stopBluetoothSco()
+                audioManager.isBluetoothScoOn = false
+            }
+            Log.d("AudioRouting", "🧹 AudioRoutingManager cleaned up")
+        } catch (e: Exception) {
+            Log.e("AudioRouting", "❌ Error during cleanup: ${e.message}")
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/utils/PermissionManager.kt
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/utils/PermissionManager.kt b/app/src/main/java/com/tubes/purry/utils/PermissionManager.kt
new file mode 100644
--- /dev/null	(date 1748195617140)
+++ b/app/src/main/java/com/tubes/purry/utils/PermissionManager.kt	(date 1748195617140)
@@ -0,0 +1,140 @@
+package com.tubes.purry.utils
+
+import android.Manifest
+import android.app.Activity
+import android.content.pm.PackageManager
+import android.os.Build
+import androidx.core.app.ActivityCompat
+import androidx.core.content.ContextCompat
+import androidx.fragment.app.Fragment
+
+class PermissionManager {
+
+    companion object {
+        const val BLUETOOTH_PERMISSION_REQUEST = 1001
+        const val AUDIO_PERMISSION_REQUEST = 1002
+
+        private val BLUETOOTH_PERMISSIONS = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+            arrayOf(
+                Manifest.permission.BLUETOOTH_CONNECT,
+                Manifest.permission.BLUETOOTH_SCAN,
+                Manifest.permission.ACCESS_FINE_LOCATION
+            )
+        } else {
+            arrayOf(
+                Manifest.permission.BLUETOOTH,
+                Manifest.permission.BLUETOOTH_ADMIN,
+                Manifest.permission.ACCESS_FINE_LOCATION
+            )
+        }
+
+        private val AUDIO_PERMISSIONS = arrayOf(
+            Manifest.permission.MODIFY_AUDIO_SETTINGS,
+            Manifest.permission.RECORD_AUDIO
+        )
+    }
+
+    fun checkBluetoothPermissions(activity: Activity): Boolean {
+        return BLUETOOTH_PERMISSIONS.all { permission ->
+            ContextCompat.checkSelfPermission(activity, permission) == PackageManager.PERMISSION_GRANTED
+        }
+    }
+
+    fun checkAudioPermissions(activity: Activity): Boolean {
+        return AUDIO_PERMISSIONS.all { permission ->
+            ContextCompat.checkSelfPermission(activity, permission) == PackageManager.PERMISSION_GRANTED
+        }
+    }
+
+    fun requestBluetoothPermissions(activity: Activity) {
+        val missingPermissions = BLUETOOTH_PERMISSIONS.filter { permission ->
+            ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED
+        }.toTypedArray()
+
+        if (missingPermissions.isNotEmpty()) {
+            ActivityCompat.requestPermissions(
+                activity,
+                missingPermissions,
+                BLUETOOTH_PERMISSION_REQUEST
+            )
+        }
+    }
+
+    fun requestAudioPermissions(activity: Activity) {
+        val missingPermissions = AUDIO_PERMISSIONS.filter { permission ->
+            ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED
+        }.toTypedArray()
+
+        if (missingPermissions.isNotEmpty()) {
+            ActivityCompat.requestPermissions(
+                activity,
+                missingPermissions,
+                AUDIO_PERMISSION_REQUEST
+            )
+        }
+    }
+
+    fun checkBluetoothPermissions(fragment: Fragment): Boolean {
+        return BLUETOOTH_PERMISSIONS.all { permission ->
+            ContextCompat.checkSelfPermission(fragment.requireContext(), permission) == PackageManager.PERMISSION_GRANTED
+        }
+    }
+
+    fun checkAudioPermissions(fragment: Fragment): Boolean {
+        return AUDIO_PERMISSIONS.all { permission ->
+            ContextCompat.checkSelfPermission(fragment.requireContext(), permission) == PackageManager.PERMISSION_GRANTED
+        }
+    }
+
+    fun requestBluetoothPermissions(fragment: Fragment) {
+        val missingPermissions = BLUETOOTH_PERMISSIONS.filter { permission ->
+            ContextCompat.checkSelfPermission(fragment.requireContext(), permission) != PackageManager.PERMISSION_GRANTED
+        }.toTypedArray()
+
+        if (missingPermissions.isNotEmpty()) {
+            fragment.requestPermissions(
+                missingPermissions,
+                BLUETOOTH_PERMISSION_REQUEST
+            )
+        }
+    }
+
+    fun requestAudioPermissions(fragment: Fragment) {
+        val missingPermissions = AUDIO_PERMISSIONS.filter { permission ->
+            ContextCompat.checkSelfPermission(fragment.requireContext(), permission) != PackageManager.PERMISSION_GRANTED
+        }.toTypedArray()
+
+        if (missingPermissions.isNotEmpty()) {
+            fragment.requestPermissions(
+                missingPermissions,
+                AUDIO_PERMISSION_REQUEST
+            )
+        }
+    }
+
+    fun handlePermissionResult(
+        requestCode: Int,
+        grantResults: IntArray,
+        onBluetoothGranted: () -> Unit = {},
+        onBluetoothDenied: () -> Unit = {},
+        onAudioGranted: () -> Unit = {},
+        onAudioDenied: () -> Unit = {}
+    ) {
+        when (requestCode) {
+            BLUETOOTH_PERMISSION_REQUEST -> {
+                if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
+                    onBluetoothGranted()
+                } else {
+                    onBluetoothDenied()
+                }
+            }
+            AUDIO_PERMISSION_REQUEST -> {
+                if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
+                    onAudioGranted()
+                } else {
+                    onAudioDenied()
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/res/drawable/ic_usb_audio.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_usb_audio.xml b/app/src/main/res/drawable/ic_usb_audio.xml
new file mode 100644
--- /dev/null	(date 1748195617162)
+++ b/app/src/main/res/drawable/ic_usb_audio.xml	(date 1748195617162)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M15,7V4H9V7H7L12,12L17,7H15ZM9,14V17H15V14H17L12,19L7,14H9Z" />
+</vector>
Index: app/src/main/java/com/tubes/purry/ui/library/EditSongBottomSheetFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.library\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment\r\nimport com.tubes.purry.R\r\nimport com.tubes.purry.data.model.Song\r\nimport com.tubes.purry.databinding.FragmentAddSongBottomSheetBinding\r\nimport com.tubes.purry.utils.extractAudioMetadata\r\nimport androidx.core.net.toUri\r\n\r\nclass EditSongBottomSheetFragment(private val song: Song) : BottomSheetDialogFragment() {\r\n\r\n    private var _binding: FragmentAddSongBottomSheetBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private lateinit var viewModel: SongViewModel\r\n\r\n    private var audioUri: Uri? = null\r\n    private var duration: Int = 0\r\n    private var imageUri: Uri? = null\r\n\r\n    private val pickImage =\r\n        registerForActivityResult(ActivityResultContracts.OpenDocument()) { uri ->\r\n            uri?.let {\r\n                imageUri = it\r\n                requireContext().contentResolver.takePersistableUriPermission(\r\n                    it,\r\n                    Intent.FLAG_GRANT_READ_URI_PERMISSION\r\n                )\r\n                binding.imgUpload.setImageURI(it)\r\n            }\r\n    }\r\n\r\n    private val pickAudio =\r\n        registerForActivityResult(ActivityResultContracts.OpenDocument()) { uri ->\r\n            uri?.let {\r\n                audioUri = it\r\n                requireContext().contentResolver.takePersistableUriPermission(\r\n                    it,\r\n                    Intent.FLAG_GRANT_READ_URI_PERMISSION\r\n                )\r\n                val metadata = extractAudioMetadata(requireContext(), it)\r\n                binding.inputTitle.setText(metadata.title ?: song.title)\r\n                binding.inputArtist.setText(metadata.artist ?: song.artist)\r\n                duration = metadata.duration\r\n            }\r\n        }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        viewModel = ViewModelProvider(\r\n            this,\r\n            SongViewModelFactory(requireContext())\r\n        )[SongViewModel::class.java]\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentAddSongBottomSheetBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        audioUri = song.filePath?.toUri()\r\n        imageUri = song.coverPath?.toUri()\r\n        duration = song.duration\r\n\r\n        binding.inputTitle.setText(song.title)\r\n        binding.inputArtist.setText(song.artist)\r\n        binding.textTitle.text = getString(R.string.edit_song)\r\n        binding.btnSave.text = getString(R.string.save_update)\r\n        song.coverPath?.let { binding.imgUpload.setImageURI(it.toUri()) }\r\n\r\n        setupListeners()\r\n    }\r\n\r\n    private fun setupListeners() {\r\n        binding.imgUpload.setOnClickListener {\r\n            pickImage.launch(arrayOf(\"image/*\"))\r\n        }\r\n\r\n        binding.btnUploadFile.setOnClickListener {\r\n            pickAudio.launch(arrayOf(\"audio/*\"))\r\n        }\r\n\r\n        binding.btnSave.setOnClickListener {\r\n            saveUpdatedSong()\r\n        }\r\n\r\n        binding.btnCancel.setOnClickListener {\r\n            dismiss()\r\n        }\r\n    }\r\n\r\n    private fun saveUpdatedSong() {\r\n        val title = binding.inputTitle.text.toString()\r\n        val artist = binding.inputArtist.text.toString()\r\n        val filePath = audioUri?.toString() ?: song.filePath\r\n\r\n        if (filePath.isNullOrBlank()) {\r\n            Toast.makeText(requireContext(), \"Please select an audio file\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        if (title.isBlank()) {\r\n            Toast.makeText(requireContext(), \"Title cannot be empty\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        if (artist.isBlank()) {\r\n            Toast.makeText(requireContext(), \"Artist cannot be empty\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        val updatedSong = song.copy(\r\n            title = title,\r\n            artist = artist,\r\n            filePath = filePath,\r\n            coverPath = imageUri?.toString(),\r\n            duration = duration\r\n        )\r\n\r\n        viewModel.updateSong(updatedSong)\r\n        Toast.makeText(requireContext(), \"Song updated\", Toast.LENGTH_SHORT).show()\r\n        dismiss()\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/library/EditSongBottomSheetFragment.kt b/app/src/main/java/com/tubes/purry/ui/library/EditSongBottomSheetFragment.kt
--- a/app/src/main/java/com/tubes/purry/ui/library/EditSongBottomSheetFragment.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/library/EditSongBottomSheetFragment.kt	(date 1748195617117)
@@ -16,6 +16,7 @@
 import com.tubes.purry.databinding.FragmentAddSongBottomSheetBinding
 import com.tubes.purry.utils.extractAudioMetadata
 import androidx.core.net.toUri
+import com.tubes.purry.utils.parseDuration
 
 class EditSongBottomSheetFragment(private val song: Song) : BottomSheetDialogFragment() {
 
@@ -25,7 +26,7 @@
     private lateinit var viewModel: SongViewModel
 
     private var audioUri: Uri? = null
-    private var duration: Int = 0
+    private var duration: String = ""
     private var imageUri: Uri? = null
 
     private val pickImage =
@@ -51,7 +52,7 @@
                 val metadata = extractAudioMetadata(requireContext(), it)
                 binding.inputTitle.setText(metadata.title ?: song.title)
                 binding.inputArtist.setText(metadata.artist ?: song.artist)
-                duration = metadata.duration
+                duration = duration.ifBlank { "0:00" }
             }
         }
 
@@ -78,7 +79,7 @@
 
         audioUri = song.filePath?.toUri()
         imageUri = song.coverPath?.toUri()
-        duration = song.duration
+        duration = song.duration.toString()
 
         binding.inputTitle.setText(song.title)
         binding.inputArtist.setText(song.artist)
@@ -132,7 +133,7 @@
             artist = artist,
             filePath = filePath,
             coverPath = imageUri?.toString(),
-            duration = duration
+            duration = parseDuration(duration)
         )
 
         viewModel.updateSong(updatedSong)
Index: app/src/main/java/com/tubes/purry/ui/library/AddSongBottomSheetFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.library\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment\r\nimport com.tubes.purry.data.model.Song\r\nimport com.tubes.purry.databinding.FragmentAddSongBottomSheetBinding\r\nimport com.tubes.purry.ui.player.NowPlayingViewModel\r\nimport com.tubes.purry.utils.SessionManager\r\nimport com.tubes.purry.utils.extractAudioMetadata\r\nimport java.util.UUID\r\n\r\nclass AddSongBottomSheetFragment : BottomSheetDialogFragment() {\r\n\r\n    private var _binding: FragmentAddSongBottomSheetBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private lateinit var sessionManager: SessionManager\r\n    private lateinit var viewModel: SongViewModel\r\n    private lateinit var nowPlayingViewModel: NowPlayingViewModel\r\n\r\n\r\n    private var audioUri: Uri? = null\r\n    private var duration: Int = 0\r\n    private var imageUri: Uri? = null\r\n\r\n    private val pickImage =\r\n        registerForActivityResult(ActivityResultContracts.OpenDocument()) { uri ->\r\n            uri?.let {\r\n                try {\r\n                    requireContext().contentResolver.takePersistableUriPermission(\r\n                        it, Intent.FLAG_GRANT_READ_URI_PERMISSION\r\n                    )\r\n                    imageUri = it\r\n                } catch (_: SecurityException) {}\r\n                binding.imgUpload.setImageURI(it)\r\n            }\r\n        }\r\n\r\n    private val pickAudio =\r\n        registerForActivityResult(ActivityResultContracts.OpenDocument()) { uri ->\r\n            uri?.let {\r\n                audioUri = it\r\n                requireContext().contentResolver.takePersistableUriPermission(\r\n                    it,\r\n                    Intent.FLAG_GRANT_READ_URI_PERMISSION\r\n                )\r\n                val metadata = extractAudioMetadata(requireContext(), it)\r\n\r\n                if (binding.inputTitle.text.isNullOrBlank() && !metadata.title.isNullOrBlank()) {\r\n                    binding.inputTitle.setText(metadata.title)\r\n                }\r\n\r\n                if (binding.inputArtist.text.isNullOrBlank() && !metadata.artist.isNullOrBlank()) {\r\n                    binding.inputArtist.setText(metadata.artist)\r\n                }\r\n                duration = metadata.duration\r\n            }\r\n        }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        sessionManager = SessionManager(requireContext())\r\n        viewModel = ViewModelProvider(\r\n            this,\r\n            SongViewModelFactory(requireContext())\r\n        )[SongViewModel::class.java]\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentAddSongBottomSheetBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        nowPlayingViewModel = ViewModelProvider(requireActivity())[NowPlayingViewModel::class.java]\r\n        setupListeners()\r\n    }\r\n\r\n    private fun setupListeners() {\r\n        binding.imgUpload.setOnClickListener {\r\n            pickImage.launch(arrayOf(\"image/*\"))\r\n        }\r\n\r\n        binding.btnUploadFile.setOnClickListener {\r\n            pickAudio.launch(arrayOf(\"audio/*\"))\r\n        }\r\n\r\n        binding.btnSave.setOnClickListener {\r\n            saveNewSong()\r\n        }\r\n\r\n        binding.btnCancel.setOnClickListener {\r\n            dismiss()\r\n        }\r\n    }\r\n\r\n    private fun saveNewSong() {\r\n        val title = binding.inputTitle.text.toString()\r\n        val artist = binding.inputArtist.text.toString()\r\n        val filePath = audioUri?.toString() ?: \"\"\r\n\r\n        // Validation\r\n        if (audioUri == null) {\r\n            Toast.makeText(requireContext(), \"Please select an audio file\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        if (title.isBlank()) {\r\n            Toast.makeText(requireContext(), \"Title cannot be empty\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        if (artist.isBlank()) {\r\n            Toast.makeText(requireContext(), \"Artist cannot be empty\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        val userId = sessionManager.getUserId()\r\n\r\n        if (userId == null) {\r\n            Toast.makeText(requireContext(), \"User not logged in\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        val song = Song(\r\n            id = UUID.randomUUID().toString(),\r\n            title = title,\r\n            artist = artist,\r\n            filePath = filePath,\r\n            resId = null,\r\n            coverResId = null,\r\n            coverPath = imageUri?.toString() ?: \"\",\r\n            duration = duration,\r\n            isLiked = false,\r\n            isLocal = true,\r\n            uploadedBy = userId\r\n        )\r\n\r\n        viewModel.insertSong(song)\r\n        nowPlayingViewModel.addToQueue(song, requireContext())\r\n\r\n        Toast.makeText(requireContext(), \"Song added\", Toast.LENGTH_SHORT).show()\r\n        dismiss()\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/library/AddSongBottomSheetFragment.kt b/app/src/main/java/com/tubes/purry/ui/library/AddSongBottomSheetFragment.kt
--- a/app/src/main/java/com/tubes/purry/ui/library/AddSongBottomSheetFragment.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/library/AddSongBottomSheetFragment.kt	(date 1748195617116)
@@ -15,6 +15,7 @@
 import com.tubes.purry.ui.player.NowPlayingViewModel
 import com.tubes.purry.utils.SessionManager
 import com.tubes.purry.utils.extractAudioMetadata
+import com.tubes.purry.utils.parseDuration
 import java.util.UUID
 
 class AddSongBottomSheetFragment : BottomSheetDialogFragment() {
@@ -28,7 +29,7 @@
 
 
     private var audioUri: Uri? = null
-    private var duration: Int = 0
+    private var duration: String = null.toString()
     private var imageUri: Uri? = null
 
     private val pickImage =
@@ -61,7 +62,7 @@
                 if (binding.inputArtist.text.isNullOrBlank() && !metadata.artist.isNullOrBlank()) {
                     binding.inputArtist.setText(metadata.artist)
                 }
-                duration = metadata.duration
+                duration = metadata.duration ?: "0:00"
             }
         }
 
@@ -144,7 +145,7 @@
             resId = null,
             coverResId = null,
             coverPath = imageUri?.toString() ?: "",
-            duration = duration,
+            duration = parseDuration(duration),
             isLiked = false,
             isLocal = true,
             uploadedBy = userId
Index: app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModelFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.profile\r\n\r\nimport android.content.Context\r\nimport androidx.core.content.ContentProviderCompat.requireContext\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.tubes.purry.data.local.AppDatabase\r\nimport com.tubes.purry.data.repository.SongRepository\r\nimport com.tubes.purry.data.remote.ApiClient\r\nimport com.tubes.purry.data.repository.AuthRepository\r\nimport com.tubes.purry.utils.SessionManager\r\n\r\nclass ProfileViewModelFactory(\r\n    private val context: Context,\r\n) : ViewModelProvider.Factory {\r\n    override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n        if (modelClass.isAssignableFrom(ProfileViewModel::class.java)) {\r\n            val sessionManager = SessionManager(context)\r\n            val db = AppDatabase.getDatabase(context)\r\n            val songRepository = SongRepository(db.songDao(), db.LikedSongDao())\r\n            val authRepository = AuthRepository(ApiClient.apiService, sessionManager)\r\n            @Suppress(\"UNCHECKED_CAST\")\r\n            return ProfileViewModel(songRepository, authRepository) as T\r\n        }\r\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModelFactory.kt b/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModelFactory.kt
--- a/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModelFactory.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/profile/ProfileViewModelFactory.kt	(date 1748195617131)
@@ -1,5 +1,6 @@
 package com.tubes.purry.ui.profile
 
+import android.app.Application
 import android.content.Context
 import androidx.core.content.ContentProviderCompat.requireContext
 import androidx.lifecycle.ViewModel
@@ -11,17 +12,18 @@
 import com.tubes.purry.utils.SessionManager
 
 class ProfileViewModelFactory(
-    private val context: Context,
+    private val application: Application
 ) : ViewModelProvider.Factory {
     override fun <T : ViewModel> create(modelClass: Class<T>): T {
         if (modelClass.isAssignableFrom(ProfileViewModel::class.java)) {
-            val sessionManager = SessionManager(context)
-            val db = AppDatabase.getDatabase(context)
+            val sessionManager = SessionManager(application)
+            val db = AppDatabase.getDatabase(application)
             val songRepository = SongRepository(db.songDao(), db.LikedSongDao())
             val authRepository = AuthRepository(ApiClient.apiService, sessionManager)
+
             @Suppress("UNCHECKED_CAST")
-            return ProfileViewModel(songRepository, authRepository) as T
+            return ProfileViewModel(application, songRepository, authRepository) as T
         }
         throw IllegalArgumentException("Unknown ViewModel class")
     }
-}
\ No newline at end of file
+}
Index: app/src/main/res/layout/fragment_song_detail.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:background=\"@android:color/black\">\r\n\r\n    <!-- Top Bar: Back & Options -->\r\n    <ImageButton\r\n        android:id=\"@+id/btnBack\"\r\n        android:layout_width=\"48dp\"\r\n        android:layout_height=\"48dp\"\r\n        android:layout_margin=\"16dp\"\r\n        android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n        android:contentDescription=\"@null\"\r\n        android:src=\"@drawable/ic_arrow_down\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/btnOptions\"\r\n        android:layout_width=\"48dp\"\r\n        android:layout_height=\"48dp\"\r\n        android:layout_margin=\"16dp\"\r\n        android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n        android:contentDescription=\"@null\"\r\n        android:src=\"@drawable/ic_more_vert\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <!-- Album Art -->\r\n\r\n    <!-- Title and Favorite -->\r\n    <ImageView\r\n        android:id=\"@+id/ivCover\"\r\n        android:layout_width=\"308dp\"\r\n        android:layout_height=\"306dp\"\r\n        android:layout_margin=\"32dp\"\r\n        android:layout_marginTop=\"60dp\"\r\n        android:contentDescription=\"@null\"\r\n        android:scaleType=\"centerCrop\"\r\n        android:src=\"@drawable/album_default\"\r\n        app:layout_constraintDimensionRatio=\"1:1\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"0.497\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/btnBack\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvTitle\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"40dp\"\r\n        android:ellipsize=\"marquee\"\r\n        android:marqueeRepeatLimit=\"marquee_forever\"\r\n        android:singleLine=\"true\"\r\n        android:focusable=\"true\"\r\n        android:focusableInTouchMode=\"true\"\r\n        android:scrollHorizontally=\"true\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textSize=\"25sp\"\r\n        android:textStyle=\"bold\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/ivCover\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/ivCover\"\r\n        app:layout_constraintEnd_toStartOf=\"@id/btnFavorite\" />\r\n\r\n    <!-- Artist -->\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/btnFavorite\"\r\n        android:layout_width=\"27dp\"\r\n        android:layout_height=\"38dp\"\r\n        android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n        android:contentDescription=\"@null\"\r\n        android:src=\"@drawable/ic_heart_outline\"\r\n        app:layout_constraintEnd_toEndOf=\"@+id/ivCover\"\r\n        app:layout_constraintTop_toTopOf=\"@id/tvTitle\" />\r\n\r\n\r\n    <!-- SeekBar -->\r\n    <TextView\r\n        android:id=\"@+id/tvArtist\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"4dp\"\r\n        android:text=\"@string/artist\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textSize=\"20sp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"0.0\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/ivCover\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/tvTitle\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBar\"\r\n        android:layout_width=\"323dp\"\r\n        android:layout_height=\"30dp\"\r\n        android:layout_marginTop=\"36dp\"\r\n        android:progress=\"30\"\r\n        android:progressBackgroundTint=\"#777777\"\r\n        android:progressTint=\"@android:color/white\"\r\n        android:thumbTint=\"@android:color/white\"\r\n        app:layout_constraintEnd_toEndOf=\"@+id/btnFavorite\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/ivCover\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/tvArtist\" />\r\n\r\n    <!-- Time -->\r\n    <TextView\r\n        android:id=\"@+id/tvCurrentTime\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/current_time\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textSize=\"12sp\"\r\n        app:layout_constraintStart_toStartOf=\"@id/seekBar\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/seekBar\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/tvDuration\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/duration\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textSize=\"12sp\"\r\n        app:layout_constraintEnd_toEndOf=\"@id/seekBar\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/seekBar\" />\r\n\r\n    <!-- Playback Controls -->\r\n    <LinearLayout\r\n        android:id=\"@+id/playerControls\"\r\n        android:layout_width=\"323dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_margin=\"24dp\"\r\n        android:layout_marginTop=\"32dp\"\r\n        android:layout_marginBottom=\"32dp\"\r\n        android:gravity=\"center\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/tvCurrentTime\"\r\n        app:layout_constraintVertical_bias=\"0.4\">\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/btnShuffle\"\r\n            android:layout_width=\"77dp\"\r\n            android:layout_height=\"48dp\"\r\n            android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n            android:contentDescription=\"@null\"\r\n            android:src=\"@drawable/ic_shuffle\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/btnPrev\"\r\n            android:layout_width=\"48dp\"\r\n            android:layout_height=\"48dp\"\r\n            android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n            android:contentDescription=\"@null\"\r\n            android:src=\"@drawable/ic_skip_previous\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/btnPlayPause\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"16dp\"\r\n            android:layout_marginEnd=\"16dp\"\r\n            android:background=\"@android:color/transparent\"\r\n            android:contentDescription=\"@null\"\r\n            android:scaleType=\"centerInside\"\r\n            android:src=\"@drawable/ic_pause_btn\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/btnNext\"\r\n            android:layout_width=\"48dp\"\r\n            android:layout_height=\"48dp\"\r\n            android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n            android:contentDescription=\"@null\"\r\n            android:src=\"@drawable/ic_skip_next\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/btnRepeat\"\r\n            android:layout_width=\"68dp\"\r\n            android:layout_height=\"48dp\"\r\n            android:background=\"?attr/selectableItemBackgroundBorderless\"\r\n            android:contentDescription=\"@null\"\r\n            android:src=\"@drawable/ic_repeat\" />\r\n    </LinearLayout>\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_song_detail.xml b/app/src/main/res/layout/fragment_song_detail.xml
--- a/app/src/main/res/layout/fragment_song_detail.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/res/layout/fragment_song_detail.xml	(date 1748195617188)
@@ -1,188 +1,218 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:background="@android:color/black">
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:background="@color/background_dark"
+    android:padding="16dp">
+
+    <!-- Header with Back and Options -->
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center_vertical"
+        android:layout_marginBottom="32dp">
 
-    <!-- Top Bar: Back & Options -->
-    <ImageButton
-        android:id="@+id/btnBack"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:layout_margin="16dp"
-        android:background="?attr/selectableItemBackgroundBorderless"
-        android:contentDescription="@null"
-        android:src="@drawable/ic_arrow_down"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
+        <ImageButton
+            android:id="@+id/btn_back"
+            android:layout_width="40dp"
+            android:layout_height="40dp"
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_arrow_back"
+            android:contentDescription="Back"
+            app:tint="@android:color/white" />
 
-    <ImageButton
-        android:id="@+id/btnOptions"
-        android:layout_width="48dp"
-        android:layout_height="48dp"
-        android:layout_margin="16dp"
-        android:background="?attr/selectableItemBackgroundBorderless"
-        android:contentDescription="@null"
-        android:src="@drawable/ic_more_vert"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
+        <View
+            android:layout_width="0dp"
+            android:layout_height="1dp"
+            android:layout_weight="1" />
+
+        <!-- NEW: Audio Device Button -->
+        <ImageButton
+            android:id="@+id/btn_audio_device"
+            android:layout_width="40dp"
+            android:layout_height="40dp"
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_phone_speaker"
+            android:contentDescription="Audio Output Device"
+            app:tint="@android:color/white"
+            android:layout_marginEnd="8dp" />
+
+        <ImageButton
+            android:id="@+id/btn_options"
+            android:layout_width="40dp"
+            android:layout_height="40dp"
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_more_vert"
+            android:contentDescription="More Options"
+            app:tint="@android:color/white" />
 
-    <!-- Album Art -->
+    </LinearLayout>
 
-    <!-- Title and Favorite -->
+    <!-- Album Cover -->
     <ImageView
-        android:id="@+id/ivCover"
-        android:layout_width="308dp"
-        android:layout_height="306dp"
-        android:layout_margin="32dp"
-        android:layout_marginTop="60dp"
-        android:contentDescription="@null"
+        android:id="@+id/iv_cover"
+        android:layout_width="280dp"
+        android:layout_height="280dp"
+        android:layout_gravity="center"
+        android:src="@drawable/album_default"
         android:scaleType="centerCrop"
-        android:src="@drawable/album_default"
-        app:layout_constraintDimensionRatio="1:1"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintHorizontal_bias="0.497"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/btnBack" />
+        android:background="@drawable/rounded_corner_12dp"
+        android:layout_marginBottom="32dp" />
 
+    <!-- Song Info -->
     <TextView
-        android:id="@+id/tvTitle"
-        android:layout_width="0dp"
+        android:id="@+id/tv_title"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_marginTop="40dp"
+        android:text="Song Title"
+        android:textSize="24sp"
+        android:textStyle="bold"
+        android:textColor="@android:color/white"
+        android:gravity="center"
+        android:maxLines="2"
         android:ellipsize="marquee"
         android:marqueeRepeatLimit="marquee_forever"
         android:singleLine="true"
-        android:focusable="true"
-        android:focusableInTouchMode="true"
-        android:scrollHorizontally="true"
-        android:textColor="@android:color/white"
-        android:textSize="25sp"
-        android:textStyle="bold"
-        app:layout_constraintTop_toBottomOf="@id/ivCover"
-        app:layout_constraintStart_toStartOf="@+id/ivCover"
-        app:layout_constraintEnd_toStartOf="@id/btnFavorite" />
-
-    <!-- Artist -->
+        android:layout_marginBottom="8dp" />
 
-    <ImageButton
-        android:id="@+id/btnFavorite"
-        android:layout_width="27dp"
-        android:layout_height="38dp"
-        android:background="?attr/selectableItemBackgroundBorderless"
-        android:contentDescription="@null"
-        android:src="@drawable/ic_heart_outline"
-        app:layout_constraintEnd_toEndOf="@+id/ivCover"
-        app:layout_constraintTop_toTopOf="@id/tvTitle" />
-
-
-    <!-- SeekBar -->
     <TextView
-        android:id="@+id/tvArtist"
-        android:layout_width="0dp"
+        android:id="@+id/tv_artist"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_marginTop="4dp"
-        android:text="@string/artist"
-        android:textColor="@android:color/white"
-        android:textSize="20sp"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintHorizontal_bias="0.0"
-        app:layout_constraintStart_toStartOf="@+id/ivCover"
-        app:layout_constraintTop_toBottomOf="@id/tvTitle" />
+        android:text="Artist Name"
+        android:textSize="16sp"
+        android:textColor="@android:color/darker_gray"
+        android:gravity="center"
+        android:layout_marginBottom="32dp" />
+
+    <!-- Progress Bar and Time -->
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:layout_marginBottom="24dp">
 
-    <SeekBar
-        android:id="@+id/seekBar"
-        android:layout_width="323dp"
-        android:layout_height="30dp"
-        android:layout_marginTop="36dp"
-        android:progress="30"
-        android:progressBackgroundTint="#777777"
-        android:progressTint="@android:color/white"
-        android:thumbTint="@android:color/white"
-        app:layout_constraintEnd_toEndOf="@+id/btnFavorite"
-        app:layout_constraintStart_toStartOf="@+id/ivCover"
-        app:layout_constraintTop_toBottomOf="@id/tvArtist" />
+        <SeekBar
+            android:id="@+id/seek_bar"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:progressTint="@color/green"
+            android:thumbTint="@color/green"
+            android:layout_marginBottom="8dp" />
 
-    <!-- Time -->
-    <TextView
-        android:id="@+id/tvCurrentTime"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="@string/current_time"
-        android:textColor="@android:color/white"
-        android:textSize="12sp"
-        app:layout_constraintStart_toStartOf="@id/seekBar"
-        app:layout_constraintTop_toBottomOf="@id/seekBar" />
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:id="@+id/tv_current_time"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="0:00"
+                android:textSize="12sp"
+                android:textColor="@android:color/darker_gray" />
+
+            <View
+                android:layout_width="0dp"
+                android:layout_height="1dp"
+                android:layout_weight="1" />
 
-    <TextView
-        android:id="@+id/tvDuration"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="@string/duration"
-        android:textColor="@android:color/white"
-        android:textSize="12sp"
-        app:layout_constraintEnd_toEndOf="@id/seekBar"
-        app:layout_constraintTop_toBottomOf="@id/seekBar" />
+            <TextView
+                android:id="@+id/tv_duration"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="0:00"
+                android:textSize="12sp"
+                android:textColor="@android:color/darker_gray" />
+
+        </LinearLayout>
 
-    <!-- Playback Controls -->
+    </LinearLayout>
+
+    <!-- Control Buttons -->
     <LinearLayout
-        android:id="@+id/playerControls"
-        android:layout_width="323dp"
+        android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_margin="24dp"
-        android:layout_marginTop="32dp"
-        android:layout_marginBottom="32dp"
+        android:orientation="horizontal"
         android:gravity="center"
-        android:orientation="horizontal"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintTop_toBottomOf="@id/tvCurrentTime"
-        app:layout_constraintVertical_bias="0.4">
+        android:layout_marginBottom="24dp">
 
+        <!-- Shuffle Button -->
         <ImageButton
-            android:id="@+id/btnShuffle"
-            android:layout_width="77dp"
+            android:id="@+id/btn_shuffle"
+            android:layout_width="48dp"
             android:layout_height="48dp"
-            android:background="?attr/selectableItemBackgroundBorderless"
-            android:contentDescription="@null"
-            android:src="@drawable/ic_shuffle" />
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_shuffle"
+            android:contentDescription="Shuffle"
+            app:tint="@android:color/white"
+            android:layout_marginEnd="16dp" />
+
+        <!-- Previous Button -->
+        <ImageButton
+            android:id="@+id/btn_prev"
+            android:layout_width="56dp"
+            android:layout_height="56dp"
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_skip_previous"
+            android:contentDescription="Previous"
+            app:tint="@android:color/white"
+            android:layout_marginEnd="16dp" />
 
+        <!-- Play/Pause Button -->
+        <ImageButton
+            android:id="@+id/btn_play_pause"
+            android:layout_width="80dp"
+            android:layout_height="80dp"
+            android:background="@drawable/circle_button_background"
+            android:src="@drawable/ic_play_btn"
+            android:contentDescription="Play/Pause"
+            android:layout_marginEnd="16dp" />
+
+        <!-- Next Button -->
         <ImageButton
-            android:id="@+id/btnPrev"
+            android:id="@+id/btn_next"
+            android:layout_width="56dp"
+            android:layout_height="56dp"
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_skip_next"
+            android:contentDescription="Next"
+            app:tint="@android:color/white"
+            android:layout_marginEnd="16dp" />
+
+        <!-- Repeat Button -->
+        <ImageButton
+            android:id="@+id/btn_repeat"
             android:layout_width="48dp"
             android:layout_height="48dp"
-            android:background="?attr/selectableItemBackgroundBorderless"
-            android:contentDescription="@null"
-            android:src="@drawable/ic_skip_previous" />
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_repeat"
+            android:contentDescription="Repeat"
+            app:tint="@android:color/white" />
 
-        <ImageButton
-            android:id="@+id/btnPlayPause"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginStart="16dp"
-            android:layout_marginEnd="16dp"
-            android:background="@android:color/transparent"
-            android:contentDescription="@null"
-            android:scaleType="centerInside"
-            android:src="@drawable/ic_pause_btn" />
+    </LinearLayout>
+
+    <!-- Bottom Action Buttons -->
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center">
 
+        <!-- Favorite Button -->
         <ImageButton
-            android:id="@+id/btnNext"
+            android:id="@+id/btn_favorite"
             android:layout_width="48dp"
             android:layout_height="48dp"
-            android:background="?attr/selectableItemBackgroundBorderless"
-            android:contentDescription="@null"
-            android:src="@drawable/ic_skip_next" />
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_heart_outline"
+            android:contentDescription="Add to Favorites"
+            app:tint="@android:color/white" />
 
-        <ImageButton
-            android:id="@+id/btnRepeat"
-            android:layout_width="68dp"
-            android:layout_height="48dp"
-            android:background="?attr/selectableItemBackgroundBorderless"
-            android:contentDescription="@null"
-            android:src="@drawable/ic_repeat" />
     </LinearLayout>
 
-</androidx.constraintlayout.widget.ConstraintLayout>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/drawable/circle_button_background.xml
===================================================================
diff --git a/app/src/main/res/drawable/circle_button_background.xml b/app/src/main/res/drawable/circle_button_background.xml
new file mode 100644
--- /dev/null	(date 1748195617144)
+++ b/app/src/main/res/drawable/circle_button_background.xml	(date 1748195617144)
@@ -0,0 +1,7 @@
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval">
+    <solid android:color="@color/green" />
+    <stroke
+        android:width="2dp"
+        android:color="@color/green" />
+</shape>
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/data/local/UserProfileDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.data.local\r\n\r\nimport androidx.room.Dao\r\nimport androidx.room.Insert\r\nimport androidx.room.OnConflictStrategy\r\nimport androidx.room.Query\r\nimport com.tubes.purry.data.model.ProfileData\r\n\r\n@Dao\r\ninterface UserProfileDao {\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertOrUpdate(profile: ProfileData)\r\n\r\n    @Query(\"SELECT * FROM user_profile LIMIT 1\")\r\n    suspend fun getProfile(): ProfileData?\r\n\r\n    @Query(\"DELETE FROM user_profile\")\r\n    suspend fun clearProfile()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/data/local/UserProfileDao.kt b/app/src/main/java/com/tubes/purry/data/local/UserProfileDao.kt
--- a/app/src/main/java/com/tubes/purry/data/local/UserProfileDao.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/data/local/UserProfileDao.kt	(date 1748195617089)
@@ -8,7 +8,7 @@
 
 @Dao
 interface UserProfileDao {
-    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    @Insert(onConflict = OnConflictStrategy.IGNORE)
     suspend fun insertOrUpdate(profile: ProfileData)
 
     @Query("SELECT * FROM user_profile LIMIT 1")
@@ -16,4 +16,7 @@
 
     @Query("DELETE FROM user_profile")
     suspend fun clearProfile()
+
+    @Query("SELECT * FROM user_profile WHERE id = :id LIMIT 1")
+    suspend fun getUserById(id: Int): ProfileData?
 }
Index: app/src/main/res/drawable/rounded_corner_12dp.xml
===================================================================
diff --git a/app/src/main/res/drawable/rounded_corner_12dp.xml b/app/src/main/res/drawable/rounded_corner_12dp.xml
new file mode 100644
--- /dev/null	(date 1748195617163)
+++ b/app/src/main/res/drawable/rounded_corner_12dp.xml	(date 1748195617163)
@@ -0,0 +1,5 @@
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <corners android:radius="12dp" />
+    <solid android:color="@android:color/transparent" />
+</shape>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_refresh.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_refresh.xml b/app/src/main/res/drawable/ic_refresh.xml
new file mode 100644
--- /dev/null	(date 1748195617160)
+++ b/app/src/main/res/drawable/ic_refresh.xml	(date 1748195617160)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M17.65,6.35C16.2,4.9 14.21,4 12,4C7.58,4 4,7.58 4,12S7.58,20 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18C8.69,18 6,15.31 6,12S8.69,6 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z" />
+</vector>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"CHOOSE_PER_TEST\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"jbr-21\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/.idea/gradle.xml	(date 1748195617064)
@@ -13,6 +13,7 @@
             <option value="$PROJECT_DIR$/app" />
           </set>
         </option>
+        <option name="resolveExternalAnnotations" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/res/drawable/ic_headphones_wired.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_headphones_wired.xml b/app/src/main/res/drawable/ic_headphones_wired.xml
new file mode 100644
--- /dev/null	(date 1748195617158)
+++ b/app/src/main/res/drawable/ic_headphones_wired.xml	(date 1748195617158)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,3C16.97,3 21,7.03 21,12V16C21,17.1 20.1,18 19,18H16C14.9,18 14,17.1 14,16V13C14,11.9 14.9,11 16,11H19V12C19,8.13 15.87,5 12,5S5,8.13 5,12V11H8C9.1,11 10,11.9 10,13V16C10,17.1 9.1,18 8,18H5C3.9,18 3,17.1 3,16V12C3,7.03 7.03,3 12,3Z" />
+</vector>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_headphones_bluetooth.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_headphones_bluetooth.xml b/app/src/main/res/drawable/ic_headphones_bluetooth.xml
new file mode 100644
--- /dev/null	(date 1748195617157)
+++ b/app/src/main/res/drawable/ic_headphones_bluetooth.xml	(date 1748195617157)
@@ -0,0 +1,12 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M14.24,12.01L16.56,14.33L15.11,15.78L14.24,14.91V18.23L17.33,15.14L16.98,14.78L18.76,13L14.24,8.46V11.77L13.37,10.9L14.82,9.45L14.24,8.87V5.77L17.33,8.86L14.24,12.01ZM15.24,10.86L16.11,11.73L15.24,12.6V10.86ZM15.24,15.14V13.4L16.11,14.27L15.24,15.14Z" />
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,3C16.97,3 21,7.03 21,12V16C21,17.1 20.1,18 19,18H16C14.9,18 14,17.1 14,16V13C14,11.9 14.9,11 16,11H19V12C19,8.13 15.87,5 12,5S5,8.13 5,12V11H8C9.1,11 10,11.9 10,13V16C10,17.1 9.1,18 8,18H5C3.9,18 3,17.1 3,16V12C3,7.03 7.03,3 12,3Z" />
+</vector>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_speaker_bluetooth.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_speaker_bluetooth.xml b/app/src/main/res/drawable/ic_speaker_bluetooth.xml
new file mode 100644
--- /dev/null	(date 1748195617162)
+++ b/app/src/main/res/drawable/ic_speaker_bluetooth.xml	(date 1748195617162)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M17,2H7C5.89,2 5,2.89 5,4V20C5,21.11 5.89,22 7,22H17C18.11,22 19,21.11 19,20V4C19,2.89 18.11,2 17,2ZM12,4C13.1,4 14,4.9 14,6S13.1,8 12,8S10,7.1 10,6S10.9,4 12,4ZM12,20C9.79,20 8,18.21 8,16S9.79,12 12,12S16,13.79 16,16S14.21,20 12,20ZM12,14C10.9,14 10,14.9 10,16S10.9,18 12,18S14,17.1 14,16S13.1,14 12,14Z" />
+</vector>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_audio_device_unknown.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_audio_device_unknown.xml b/app/src/main/res/drawable/ic_audio_device_unknown.xml
new file mode 100644
--- /dev/null	(date 1748195617154)
+++ b/app/src/main/res/drawable/ic_audio_device_unknown.xml	(date 1748195617154)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M11,18H13V16H11V18ZM12,2C6.48,2 2,6.48 2,12S6.48,22 12,22S22,17.52 22,12S17.52,2 12,2ZM12,20C7.59,20 4,16.41 4,12S7.59,4 12,4S20,7.59 20,12S16.41,20 12,20ZM12,6C9.79,6 8,7.79 8,10H10C10,8.9 10.9,8 12,8S14,8.9 14,10C14,12 11,11.75 11,15H13C13,12.75 16,12.5 16,10C16,7.79 14.21,6 12,6Z" />
+</vector>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_check_circle.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_check_circle.xml b/app/src/main/res/drawable/ic_check_circle.xml
new file mode 100644
--- /dev/null	(date 1748195617155)
+++ b/app/src/main/res/drawable/ic_check_circle.xml	(date 1748195617155)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@color/green"
+        android:pathData="M12,2C6.48,2 2,6.48 2,12S6.48,22 12,22S22,17.52 22,12S17.52,2 12,2ZM10,17L5,12L6.41,10.59L10,14.17L17.59,6.58L19,8L10,17Z" />
+</vector>
\ No newline at end of file
Index: app/src/main/res/drawable/bottom_sheet_background.xml
===================================================================
diff --git a/app/src/main/res/drawable/bottom_sheet_background.xml b/app/src/main/res/drawable/bottom_sheet_background.xml
new file mode 100644
--- /dev/null	(date 1748195617143)
+++ b/app/src/main/res/drawable/bottom_sheet_background.xml	(date 1748195617143)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@color/background_dark" />
+    <corners
+        android:topLeftRadius="16dp"
+        android:topRightRadius="16dp" />
+</shape>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_phone_speaker.xml
===================================================================
diff --git a/app/src/main/res/drawable/ic_phone_speaker.xml b/app/src/main/res/drawable/ic_phone_speaker.xml
new file mode 100644
--- /dev/null	(date 1748195617159)
+++ b/app/src/main/res/drawable/ic_phone_speaker.xml	(date 1748195617159)
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M7,9V15H11L16,20V4L11,9H7ZM18.5,12C18.5,10.23 17.5,8.71 16,7.97V16.02C17.5,15.29 18.5,13.77 18.5,12Z" />
+</vector>
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/data/local/AudioDevice.kt
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/data/local/AudioDevice.kt b/app/src/main/java/com/tubes/purry/data/local/AudioDevice.kt
new file mode 100644
--- /dev/null	(date 1748195617085)
+++ b/app/src/main/java/com/tubes/purry/data/local/AudioDevice.kt	(date 1748195617085)
@@ -0,0 +1,46 @@
+package com.tubes.purry.data.model
+data class AudioDevice(
+    val id: String,
+    val name: String,
+    val type: AudioDeviceType,
+    val isConnected: Boolean,
+    val isActive: Boolean,
+    val bluetoothAddress: String? = null,
+    val deviceInfo: String? = null
+) {
+    override fun equals(other: Any?): Boolean {
+        if (this === other) return true
+        if (javaClass != other?.javaClass) return false
+        other as AudioDevice
+        if (id != other.id) return false
+        if (type != other.type) return false
+        return true
+    }
+    override fun hashCode(): Int {
+        var result = id.hashCode()
+        result = 31 * result + type.hashCode()
+        return result
+    }
+}
+enum class AudioDeviceType(val displayName: String) {
+    INTERNAL_SPEAKER("Phone Speaker"),
+    WIRED_HEADPHONES("Wired Headphones"),
+    BLUETOOTH_HEADPHONES("Bluetooth Headphones"),
+    BLUETOOTH_SPEAKER("Bluetooth Speaker"),
+    USB_AUDIO("USB Audio"),
+    UNKNOWN("Unknown Device");
+    companion object {
+        fun fromAndroidDeviceType(androidType: Int): AudioDeviceType {
+            return when (androidType) {
+                android.media.AudioDeviceInfo.TYPE_BUILTIN_SPEAKER -> INTERNAL_SPEAKER
+                android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES,
+                android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET -> WIRED_HEADPHONES
+                android.media.AudioDeviceInfo.TYPE_BLUETOOTH_A2DP -> BLUETOOTH_HEADPHONES
+                android.media.AudioDeviceInfo.TYPE_BLUETOOTH_SCO -> BLUETOOTH_HEADPHONES
+                android.media.AudioDeviceInfo.TYPE_USB_HEADSET,
+                android.media.AudioDeviceInfo.TYPE_USB_DEVICE -> USB_AUDIO
+                else -> UNKNOWN
+            }
+        }
+    }
+}
\ No newline at end of file
Index: .idea/caches/deviceStreaming.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DeviceStreaming\">\r\n    <option name=\"deviceSelectionList\">\r\n      <list>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"27\" />\r\n          <option name=\"brand\" value=\"DOCOMO\" />\r\n          <option name=\"codename\" value=\"F01L\" />\r\n          <option name=\"id\" value=\"F01L\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"FUJITSU\" />\r\n          <option name=\"name\" value=\"F-01L\" />\r\n          <option name=\"screenDensity\" value=\"360\" />\r\n          <option name=\"screenX\" value=\"720\" />\r\n          <option name=\"screenY\" value=\"1280\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"OnePlus\" />\r\n          <option name=\"codename\" value=\"OP5552L1\" />\r\n          <option name=\"id\" value=\"OP5552L1\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"OnePlus\" />\r\n          <option name=\"name\" value=\"CPH2415\" />\r\n          <option name=\"screenDensity\" value=\"480\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2412\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"OPPO\" />\r\n          <option name=\"codename\" value=\"OP573DL1\" />\r\n          <option name=\"id\" value=\"OP573DL1\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"OPPO\" />\r\n          <option name=\"name\" value=\"CPH2557\" />\r\n          <option name=\"screenDensity\" value=\"480\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"28\" />\r\n          <option name=\"brand\" value=\"DOCOMO\" />\r\n          <option name=\"codename\" value=\"SH-01L\" />\r\n          <option name=\"id\" value=\"SH-01L\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"SHARP\" />\r\n          <option name=\"name\" value=\"AQUOS sense2 SH-01L\" />\r\n          <option name=\"screenDensity\" value=\"480\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2160\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"Lenovo\" />\r\n          <option name=\"codename\" value=\"TB370FU\" />\r\n          <option name=\"formFactor\" value=\"Tablet\" />\r\n          <option name=\"id\" value=\"TB370FU\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Lenovo\" />\r\n          <option name=\"name\" value=\"Tab P12\" />\r\n          <option name=\"screenDensity\" value=\"340\" />\r\n          <option name=\"screenX\" value=\"1840\" />\r\n          <option name=\"screenY\" value=\"2944\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"a15\" />\r\n          <option name=\"id\" value=\"a15\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"A15\" />\r\n          <option name=\"screenDensity\" value=\"450\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2340\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"a35x\" />\r\n          <option name=\"id\" value=\"a35x\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"A35\" />\r\n          <option name=\"screenDensity\" value=\"450\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2340\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"31\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"a51\" />\r\n          <option name=\"id\" value=\"a51\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy A51\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"akita\" />\r\n          <option name=\"id\" value=\"akita\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 8a\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"motorola\" />\r\n          <option name=\"codename\" value=\"arcfox\" />\r\n          <option name=\"id\" value=\"arcfox\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Motorola\" />\r\n          <option name=\"name\" value=\"razr plus 2024\" />\r\n          <option name=\"screenDensity\" value=\"360\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"1272\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"motorola\" />\r\n          <option name=\"codename\" value=\"austin\" />\r\n          <option name=\"id\" value=\"austin\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Motorola\" />\r\n          <option name=\"name\" value=\"moto g 5G (2022)\" />\r\n          <option name=\"screenDensity\" value=\"280\" />\r\n          <option name=\"screenX\" value=\"720\" />\r\n          <option name=\"screenY\" value=\"1600\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"b0q\" />\r\n          <option name=\"id\" value=\"b0q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy S22 Ultra\" />\r\n          <option name=\"screenDensity\" value=\"600\" />\r\n          <option name=\"screenX\" value=\"1440\" />\r\n          <option name=\"screenY\" value=\"3088\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"32\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"bluejay\" />\r\n          <option name=\"id\" value=\"bluejay\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 6a\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"caiman\" />\r\n          <option name=\"id\" value=\"caiman\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 9 Pro\" />\r\n          <option name=\"screenDensity\" value=\"360\" />\r\n          <option name=\"screenX\" value=\"960\" />\r\n          <option name=\"screenY\" value=\"2142\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"comet\" />\r\n          <option name=\"default\" value=\"true\" />\r\n          <option name=\"id\" value=\"comet\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 9 Pro Fold\" />\r\n          <option name=\"screenDensity\" value=\"390\" />\r\n          <option name=\"screenX\" value=\"2076\" />\r\n          <option name=\"screenY\" value=\"2152\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"29\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"crownqlteue\" />\r\n          <option name=\"id\" value=\"crownqlteue\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy Note9\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"2220\" />\r\n          <option name=\"screenY\" value=\"1080\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"dm2q\" />\r\n          <option name=\"id\" value=\"dm2q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"S23 Plus\" />\r\n          <option name=\"screenDensity\" value=\"450\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2340\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"dm3q\" />\r\n          <option name=\"id\" value=\"dm3q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy S23 Ultra\" />\r\n          <option name=\"screenDensity\" value=\"600\" />\r\n          <option name=\"screenX\" value=\"1440\" />\r\n          <option name=\"screenY\" value=\"3088\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"e1q\" />\r\n          <option name=\"default\" value=\"true\" />\r\n          <option name=\"id\" value=\"e1q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy S24\" />\r\n          <option name=\"screenDensity\" value=\"480\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2340\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"e3q\" />\r\n          <option name=\"id\" value=\"e3q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy S24 Ultra\" />\r\n          <option name=\"screenDensity\" value=\"450\" />\r\n          <option name=\"screenX\" value=\"1440\" />\r\n          <option name=\"screenY\" value=\"3120\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"eos\" />\r\n          <option name=\"id\" value=\"eos\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Eos\" />\r\n          <option name=\"screenDensity\" value=\"320\" />\r\n          <option name=\"screenX\" value=\"384\" />\r\n          <option name=\"screenY\" value=\"384\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"felix\" />\r\n          <option name=\"id\" value=\"felix\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel Fold\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"2208\" />\r\n          <option name=\"screenY\" value=\"1840\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"felix\" />\r\n          <option name=\"id\" value=\"felix\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel Fold\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"2208\" />\r\n          <option name=\"screenY\" value=\"1840\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"felix_camera\" />\r\n          <option name=\"id\" value=\"felix_camera\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel Fold (Camera-enabled)\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"2208\" />\r\n          <option name=\"screenY\" value=\"1840\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"motorola\" />\r\n          <option name=\"codename\" value=\"fogona\" />\r\n          <option name=\"id\" value=\"fogona\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Motorola\" />\r\n          <option name=\"name\" value=\"moto g play - 2024\" />\r\n          <option name=\"screenDensity\" value=\"280\" />\r\n          <option name=\"screenX\" value=\"720\" />\r\n          <option name=\"screenY\" value=\"1600\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"g0q\" />\r\n          <option name=\"id\" value=\"g0q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"SM-S906U1\" />\r\n          <option name=\"screenDensity\" value=\"450\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2340\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"gta9pwifi\" />\r\n          <option name=\"id\" value=\"gta9pwifi\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"SM-X210\" />\r\n          <option name=\"screenDensity\" value=\"240\" />\r\n          <option name=\"screenX\" value=\"1200\" />\r\n          <option name=\"screenY\" value=\"1920\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"gts7xllite\" />\r\n          <option name=\"id\" value=\"gts7xllite\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"SM-T738U\" />\r\n          <option name=\"screenDensity\" value=\"340\" />\r\n          <option name=\"screenX\" value=\"1600\" />\r\n          <option name=\"screenY\" value=\"2560\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"gts8uwifi\" />\r\n          <option name=\"formFactor\" value=\"Tablet\" />\r\n          <option name=\"id\" value=\"gts8uwifi\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy Tab S8 Ultra\" />\r\n          <option name=\"screenDensity\" value=\"320\" />\r\n          <option name=\"screenX\" value=\"1848\" />\r\n          <option name=\"screenY\" value=\"2960\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"gts8wifi\" />\r\n          <option name=\"formFactor\" value=\"Tablet\" />\r\n          <option name=\"id\" value=\"gts8wifi\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy Tab S8\" />\r\n          <option name=\"screenDensity\" value=\"274\" />\r\n          <option name=\"screenX\" value=\"1600\" />\r\n          <option name=\"screenY\" value=\"2560\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"gts9fe\" />\r\n          <option name=\"id\" value=\"gts9fe\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy Tab S9 FE 5G\" />\r\n          <option name=\"screenDensity\" value=\"280\" />\r\n          <option name=\"screenX\" value=\"1440\" />\r\n          <option name=\"screenY\" value=\"2304\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"husky\" />\r\n          <option name=\"id\" value=\"husky\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 8 Pro\" />\r\n          <option name=\"screenDensity\" value=\"390\" />\r\n          <option name=\"screenX\" value=\"1008\" />\r\n          <option name=\"screenY\" value=\"2244\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"30\" />\r\n          <option name=\"brand\" value=\"motorola\" />\r\n          <option name=\"codename\" value=\"java\" />\r\n          <option name=\"id\" value=\"java\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Motorola\" />\r\n          <option name=\"name\" value=\"G20\" />\r\n          <option name=\"screenDensity\" value=\"280\" />\r\n          <option name=\"screenX\" value=\"720\" />\r\n          <option name=\"screenY\" value=\"1600\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"komodo\" />\r\n          <option name=\"id\" value=\"komodo\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 9 Pro XL\" />\r\n          <option name=\"screenDensity\" value=\"360\" />\r\n          <option name=\"screenX\" value=\"1008\" />\r\n          <option name=\"screenY\" value=\"2244\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"lynx\" />\r\n          <option name=\"id\" value=\"lynx\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 7a\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"motorola\" />\r\n          <option name=\"codename\" value=\"maui\" />\r\n          <option name=\"id\" value=\"maui\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Motorola\" />\r\n          <option name=\"name\" value=\"moto g play - 2023\" />\r\n          <option name=\"screenDensity\" value=\"280\" />\r\n          <option name=\"screenX\" value=\"720\" />\r\n          <option name=\"screenY\" value=\"1600\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"o1q\" />\r\n          <option name=\"id\" value=\"o1q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy S21\" />\r\n          <option name=\"screenDensity\" value=\"421\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"31\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"oriole\" />\r\n          <option name=\"id\" value=\"oriole\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 6\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"panther\" />\r\n          <option name=\"id\" value=\"panther\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 7\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"q5q\" />\r\n          <option name=\"id\" value=\"q5q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy Z Fold5\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1812\" />\r\n          <option name=\"screenY\" value=\"2176\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"q6q\" />\r\n          <option name=\"id\" value=\"q6q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy Z Fold6\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1856\" />\r\n          <option name=\"screenY\" value=\"2160\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"30\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"r11\" />\r\n          <option name=\"formFactor\" value=\"Wear OS\" />\r\n          <option name=\"id\" value=\"r11\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel Watch\" />\r\n          <option name=\"screenDensity\" value=\"320\" />\r\n          <option name=\"screenX\" value=\"384\" />\r\n          <option name=\"screenY\" value=\"384\" />\r\n          <option name=\"type\" value=\"WEAR_OS\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"r11q\" />\r\n          <option name=\"id\" value=\"r11q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"SM-S711U\" />\r\n          <option name=\"screenDensity\" value=\"450\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2340\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"30\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"redfin\" />\r\n          <option name=\"id\" value=\"redfin\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 5\" />\r\n          <option name=\"screenDensity\" value=\"440\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2340\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"shiba\" />\r\n          <option name=\"id\" value=\"shiba\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 8\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"samsung\" />\r\n          <option name=\"codename\" value=\"t2q\" />\r\n          <option name=\"id\" value=\"t2q\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Samsung\" />\r\n          <option name=\"name\" value=\"Galaxy S21 Plus\" />\r\n          <option name=\"screenDensity\" value=\"394\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2400\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"33\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"tangorpro\" />\r\n          <option name=\"formFactor\" value=\"Tablet\" />\r\n          <option name=\"id\" value=\"tangorpro\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel Tablet\" />\r\n          <option name=\"screenDensity\" value=\"320\" />\r\n          <option name=\"screenX\" value=\"1600\" />\r\n          <option name=\"screenY\" value=\"2560\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"34\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"tokay\" />\r\n          <option name=\"default\" value=\"true\" />\r\n          <option name=\"id\" value=\"tokay\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 9\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2424\" />\r\n        </PersistentDeviceSelectionData>\r\n        <PersistentDeviceSelectionData>\r\n          <option name=\"api\" value=\"35\" />\r\n          <option name=\"brand\" value=\"google\" />\r\n          <option name=\"codename\" value=\"tokay\" />\r\n          <option name=\"default\" value=\"true\" />\r\n          <option name=\"id\" value=\"tokay\" />\r\n          <option name=\"labId\" value=\"google\" />\r\n          <option name=\"manufacturer\" value=\"Google\" />\r\n          <option name=\"name\" value=\"Pixel 9\" />\r\n          <option name=\"screenDensity\" value=\"420\" />\r\n          <option name=\"screenX\" value=\"1080\" />\r\n          <option name=\"screenY\" value=\"2424\" />\r\n        </PersistentDeviceSelectionData>\r\n      </list>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/caches/deviceStreaming.xml b/.idea/caches/deviceStreaming.xml
--- a/.idea/caches/deviceStreaming.xml	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/.idea/caches/deviceStreaming.xml	(date 1748195617062)
@@ -18,6 +18,18 @@
         <PersistentDeviceSelectionData>
           <option name="api" value="34" />
           <option name="brand" value="OnePlus" />
+          <option name="codename" value="OP535DL1" />
+          <option name="id" value="OP535DL1" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="OnePlus" />
+          <option name="name" value="CPH2409" />
+          <option name="screenDensity" value="401" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2412" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="OnePlus" />
           <option name="codename" value="OP5552L1" />
           <option name="id" value="OP5552L1" />
           <option name="labId" value="google" />
@@ -53,25 +65,36 @@
         </PersistentDeviceSelectionData>
         <PersistentDeviceSelectionData>
           <option name="api" value="34" />
-          <option name="brand" value="Lenovo" />
-          <option name="codename" value="TB370FU" />
-          <option name="formFactor" value="Tablet" />
-          <option name="id" value="TB370FU" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="a15" />
+          <option name="id" value="a15" />
           <option name="labId" value="google" />
-          <option name="manufacturer" value="Lenovo" />
-          <option name="name" value="Tab P12" />
-          <option name="screenDensity" value="340" />
-          <option name="screenX" value="1840" />
-          <option name="screenY" value="2944" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="A15" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
         </PersistentDeviceSelectionData>
         <PersistentDeviceSelectionData>
           <option name="api" value="34" />
           <option name="brand" value="samsung" />
-          <option name="codename" value="a15" />
-          <option name="id" value="a15" />
+          <option name="codename" value="a15x" />
+          <option name="id" value="a15x" />
           <option name="labId" value="google" />
           <option name="manufacturer" value="Samsung" />
-          <option name="name" value="A15" />
+          <option name="name" value="A15 5G" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2340" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="a16x" />
+          <option name="id" value="a16x" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="A16 5G" />
           <option name="screenDensity" value="450" />
           <option name="screenX" value="1080" />
           <option name="screenY" value="2340" />
@@ -186,6 +209,19 @@
           <option name="screenY" value="2152" />
         </PersistentDeviceSelectionData>
         <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="google" />
+          <option name="codename" value="comet" />
+          <option name="default" value="true" />
+          <option name="id" value="comet" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9 Pro Fold" />
+          <option name="screenDensity" value="390" />
+          <option name="screenX" value="2076" />
+          <option name="screenY" value="2152" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
           <option name="api" value="29" />
           <option name="brand" value="samsung" />
           <option name="codename" value="crownqlteue" />
@@ -406,6 +442,18 @@
         </PersistentDeviceSelectionData>
         <PersistentDeviceSelectionData>
           <option name="api" value="34" />
+          <option name="brand" value="google" />
+          <option name="codename" value="komodo" />
+          <option name="id" value="komodo" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9 Pro XL" />
+          <option name="screenDensity" value="360" />
+          <option name="screenX" value="1008" />
+          <option name="screenY" value="2244" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
           <option name="brand" value="google" />
           <option name="codename" value="komodo" />
           <option name="id" value="komodo" />
@@ -576,6 +624,18 @@
           <option name="screenY" value="2560" />
         </PersistentDeviceSelectionData>
         <PersistentDeviceSelectionData>
+          <option name="api" value="35" />
+          <option name="brand" value="google" />
+          <option name="codename" value="tegu" />
+          <option name="id" value="tegu" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Google" />
+          <option name="name" value="Pixel 9a" />
+          <option name="screenDensity" value="420" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2424" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
           <option name="api" value="34" />
           <option name="brand" value="google" />
           <option name="codename" value="tokay" />
@@ -600,6 +660,18 @@
           <option name="screenDensity" value="420" />
           <option name="screenX" value="1080" />
           <option name="screenY" value="2424" />
+        </PersistentDeviceSelectionData>
+        <PersistentDeviceSelectionData>
+          <option name="api" value="34" />
+          <option name="brand" value="samsung" />
+          <option name="codename" value="xcover7" />
+          <option name="id" value="xcover7" />
+          <option name="labId" value="google" />
+          <option name="manufacturer" value="Samsung" />
+          <option name="name" value="SM-G556B" />
+          <option name="screenDensity" value="450" />
+          <option name="screenX" value="1080" />
+          <option name="screenY" value="2408" />
         </PersistentDeviceSelectionData>
       </list>
     </option>
Index: app/src/main/java/com/tubes/purry/ui/player/AudioRoutingViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/player/AudioRoutingViewModel.kt b/app/src/main/java/com/tubes/purry/ui/player/AudioRoutingViewModel.kt
new file mode 100644
--- /dev/null	(date 1748195617122)
+++ b/app/src/main/java/com/tubes/purry/ui/player/AudioRoutingViewModel.kt	(date 1748195617122)
@@ -0,0 +1,125 @@
+package com.tubes.purry.ui.player
+import android.app.Application
+import android.content.Context
+import android.os.Handler
+import android.os.Looper
+import android.util.Log
+import androidx.lifecycle.AndroidViewModel
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import com.tubes.purry.data.model.AudioDevice
+import com.tubes.purry.utils.AudioRoutingManager
+import android.bluetooth.BluetoothAdapter
+import android.bluetooth.BluetoothDevice
+
+class AudioRoutingViewModel(application: Application) : AndroidViewModel(application) {
+    private val audioRoutingManager = AudioRoutingManager(application)
+    val availableDevices: LiveData<List<AudioDevice>> = audioRoutingManager.availableDevices
+    val activeDevice: LiveData<AudioDevice?> = audioRoutingManager.activeDevice
+    val connectionError: LiveData<String?> = audioRoutingManager.connectionError
+    private val _isDeviceSwitching = MutableLiveData<Boolean>(false)
+    val isDeviceSwitching: LiveData<Boolean> = _isDeviceSwitching
+    // Callback to restart MediaPlayer when audio routing changes
+    var onMediaPlayerRestartNeeded: ((Context, AudioDevice) -> Unit)? = null
+    // Handler for delayed operations
+    private val handler = Handler(Looper.getMainLooper())
+    init {
+        setupAudioRoutingCallback()
+    }
+    private fun setupAudioRoutingCallback() {
+        audioRoutingManager.onAudioRoutingChanged = { device ->
+            Log.d("AudioRoutingViewModel", "🔄 Audio routing changed to: ${device.name}")
+            _isDeviceSwitching.postValue(true)
+            // Give some time for the audio system to stabilize
+            handler.postDelayed({
+                Log.d("AudioRoutingViewModel", "🎵 Requesting MediaPlayer restart for: ${device.name}")
+                onMediaPlayerRestartNeeded?.invoke(getApplication(), device)
+                // Reset switching state after a delay
+                handler.postDelayed({
+                    _isDeviceSwitching.postValue(false)
+                }, 500)
+            }, 200) // 200ms delay for audio system to stabilize
+        }
+    }
+    fun refreshDevices() {
+        Log.d("AudioRoutingViewModel", "🔄 Refreshing audio devices")
+        audioRoutingManager.refreshDeviceList()
+    }
+    fun selectAudioDevice(device: AudioDevice): Boolean {
+        if (_isDeviceSwitching.value == true) {
+            Log.w("AudioRoutingViewModel", "⚠️ Device switching in progress, ignoring request")
+            return false
+        }
+        if (!device.isConnected) {
+            Log.w("AudioRoutingViewModel", "⚠️ Device not connected: ${device.name}")
+            return false
+        }
+        Log.d("AudioRoutingViewModel", "🎯 Selecting audio device: ${device.name}")
+        _isDeviceSwitching.postValue(true)
+        val success = audioRoutingManager.selectAudioDevice(device)
+        if (!success) {
+            // Reset switching state if selection failed
+            handler.postDelayed({
+                _isDeviceSwitching.postValue(false)
+            }, 100)
+        }
+        return success
+    }
+    fun clearError() {
+        audioRoutingManager.clearError()
+    }
+    /**
+     * Force refresh after MediaPlayer restart
+     */
+    fun onMediaPlayerRestarted() {
+        Log.d("AudioRoutingViewModel", "✅ MediaPlayer restarted, refreshing devices")
+        handler.postDelayed({
+            refreshDevices()
+        }, 100)
+    }
+    /**
+     * Get current active device
+     */
+    fun getCurrentActiveDevice(): AudioDevice? {
+        return activeDevice.value
+    }
+    /**
+     * Check if a specific device type is available
+     */
+    fun isDeviceTypeAvailable(deviceType: com.tubes.purry.data.model.AudioDeviceType): Boolean {
+        return availableDevices.value?.any {
+            it.type == deviceType && it.isConnected
+        } ?: false
+    }
+    /**
+     * Get the best available audio device (priority: Bluetooth > Wired > Speaker)
+     */
+    fun getBestAvailableDevice(): AudioDevice? {
+        val devices = availableDevices.value ?: return null
+        // Priority order: Bluetooth Headphones -> Wired Headphones -> Internal Speaker
+        return devices.find {
+            it.isConnected && it.type == com.tubes.purry.data.model.AudioDeviceType.BLUETOOTH_HEADPHONES
+        } ?: devices.find {
+            it.isConnected && it.type == com.tubes.purry.data.model.AudioDeviceType.WIRED_HEADPHONES
+        } ?: devices.find {
+            it.isConnected && it.type == com.tubes.purry.data.model.AudioDeviceType.INTERNAL_SPEAKER
+        }
+    }
+    /**
+     * Auto-select the best available device
+     */
+    fun autoSelectBestDevice(): Boolean {
+        val bestDevice = getBestAvailableDevice()
+        return if (bestDevice != null && !bestDevice.isActive) {
+            selectAudioDevice(bestDevice)
+        } else {
+            false
+        }
+    }
+    override fun onCleared() {
+        super.onCleared()
+        handler.removeCallbacksAndMessages(null)
+        audioRoutingManager.cleanup()
+        Log.d("AudioRoutingViewModel", "🧹 AudioRoutingViewModel cleared")
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/ui/player/AudioDeviceBottomSheet.kt
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/player/AudioDeviceBottomSheet.kt b/app/src/main/java/com/tubes/purry/ui/player/AudioDeviceBottomSheet.kt
new file mode 100644
--- /dev/null	(date 1748195617121)
+++ b/app/src/main/java/com/tubes/purry/ui/player/AudioDeviceBottomSheet.kt	(date 1748195617121)
@@ -0,0 +1,112 @@
+package com.tubes.purry.ui.player
+
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.fragment.app.activityViewModels
+import androidx.recyclerview.widget.LinearLayoutManager
+import com.google.android.material.bottomsheet.BottomSheetDialogFragment
+import com.tubes.purry.R
+import com.tubes.purry.databinding.BottomSheetAudioDeviceBinding
+import com.tubes.purry.data.model.AudioDevice
+
+class AudioDeviceBottomSheet : BottomSheetDialogFragment() {
+
+    private var _binding: BottomSheetAudioDeviceBinding? = null
+    private val binding get() = _binding!!
+
+    private val audioRoutingViewModel: AudioRoutingViewModel by activityViewModels()
+    private lateinit var audioDeviceAdapter: AudioDeviceAdapter
+
+    override fun onCreateView(
+        inflater: LayoutInflater,
+        container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View {
+        _binding = BottomSheetAudioDeviceBinding.inflate(inflater, container, false)
+        return binding.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        setupRecyclerView()
+        observeViewModel()
+
+        binding.btnRefresh.setOnClickListener {
+            audioRoutingViewModel.refreshDevices()
+            binding.progressBar.visibility = View.VISIBLE
+        }
+
+        binding.btnClose.setOnClickListener {
+            dismiss()
+        }
+    }
+
+    private fun setupRecyclerView() {
+        audioDeviceAdapter = AudioDeviceAdapter { device ->
+            selectDevice(device)
+        }
+
+        binding.rvAudioDevices.apply {
+            layoutManager = LinearLayoutManager(requireContext())
+            adapter = audioDeviceAdapter
+        }
+    }
+
+    private fun observeViewModel() {
+        audioRoutingViewModel.availableDevices.observe(viewLifecycleOwner) { devices ->
+            audioDeviceAdapter.submitList(devices)
+            binding.progressBar.visibility = View.GONE
+
+            if (devices.isEmpty()) {
+                binding.tvNoDevices.visibility = View.VISIBLE
+                binding.rvAudioDevices.visibility = View.GONE
+            } else {
+                binding.tvNoDevices.visibility = View.GONE
+                binding.rvAudioDevices.visibility = View.VISIBLE
+            }
+        }
+
+        audioRoutingViewModel.connectionError.observe(viewLifecycleOwner) { error ->
+            error?.let {
+                Toast.makeText(requireContext(), it, Toast.LENGTH_LONG).show()
+                audioRoutingViewModel.clearError()
+            }
+        }
+    }
+
+    private fun selectDevice(device: AudioDevice) {
+        if (!device.isConnected) {
+            Toast.makeText(
+                requireContext(),
+                "Device ${device.name} is not connected",
+                Toast.LENGTH_SHORT
+            ).show()
+            return
+        }
+
+        val success = audioRoutingViewModel.selectAudioDevice(device)
+        if (success) {
+            Toast.makeText(
+                requireContext(),
+                "Switched to ${device.name}",
+                Toast.LENGTH_SHORT
+            ).show()
+            dismiss()
+        }
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+        _binding = null
+    }
+
+    companion object {
+        const val TAG = "AudioDeviceBottomSheet"
+
+        fun newInstance() = AudioDeviceBottomSheet()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/ui/player/AudioDeviceAdapter.kt
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/player/AudioDeviceAdapter.kt b/app/src/main/java/com/tubes/purry/ui/player/AudioDeviceAdapter.kt
new file mode 100644
--- /dev/null	(date 1748195617120)
+++ b/app/src/main/java/com/tubes/purry/ui/player/AudioDeviceAdapter.kt	(date 1748195617120)
@@ -0,0 +1,81 @@
+package com.tubes.purry.ui.player
+import android.view.LayoutInflater
+import android.view.ViewGroup
+import androidx.core.content.ContextCompat
+import androidx.recyclerview.widget.DiffUtil
+import androidx.recyclerview.widget.ListAdapter
+import androidx.recyclerview.widget.RecyclerView
+import com.tubes.purry.R
+import com.tubes.purry.data.model.AudioDevice
+import com.tubes.purry.data.model.AudioDeviceType
+import com.tubes.purry.databinding.ItemAudioDeviceBinding
+class AudioDeviceAdapter(
+    private val onDeviceClick: (AudioDevice) -> Unit
+) : ListAdapter<AudioDevice, AudioDeviceAdapter.AudioDeviceViewHolder>(AudioDeviceDiffCallback()) {
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AudioDeviceViewHolder {
+        val binding = ItemAudioDeviceBinding.inflate(
+            LayoutInflater.from(parent.context),
+            parent,
+            false
+        )
+        return AudioDeviceViewHolder(binding)
+    }
+    override fun onBindViewHolder(holder: AudioDeviceViewHolder, position: Int) {
+        holder.bind(getItem(position))
+    }
+    inner class AudioDeviceViewHolder(
+        private val binding: ItemAudioDeviceBinding
+    ) : RecyclerView.ViewHolder(binding.root) {
+        fun bind(device: AudioDevice) {
+            binding.apply {
+                tvDeviceName.text = device.name
+                tvDeviceStatus.text = when {
+                    device.isActive -> "Active"
+                    device.isConnected -> "Connected"
+                    else -> "Not Connected"
+                }
+                // Set device icon based on type
+                ivDeviceIcon.setImageResource(getDeviceIcon(device.type))
+                // Set status color
+                tvDeviceStatus.setTextColor(
+                    ContextCompat.getColor(
+                        root.context,
+                        when {
+                            device.isActive -> R.color.green
+                            device.isConnected -> android.R.color.white
+                            else -> android.R.color.darker_gray
+                        }
+                    )
+                )
+                // Set active indicator
+                ivActiveIndicator.visibility = if (device.isActive)
+                    android.view.View.VISIBLE else android.view.View.GONE
+                // Set click listener
+                root.setOnClickListener {
+                    onDeviceClick(device)
+                }
+                // Disable click if not connected
+                root.isEnabled = device.isConnected
+                root.alpha = if (device.isConnected) 1.0f else 0.6f
+            }
+        }
+        private fun getDeviceIcon(type: AudioDeviceType): Int {
+            return when (type) {
+                AudioDeviceType.INTERNAL_SPEAKER -> R.drawable.ic_phone_speaker
+                AudioDeviceType.WIRED_HEADPHONES -> R.drawable.ic_headphones_wired
+                AudioDeviceType.BLUETOOTH_HEADPHONES -> R.drawable.ic_headphones_bluetooth
+                AudioDeviceType.BLUETOOTH_SPEAKER -> R.drawable.ic_speaker_bluetooth
+                AudioDeviceType.USB_AUDIO -> R.drawable.ic_usb_audio
+                AudioDeviceType.UNKNOWN -> R.drawable.ic_audio_device_unknown
+            }
+        }
+    }
+}
+class AudioDeviceDiffCallback : DiffUtil.ItemCallback<AudioDevice>() {
+    override fun areItemsTheSame(oldItem: AudioDevice, newItem: AudioDevice): Boolean {
+        return oldItem.id == newItem.id
+    }
+    override fun areContentsTheSame(oldItem: AudioDevice, newItem: AudioDevice): Boolean {
+        return oldItem == newItem
+    }
+}
\ No newline at end of file
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.navigation.safeargs)\r\n    id(\"kotlin-parcelize\")\r\n    id(\"kotlin-kapt\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.tubes.purry\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.tubes.purry\"\r\n        minSdk = 29\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n\r\n    kotlinOptions {\r\n        jvmTarget = \"11\"\r\n    }\r\n\r\n    buildFeatures {\r\n        viewBinding = true\r\n    }\r\n\r\n    kapt {\r\n        correctErrorTypes = true\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation(\"androidx.core:core-ktx:1.12.0\") // ganti 1.15.0 → 1.12.0\r\n    implementation(\"androidx.core:core-splashscreen:1.0.1\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\") // 1.7.0 → 1.6.1\r\n    implementation(\"com.google.android.material:material:1.9.0\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\") // 2.2.1 → 2.1.4\r\n    implementation(\"androidx.lifecycle:lifecycle-livedata-ktx:2.6.1\")\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1\")\r\n    implementation(\"androidx.navigation:navigation-fragment-ktx:2.6.0\")\r\n    implementation(\"androidx.navigation:navigation-ui-ktx:2.6.0\")\r\n    implementation(libs.androidx.legacy.support.v4)\r\n    implementation(libs.androidx.fragment.ktx)\r\n    implementation(libs.androidx.palette.ktx)\r\n    implementation(libs.androidx.ui.graphics.android)\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\r\n\r\n    implementation(\"com.google.code.gson:gson:2.10.1\")\r\n\r\n    // Retrofit for network calls\r\n    implementation(\"com.squareup.retrofit2:retrofit:2.9.0\")\r\n    implementation(\"com.squareup.retrofit2:converter-gson:2.9.0\")\r\n    implementation(\"com.squareup.okhttp3:logging-interceptor:4.9.3\")\r\n\r\n    // Glide for image loading\r\n    implementation(\"com.github.bumptech.glide:glide:4.14.2\")\r\n    annotationProcessor(\"com.github.bumptech.glide:compiler:4.14.2\")\r\n\r\n    // Encrypted SharedPreferences\r\n    implementation(\"androidx.security:security-crypto:1.1.0-alpha03\")\r\n\r\n    // OkHttp\r\n    implementation(\"com.squareup.okhttp3:okhttp:4.10.0\")\r\n    implementation(\"com.squareup.okhttp3:logging-interceptor:4.10.0\")\r\n\r\n    // for keying models\r\n    implementation(\"androidx.room:room-runtime:2.6.1\")\r\n    kapt(\"androidx.room:room-compiler:2.6.1\")\r\n    implementation(\"androidx.room:room-ktx:2.6.1\")\r\n\r\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3\")\r\n\r\n\r\n\r\n//        implementation(libs.androidx.core.ktx)\r\n//        implementation(libs.androidx.appcompat)\r\n//        implementation(libs.material)\r\n//        implementation(libs.androidx.constraintlayout)\r\n//        implementation(libs.androidx.lifecycle.livedata.ktx)\r\n//        implementation(libs.androidx.lifecycle.viewmodel.ktx)\r\n//        implementation(libs.androidx.navigation.fragment.ktx)\r\n//        implementation(libs.androidx.navigation.ui.ktx)\r\n//        testImplementation(libs.junit)\r\n//        androidTestImplementation(libs.androidx.junit)\r\n//        androidTestImplementation(libs.androidx.espresso.core)\r\n}\r\n\r\nkapt {\r\n    correctErrorTypes = true\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/build.gradle.kts	(date 1748195617078)
@@ -2,6 +2,7 @@
     alias(libs.plugins.android.application)
     alias(libs.plugins.kotlin.android)
     alias(libs.plugins.navigation.safeargs)
+    alias(libs.plugins.google.services)
     id("kotlin-parcelize")
     id("kotlin-kapt")
 }
@@ -91,6 +92,45 @@
 
     implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
 
+    // Google Maps
+    implementation("com.google.android.gms:play-services-maps:18.2.0")
+    implementation("com.google.android.gms:play-services-location:21.0.1")
+
+    // CardView untuk UI
+    implementation("androidx.cardview:cardview:1.0.0")
+
+    implementation("com.google.firebase:firebase-dynamic-links-ktx:21.0.1")
+
+    // ZXing untuk generate dan scan QR
+    implementation("com.journeyapps:zxing-android-embedded:4.3.0")
+
+    // For charts (MPAndroidChart)
+    implementation("com.github.PhilJay:MPAndroidChart:v3.1.0")
+
+    // For CSV export
+    implementation("com.opencsv:opencsv:5.7.1")
+
+    // For coroutines (if not already added)
+    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
+
+    // For lifecycle components (if not already added)
+    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0")
+    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.7.0")
+
+    // For RecyclerView and CardView (if not already added)
+    implementation("androidx.recyclerview:recyclerview:1.3.2")
+    implementation("androidx.cardview:cardview:1.0.0")
+
+    // Material Design Components (if not already added)
+    implementation("com.google.android.material:material:1.11.0")
+
+    // For image loading (Glide - if not already added)
+    implementation("com.github.bumptech.glide:glide:4.16.0")
+
+    // Google Maps
+    implementation("com.google.android.gms:play-services-maps:18.2.0")
+    implementation("com.google.android.gms:play-services-location:21.0.1")
+
 
 
 //        implementation(libs.androidx.core.ktx)
Index: app/src/main/res/layout/item_audio_device.xml
===================================================================
diff --git a/app/src/main/res/layout/item_audio_device.xml b/app/src/main/res/layout/item_audio_device.xml
new file mode 100644
--- /dev/null	(date 1748195617190)
+++ b/app/src/main/res/layout/item_audio_device.xml	(date 1748195617190)
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="horizontal"
+    android:gravity="center_vertical"
+    android:padding="16dp"
+    android:background="?attr/selectableItemBackground"
+    android:clickable="true"
+    android:focusable="true">
+
+    <!-- Device Icon -->
+    <ImageView
+        android:id="@+id/iv_device_icon"
+        android:layout_width="32dp"
+        android:layout_height="32dp"
+        android:src="@drawable/ic_headphones_bluetooth"
+        app:tint="@android:color/white"
+        android:layout_marginEnd="16dp" />
+
+    <!-- Device Info -->
+    <LinearLayout
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/tv_device_name"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Device Name"
+            android:textSize="16sp"
+            android:textColor="@android:color/white"
+            android:maxLines="1"
+            android:ellipsize="end" />
+
+        <TextView
+            android:id="@+id/tv_device_status"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Connected"
+            android:textSize="14sp"
+            android:textColor="@android:color/darker_gray"
+            android:layout_marginTop="2dp" />
+
+    </LinearLayout>
+
+    <!-- Active Indicator -->
+    <ImageView
+        android:id="@+id/iv_active_indicator"
+        android:layout_width="24dp"
+        android:layout_height="24dp"
+        android:src="@drawable/ic_check_circle"
+        app:tint="@color/green"
+        android:visibility="gone" />
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/layout/bottom_sheet_audio_device.xml
===================================================================
diff --git a/app/src/main/res/layout/bottom_sheet_audio_device.xml b/app/src/main/res/layout/bottom_sheet_audio_device.xml
new file mode 100644
--- /dev/null	(date 1748195617184)
+++ b/app/src/main/res/layout/bottom_sheet_audio_device.xml	(date 1748195617184)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:padding="16dp"
+    android:background="@drawable/bottom_sheet_background">
+
+    <!-- Header -->
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center_vertical"
+        android:layout_marginBottom="16dp">
+
+        <TextView
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="Choose Audio Output"
+            android:textSize="18sp"
+            android:textStyle="bold"
+            android:textColor="@android:color/white" />
+
+        <ImageButton
+            android:id="@+id/btn_refresh"
+            android:layout_width="40dp"
+            android:layout_height="40dp"
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_refresh"
+            android:contentDescription="Refresh Devices"
+            android:layout_marginEnd="8dp"
+            app:tint="@android:color/white" />
+
+        <ImageButton
+            android:id="@+id/btn_close"
+            android:layout_width="40dp"
+            android:layout_height="40dp"
+            android:background="?attr/selectableItemBackground"
+            android:src="@drawable/ic_close"
+            android:contentDescription="Close"
+            app:tint="@android:color/white" />
+
+    </LinearLayout>
+
+    <!-- Progress Bar -->
+    <ProgressBar
+        android:id="@+id/progress_bar"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:visibility="gone"
+        android:layout_marginBottom="16dp" />
+
+    <!-- Device List -->
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/rv_audio_devices"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:maxHeight="400dp"
+        android:scrollbars="vertical" />
+
+    <!-- No Devices Message -->
+    <TextView
+        android:id="@+id/tv_no_devices"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="No audio devices found"
+        android:textSize="16sp"
+        android:textColor="@android:color/darker_gray"
+        android:gravity="center"
+        android:padding="32dp"
+        android:visibility="gone" />
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/tubes/purry/ui/auth/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tubes.purry.ui.auth\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.util.Patterns\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.tubes.purry.MainActivity\r\nimport com.tubes.purry.data.local.AppDatabase\r\nimport com.tubes.purry.data.model.LoginRequest\r\nimport com.tubes.purry.data.remote.ApiClient\r\nimport com.tubes.purry.data.repository.AuthRepository\r\nimport com.tubes.purry.databinding.ActivityLoginBinding\r\nimport com.tubes.purry.ui.player.NowPlayingViewModel\r\nimport com.tubes.purry.ui.profile.ProfileViewModel\r\nimport com.tubes.purry.ui.profile.ProfileViewModelFactory\r\nimport com.tubes.purry.utils.SessionManager\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\n\r\nclass LoginActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityLoginBinding\r\n    private lateinit var authRepository: AuthRepository\r\n    private lateinit var sessionManager: SessionManager\r\n    private lateinit var nowPlayingViewModel: NowPlayingViewModel\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityLoginBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        sessionManager = SessionManager(this)\r\n        authRepository = AuthRepository(ApiClient.apiService, sessionManager)\r\n\r\n        val token = sessionManager.fetchAuthToken()\r\n        if (!token.isNullOrEmpty()) {\r\n            // cek validitas token\r\n            CoroutineScope(Dispatchers.IO).launch {\r\n                try {\r\n                    val response = authRepository.verifyToken(\"Bearer $token\")\r\n                    withContext(Dispatchers.Main) {\r\n                        if (response.isSuccessful) { // valid\r\n                            navigateToMainActivity()\r\n                        } else {\r\n                            sessionManager.clearTokens()\r\n                            nowPlayingViewModel.clearQueue()\r\n                        }\r\n                    }\r\n                } catch (e: Exception) {\r\n                    withContext(Dispatchers.Main) {\r\n                        // Jaga-jaga kalau ada error jaringan\r\n                        Toast.makeText(this@LoginActivity, \"Error verifying token\", Toast.LENGTH_SHORT).show()\r\n                        sessionManager.clearTokens()\r\n                        nowPlayingViewModel.clearQueue()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        binding.btnLogin.setOnClickListener {\r\n            val email = binding.etEmail.text.toString()\r\n            val password = binding.etPassword.text.toString()\r\n\r\n            if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {\r\n                Toast.makeText(this, \"Invalid email format\", Toast.LENGTH_SHORT).show()\r\n                return@setOnClickListener\r\n            }\r\n            if (password.length < 8) {\r\n                Toast.makeText(this, \"Password must be at least 8 characters\", Toast.LENGTH_SHORT).show()\r\n                return@setOnClickListener\r\n            }\r\n\r\n            if (email.isNotEmpty() && password.isNotEmpty()) {\r\n                login(email, password)\r\n            } else {\r\n                Toast.makeText(this, \"Please enter email and password\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun login(email: String, password: String) {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            try {\r\n                val response = authRepository.login(LoginRequest(email, password))\r\n                withContext(Dispatchers.Main) {\r\n                    if (response.isSuccessful && response.body() != null) {\r\n                        val accessToken = response.body()?.accessToken\r\n                        val refreshToken = response.body()?.refreshToken\r\n\r\n                        accessToken?.let {\r\n                            sessionManager.saveAuthToken(it)\r\n                            Log.d(\"LoginActivity\", \"AccessToken saved: ${it.take(10)}...\")\r\n\r\n                            val userId = sessionManager.getUserIdFromToken()\r\n                            if (userId != null) {\r\n                                sessionManager.saveUserId(userId)\r\n                                Log.d(\"LoginActivity\", \"User ID saved: $userId\")\r\n                            } else {\r\n                                Log.e(\"LoginActivity\", \"Failed to extract user ID from token\")\r\n                            }\r\n                        }\r\n\r\n                        refreshToken?.let {\r\n                            sessionManager.saveRefreshToken(it)\r\n                            Log.d(\"LoginActivity\", \"Refresh token saved\")\r\n                        }\r\n\r\n                        // Verify token was saved correctly\r\n                        val savedToken = sessionManager.fetchAuthToken()\r\n                        Log.d(\"LoginActivity\", \"Token verification after save: ${savedToken != null}\")\r\n\r\n\r\n                        // Fetch profile using saved token\r\n                        accessToken?.let { token ->\r\n                            Log.d(\"LoginActivity\", \"Attempting to fetch profile using token: Bearer $token\")\r\n                            val profileResponse = ApiClient.apiService.getProfile(\"Bearer $token\")\r\n                            if (profileResponse.isSuccessful && profileResponse.body() != null) {\r\n                                val profileData = profileResponse.body()!!\r\n                                Log.d(\"LoginActivity\", \"$profileData\")\r\n\r\n                                // Insert into Room DB\r\n                                val db = AppDatabase.getDatabase(applicationContext)\r\n                                db.userProfileDao().insertOrUpdate(profileData)\r\n                                Log.d(\"LoginActivity\", \"User profile inserted into database\")\r\n//TODO\r\n//                                val userId = sessionManager.getUserIdFromToken()\r\n//                                if (userId != null) {\r\n//                                    sessionManager.saveUserId(userId)\r\n//                                    profileViewModel.setProfileData(profileData)\r\n//                                    profileViewModel.fetchSongStats(userId)\r\n//                                }\r\n                            } else {\r\n                                Log.e(\"LoginActivity\", \"Failed to fetch profile: ${profileResponse.message()}\")\r\n                            }\r\n                        }\r\n\r\n                        withContext(Dispatchers.Main) {\r\n                            navigateToMainActivity()\r\n                        }\r\n                    } else {\r\n                        Toast.makeText(this@LoginActivity, \"Login failed: ${response.message()}\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                withContext(Dispatchers.Main) {\r\n                    Toast.makeText(this@LoginActivity, \"Error: ${e.message}\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun navigateToMainActivity() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n        finish()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tubes/purry/ui/auth/LoginActivity.kt b/app/src/main/java/com/tubes/purry/ui/auth/LoginActivity.kt
--- a/app/src/main/java/com/tubes/purry/ui/auth/LoginActivity.kt	(revision f9e98528dd956b47022f07d100c5ddc413406443)
+++ b/app/src/main/java/com/tubes/purry/ui/auth/LoginActivity.kt	(date 1748195617108)
@@ -26,7 +26,7 @@
     private lateinit var binding: ActivityLoginBinding
     private lateinit var authRepository: AuthRepository
     private lateinit var sessionManager: SessionManager
-    private lateinit var nowPlayingViewModel: NowPlayingViewModel
+//    private lateinit var nowPlayingViewModel: NowPlayingViewModel
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -47,7 +47,7 @@
                             navigateToMainActivity()
                         } else {
                             sessionManager.clearTokens()
-                            nowPlayingViewModel.clearQueue()
+//                            nowPlayingViewModel.clearQueue()
                         }
                     }
                 } catch (e: Exception) {
@@ -55,7 +55,7 @@
                         // Jaga-jaga kalau ada error jaringan
                         Toast.makeText(this@LoginActivity, "Error verifying token", Toast.LENGTH_SHORT).show()
                         sessionManager.clearTokens()
-                        nowPlayingViewModel.clearQueue()
+//                        nowPlayingViewModel.clearQueue()
                     }
                 }
             }
